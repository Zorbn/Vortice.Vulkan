// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

namespace Vortice.Vulkan;

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtent2D
{
	public uint width;
	public uint height;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtent3D
{
	public uint width;
	public uint height;
	public uint depth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOffset2D
{
	public int x;
	public int y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOffset3D
{
	public int x;
	public int y;
	public int z;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRect2D
{
	public VkOffset2D offset;
	public VkExtent2D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBaseInStructure
{
	public VkStructureType sType;
	public unsafe VkBaseInStructure* pNext;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBaseOutStructure
{
	public VkStructureType sType;
	public unsafe VkBaseOutStructure* pNext;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;

	public static VkBufferMemoryBarrier New()
	{
		Unsafe.SkipInit(out VkBufferMemoryBarrier instance);
		instance.sType = VkStructureType.BufferMemoryBarrier;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDispatchIndirectCommand
{
	public uint x;
	public uint y;
	public uint z;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawIndexedIndirectCommand
{
	public uint indexCount;
	public uint instanceCount;
	public uint firstIndex;
	public int vertexOffset;
	public uint firstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawIndirectCommand
{
	public uint vertexCount;
	public uint instanceCount;
	public uint firstVertex;
	public uint firstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresourceRange
{
	public VkImageAspectFlags aspectMask;
	public uint baseMipLevel;
	public uint levelCount;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;

	public static VkImageMemoryBarrier New()
	{
		Unsafe.SkipInit(out VkImageMemoryBarrier instance);
		instance.sType = VkStructureType.ImageMemoryBarrier;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;

	public static VkMemoryBarrier New()
	{
		Unsafe.SkipInit(out VkMemoryBarrier instance);
		instance.sType = VkStructureType.MemoryBarrier;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCacheHeaderVersionOne
{
	public uint headerSize;
	public VkPipelineCacheHeaderVersion headerVersion;
	public uint vendorID;
	public uint deviceID;
	public unsafe fixed byte pipelineCacheUUID[16];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAllocationCallbacks
{
	public unsafe void* pUserData;
	public unsafe delegate* unmanaged<void*, nuint, nuint, VkSystemAllocationScope, void*> pfnAllocation;
	public unsafe delegate* unmanaged<void*, void*, nuint, nuint, VkSystemAllocationScope, void*> pfnReallocation;
	public unsafe delegate* unmanaged<void*, void*, void> pfnFree;
	public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation;
	public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkApplicationInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe sbyte* pApplicationName;
	public VkVersion applicationVersion;
	public unsafe sbyte* pEngineName;
	public VkVersion engineVersion;
	public VkVersion apiVersion;

	public static VkApplicationInfo New()
	{
		Unsafe.SkipInit(out VkApplicationInfo instance);
		instance.sType = VkStructureType.ApplicationInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties
{
	public VkFormatFeatureFlags linearTilingFeatures;
	public VkFormatFeatureFlags optimalTilingFeatures;
	public VkFormatFeatureFlags bufferFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatProperties
{
	public VkExtent3D maxExtent;
	public uint maxMipLevels;
	public uint maxArrayLayers;
	public VkSampleCountFlags sampleCounts;
	public ulong maxResourceSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInstanceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkInstanceCreateFlags flags;
	public unsafe VkApplicationInfo* pApplicationInfo;
	public uint enabledLayerCount;
	public unsafe sbyte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public unsafe sbyte** ppEnabledExtensionNames;

	public static VkInstanceCreateInfo New()
	{
		Unsafe.SkipInit(out VkInstanceCreateInfo instance);
		instance.sType = VkStructureType.InstanceCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryHeap
{
	public ulong size;
	public VkMemoryHeapFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryType
{
	public VkMemoryPropertyFlags propertyFlags;
	public uint heapIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFeatures
{
	public VkBool32 robustBufferAccess;
	public VkBool32 fullDrawIndexUint32;
	public VkBool32 imageCubeArray;
	public VkBool32 independentBlend;
	public VkBool32 geometryShader;
	public VkBool32 tessellationShader;
	public VkBool32 sampleRateShading;
	public VkBool32 dualSrcBlend;
	public VkBool32 logicOp;
	public VkBool32 multiDrawIndirect;
	public VkBool32 drawIndirectFirstInstance;
	public VkBool32 depthClamp;
	public VkBool32 depthBiasClamp;
	public VkBool32 fillModeNonSolid;
	public VkBool32 depthBounds;
	public VkBool32 wideLines;
	public VkBool32 largePoints;
	public VkBool32 alphaToOne;
	public VkBool32 multiViewport;
	public VkBool32 samplerAnisotropy;
	public VkBool32 textureCompressionETC2;
	public VkBool32 textureCompressionASTC_LDR;
	public VkBool32 textureCompressionBC;
	public VkBool32 occlusionQueryPrecise;
	public VkBool32 pipelineStatisticsQuery;
	public VkBool32 vertexPipelineStoresAndAtomics;
	public VkBool32 fragmentStoresAndAtomics;
	public VkBool32 shaderTessellationAndGeometryPointSize;
	public VkBool32 shaderImageGatherExtended;
	public VkBool32 shaderStorageImageExtendedFormats;
	public VkBool32 shaderStorageImageMultisample;
	public VkBool32 shaderStorageImageReadWithoutFormat;
	public VkBool32 shaderStorageImageWriteWithoutFormat;
	public VkBool32 shaderUniformBufferArrayDynamicIndexing;
	public VkBool32 shaderSampledImageArrayDynamicIndexing;
	public VkBool32 shaderStorageBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageImageArrayDynamicIndexing;
	public VkBool32 shaderClipDistance;
	public VkBool32 shaderCullDistance;
	public VkBool32 shaderFloat64;
	public VkBool32 shaderInt64;
	public VkBool32 shaderInt16;
	public VkBool32 shaderResourceResidency;
	public VkBool32 shaderResourceMinLod;
	public VkBool32 sparseBinding;
	public VkBool32 sparseResidencyBuffer;
	public VkBool32 sparseResidencyImage2D;
	public VkBool32 sparseResidencyImage3D;
	public VkBool32 sparseResidency2Samples;
	public VkBool32 sparseResidency4Samples;
	public VkBool32 sparseResidency8Samples;
	public VkBool32 sparseResidency16Samples;
	public VkBool32 sparseResidencyAliased;
	public VkBool32 variableMultisampleRate;
	public VkBool32 inheritedQueries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLimits
{
	public uint maxImageDimension1D;
	public uint maxImageDimension2D;
	public uint maxImageDimension3D;
	public uint maxImageDimensionCube;
	public uint maxImageArrayLayers;
	public uint maxTexelBufferElements;
	public uint maxUniformBufferRange;
	public uint maxStorageBufferRange;
	public uint maxPushConstantsSize;
	public uint maxMemoryAllocationCount;
	public uint maxSamplerAllocationCount;
	public ulong bufferImageGranularity;
	public ulong sparseAddressSpaceSize;
	public uint maxBoundDescriptorSets;
	public uint maxPerStageDescriptorSamplers;
	public uint maxPerStageDescriptorUniformBuffers;
	public uint maxPerStageDescriptorStorageBuffers;
	public uint maxPerStageDescriptorSampledImages;
	public uint maxPerStageDescriptorStorageImages;
	public uint maxPerStageDescriptorInputAttachments;
	public uint maxPerStageResources;
	public uint maxDescriptorSetSamplers;
	public uint maxDescriptorSetUniformBuffers;
	public uint maxDescriptorSetUniformBuffersDynamic;
	public uint maxDescriptorSetStorageBuffers;
	public uint maxDescriptorSetStorageBuffersDynamic;
	public uint maxDescriptorSetSampledImages;
	public uint maxDescriptorSetStorageImages;
	public uint maxDescriptorSetInputAttachments;
	public uint maxVertexInputAttributes;
	public uint maxVertexInputBindings;
	public uint maxVertexInputAttributeOffset;
	public uint maxVertexInputBindingStride;
	public uint maxVertexOutputComponents;
	public uint maxTessellationGenerationLevel;
	public uint maxTessellationPatchSize;
	public uint maxTessellationControlPerVertexInputComponents;
	public uint maxTessellationControlPerVertexOutputComponents;
	public uint maxTessellationControlPerPatchOutputComponents;
	public uint maxTessellationControlTotalOutputComponents;
	public uint maxTessellationEvaluationInputComponents;
	public uint maxTessellationEvaluationOutputComponents;
	public uint maxGeometryShaderInvocations;
	public uint maxGeometryInputComponents;
	public uint maxGeometryOutputComponents;
	public uint maxGeometryOutputVertices;
	public uint maxGeometryTotalOutputComponents;
	public uint maxFragmentInputComponents;
	public uint maxFragmentOutputAttachments;
	public uint maxFragmentDualSrcAttachments;
	public uint maxFragmentCombinedOutputResources;
	public uint maxComputeSharedMemorySize;
	public unsafe fixed uint maxComputeWorkGroupCount[3];
	public uint maxComputeWorkGroupInvocations;
	public unsafe fixed uint maxComputeWorkGroupSize[3];
	public uint subPixelPrecisionBits;
	public uint subTexelPrecisionBits;
	public uint mipmapPrecisionBits;
	public uint maxDrawIndexedIndexValue;
	public uint maxDrawIndirectCount;
	public float maxSamplerLodBias;
	public float maxSamplerAnisotropy;
	public uint maxViewports;
	public unsafe fixed uint maxViewportDimensions[2];
	public unsafe fixed float viewportBoundsRange[2];
	public uint viewportSubPixelBits;
	public nuint minMemoryMapAlignment;
	public ulong minTexelBufferOffsetAlignment;
	public ulong minUniformBufferOffsetAlignment;
	public ulong minStorageBufferOffsetAlignment;
	public int minTexelOffset;
	public uint maxTexelOffset;
	public int minTexelGatherOffset;
	public uint maxTexelGatherOffset;
	public float minInterpolationOffset;
	public float maxInterpolationOffset;
	public uint subPixelInterpolationOffsetBits;
	public uint maxFramebufferWidth;
	public uint maxFramebufferHeight;
	public uint maxFramebufferLayers;
	public VkSampleCountFlags framebufferColorSampleCounts;
	public VkSampleCountFlags framebufferDepthSampleCounts;
	public VkSampleCountFlags framebufferStencilSampleCounts;
	public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
	public uint maxColorAttachments;
	public VkSampleCountFlags sampledImageColorSampleCounts;
	public VkSampleCountFlags sampledImageIntegerSampleCounts;
	public VkSampleCountFlags sampledImageDepthSampleCounts;
	public VkSampleCountFlags sampledImageStencilSampleCounts;
	public VkSampleCountFlags storageImageSampleCounts;
	public uint maxSampleMaskWords;
	public VkBool32 timestampComputeAndGraphics;
	public float timestampPeriod;
	public uint maxClipDistances;
	public uint maxCullDistances;
	public uint maxCombinedClipAndCullDistances;
	public uint discreteQueuePriorities;
	public unsafe fixed float pointSizeRange[2];
	public unsafe fixed float lineWidthRange[2];
	public float pointSizeGranularity;
	public float lineWidthGranularity;
	public VkBool32 strictLines;
	public VkBool32 standardSampleLocations;
	public ulong optimalBufferCopyOffsetAlignment;
	public ulong optimalBufferCopyRowPitchAlignment;
	public ulong nonCoherentAtomSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryProperties
{
	public uint memoryTypeCount;
	public memoryTypes__FixedBuffer memoryTypes;

	public unsafe struct memoryTypes__FixedBuffer
	{
		public VkMemoryType e0;
		public VkMemoryType e1;
		public VkMemoryType e2;
		public VkMemoryType e3;
		public VkMemoryType e4;
		public VkMemoryType e5;
		public VkMemoryType e6;
		public VkMemoryType e7;
		public VkMemoryType e8;
		public VkMemoryType e9;
		public VkMemoryType e10;
		public VkMemoryType e11;
		public VkMemoryType e12;
		public VkMemoryType e13;
		public VkMemoryType e14;
		public VkMemoryType e15;
		public VkMemoryType e16;
		public VkMemoryType e17;
		public VkMemoryType e18;
		public VkMemoryType e19;
		public VkMemoryType e20;
		public VkMemoryType e21;
		public VkMemoryType e22;
		public VkMemoryType e23;
		public VkMemoryType e24;
		public VkMemoryType e25;
		public VkMemoryType e26;
		public VkMemoryType e27;
		public VkMemoryType e28;
		public VkMemoryType e29;
		public VkMemoryType e30;
		public VkMemoryType e31;

		[UnscopedRef]
		public ref VkMemoryType this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkMemoryType> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 32);
		}
	}
	public uint memoryHeapCount;
	public memoryHeaps__FixedBuffer memoryHeaps;

	public unsafe struct memoryHeaps__FixedBuffer
	{
		public VkMemoryHeap e0;
		public VkMemoryHeap e1;
		public VkMemoryHeap e2;
		public VkMemoryHeap e3;
		public VkMemoryHeap e4;
		public VkMemoryHeap e5;
		public VkMemoryHeap e6;
		public VkMemoryHeap e7;
		public VkMemoryHeap e8;
		public VkMemoryHeap e9;
		public VkMemoryHeap e10;
		public VkMemoryHeap e11;
		public VkMemoryHeap e12;
		public VkMemoryHeap e13;
		public VkMemoryHeap e14;
		public VkMemoryHeap e15;

		[UnscopedRef]
		public ref VkMemoryHeap this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkMemoryHeap> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 16);
		}
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSparseProperties
{
	public VkBool32 residencyStandard2DBlockShape;
	public VkBool32 residencyStandard2DMultisampleBlockShape;
	public VkBool32 residencyStandard3DBlockShape;
	public VkBool32 residencyAlignedMipSize;
	public VkBool32 residencyNonResidentStrict;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProperties
{
	public VkVersion apiVersion;
	public uint driverVersion;
	public uint vendorID;
	public uint deviceID;
	public VkPhysicalDeviceType deviceType;
	public unsafe fixed sbyte deviceName[256];
	public unsafe fixed byte pipelineCacheUUID[16];
	public VkPhysicalDeviceLimits limits;
	public VkPhysicalDeviceSparseProperties sparseProperties;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyProperties
{
	public VkQueueFlags queueFlags;
	public uint queueCount;
	public uint timestampValidBits;
	public VkExtent3D minImageTransferGranularity;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueCount;
	public unsafe float* pQueuePriorities;

	public static VkDeviceQueueCreateInfo New()
	{
		Unsafe.SkipInit(out VkDeviceQueueCreateInfo instance);
		instance.sType = VkStructureType.DeviceQueueCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceCreateFlags flags;
	public uint queueCreateInfoCount;
	public unsafe VkDeviceQueueCreateInfo* pQueueCreateInfos;
	public uint enabledLayerCount;
	public unsafe sbyte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public unsafe sbyte** ppEnabledExtensionNames;
	public unsafe VkPhysicalDeviceFeatures* pEnabledFeatures;

	public static VkDeviceCreateInfo New()
	{
		Unsafe.SkipInit(out VkDeviceCreateInfo instance);
		instance.sType = VkStructureType.DeviceCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtensionProperties
{
	public unsafe fixed sbyte extensionName[256];
	public VkVersion specVersion;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkLayerProperties
{
	public unsafe fixed sbyte layerName[256];
	public VkVersion specVersion;
	public uint implementationVersion;
	public unsafe fixed sbyte description[256];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public unsafe VkPipelineStageFlags* pWaitDstStageMask;
	public uint commandBufferCount;
	public unsafe VkCommandBuffer* pCommandBuffers;
	public uint signalSemaphoreCount;
	public unsafe VkSemaphore* pSignalSemaphores;

	public static VkSubmitInfo New()
	{
		Unsafe.SkipInit(out VkSubmitInfo instance);
		instance.sType = VkStructureType.SubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMappedMemoryRange
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public ulong offset;
	public ulong size;

	public static VkMappedMemoryRange New()
	{
		Unsafe.SkipInit(out VkMappedMemoryRange instance);
		instance.sType = VkStructureType.MappedMemoryRange;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong allocationSize;
	public uint memoryTypeIndex;

	public static VkMemoryAllocateInfo New()
	{
		Unsafe.SkipInit(out VkMemoryAllocateInfo instance);
		instance.sType = VkStructureType.MemoryAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryRequirements
{
	public ulong size;
	public ulong alignment;
	public uint memoryTypeBits;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseMemoryBind
{
	public ulong resourceOffset;
	public ulong size;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseBufferMemoryBindInfo
{
	public VkBuffer buffer;
	public uint bindCount;
	public unsafe VkSparseMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageOpaqueMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public unsafe VkSparseMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresource
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint arrayLayer;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryBind
{
	public VkImageSubresource subresource;
	public VkOffset3D offset;
	public VkExtent3D extent;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public unsafe VkSparseImageMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindSparseInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public uint bufferBindCount;
	public unsafe VkSparseBufferMemoryBindInfo* pBufferBinds;
	public uint imageOpaqueBindCount;
	public unsafe VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
	public uint imageBindCount;
	public unsafe VkSparseImageMemoryBindInfo* pImageBinds;
	public uint signalSemaphoreCount;
	public unsafe VkSemaphore* pSignalSemaphores;

	public static VkBindSparseInfo New()
	{
		Unsafe.SkipInit(out VkBindSparseInfo instance);
		instance.sType = VkStructureType.BindSparseInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageFormatProperties
{
	public VkImageAspectFlags aspectMask;
	public VkExtent3D imageGranularity;
	public VkSparseImageFormatFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryRequirements
{
	public VkSparseImageFormatProperties formatProperties;
	public uint imageMipTailFirstLod;
	public ulong imageMipTailSize;
	public ulong imageMipTailOffset;
	public ulong imageMipTailStride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFenceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFenceCreateFlags flags;

	public static VkFenceCreateInfo New()
	{
		Unsafe.SkipInit(out VkFenceCreateInfo instance);
		instance.sType = VkStructureType.FenceCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreCreateFlags flags;

	public static VkSemaphoreCreateInfo New()
	{
		Unsafe.SkipInit(out VkSemaphoreCreateInfo instance);
		instance.sType = VkStructureType.SemaphoreCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkEventCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkEventCreateFlags flags;

	public static VkEventCreateInfo New()
	{
		Unsafe.SkipInit(out VkEventCreateInfo instance);
		instance.sType = VkStructureType.EventCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueryPoolCreateFlags flags;
	public VkQueryType queryType;
	public uint queryCount;
	public VkQueryPipelineStatisticFlags pipelineStatistics;

	public static VkQueryPoolCreateInfo New()
	{
		Unsafe.SkipInit(out VkQueryPoolCreateInfo instance);
		instance.sType = VkStructureType.QueryPoolCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferCreateFlags flags;
	public ulong size;
	public VkBufferUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;

	public static VkBufferCreateInfo New()
	{
		Unsafe.SkipInit(out VkBufferCreateInfo instance);
		instance.sType = VkStructureType.BufferCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferViewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferViewCreateFlags flags;
	public VkBuffer buffer;
	public VkFormat format;
	public ulong offset;
	public ulong range;

	public static VkBufferViewCreateInfo New()
	{
		Unsafe.SkipInit(out VkBufferViewCreateInfo instance);
		instance.sType = VkStructureType.BufferViewCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCreateFlags flags;
	public VkImageType imageType;
	public VkFormat format;
	public VkExtent3D extent;
	public uint mipLevels;
	public uint arrayLayers;
	public VkSampleCountFlags samples;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkImageLayout initialLayout;

	public static VkImageCreateInfo New()
	{
		Unsafe.SkipInit(out VkImageCreateInfo instance);
		instance.sType = VkStructureType.ImageCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubresourceLayout
{
	public ulong offset;
	public ulong size;
	public ulong rowPitch;
	public ulong arrayPitch;
	public ulong depthPitch;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkComponentMapping
{
	public VkComponentSwizzle r;
	public VkComponentSwizzle g;
	public VkComponentSwizzle b;
	public VkComponentSwizzle a;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageViewCreateFlags flags;
	public VkImage image;
	public VkImageViewType viewType;
	public VkFormat format;
	public VkComponentMapping components;
	public VkImageSubresourceRange subresourceRange;

	public static VkImageViewCreateInfo New()
	{
		Unsafe.SkipInit(out VkImageViewCreateInfo instance);
		instance.sType = VkStructureType.ImageViewCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderModuleCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderModuleCreateFlags flags;
	public nuint codeSize;
	public unsafe uint* pCode;

	public static VkShaderModuleCreateInfo New()
	{
		Unsafe.SkipInit(out VkShaderModuleCreateInfo instance);
		instance.sType = VkStructureType.ShaderModuleCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCacheCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCacheCreateFlags flags;
	public nuint initialDataSize;
	public unsafe void* pInitialData;

	public static VkPipelineCacheCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineCacheCreateInfo instance);
		instance.sType = VkStructureType.PipelineCacheCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSpecializationMapEntry
{
	public uint constantID;
	public uint offset;
	public nuint size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSpecializationInfo
{
	public uint mapEntryCount;
	public unsafe VkSpecializationMapEntry* pMapEntries;
	public nuint dataSize;
	public unsafe void* pData;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineShaderStageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineShaderStageCreateFlags flags;
	public VkShaderStageFlags stage;
	public VkShaderModule module;
	public unsafe sbyte* pName;
	public unsafe VkSpecializationInfo* pSpecializationInfo;

	public static VkPipelineShaderStageCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineShaderStageCreateInfo instance);
		instance.sType = VkStructureType.PipelineShaderStageCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkComputePipelineCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public VkPipelineShaderStageCreateInfo stage;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public static VkComputePipelineCreateInfo New()
	{
		Unsafe.SkipInit(out VkComputePipelineCreateInfo instance);
		instance.sType = VkStructureType.ComputePipelineCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDescription
{
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputAttributeDescription
{
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineVertexInputStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineVertexInputStateCreateFlags flags;
	public uint vertexBindingDescriptionCount;
	public unsafe VkVertexInputBindingDescription* pVertexBindingDescriptions;
	public uint vertexAttributeDescriptionCount;
	public unsafe VkVertexInputAttributeDescription* pVertexAttributeDescriptions;

	public static VkPipelineVertexInputStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineVertexInputStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineVertexInputStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineInputAssemblyStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineInputAssemblyStateCreateFlags flags;
	public VkPrimitiveTopology topology;
	public VkBool32 primitiveRestartEnable;

	public static VkPipelineInputAssemblyStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineInputAssemblyStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineInputAssemblyStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineTessellationStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineTessellationStateCreateFlags flags;
	public uint patchControlPoints;

	public static VkPipelineTessellationStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineTessellationStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineTessellationStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewport
{
	public float x;
	public float y;
	public float width;
	public float height;
	public float minDepth;
	public float maxDepth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineViewportStateCreateFlags flags;
	public uint viewportCount;
	public unsafe VkViewport* pViewports;
	public uint scissorCount;
	public unsafe VkRect2D* pScissors;

	public static VkPipelineViewportStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineViewportStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineViewportStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationStateCreateFlags flags;
	public VkBool32 depthClampEnable;
	public VkBool32 rasterizerDiscardEnable;
	public VkPolygonMode polygonMode;
	public VkCullModeFlags cullMode;
	public VkFrontFace frontFace;
	public VkBool32 depthBiasEnable;
	public float depthBiasConstantFactor;
	public float depthBiasClamp;
	public float depthBiasSlopeFactor;
	public float lineWidth;

	public static VkPipelineRasterizationStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineRasterizationStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineMultisampleStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineMultisampleStateCreateFlags flags;
	public VkSampleCountFlags rasterizationSamples;
	public VkBool32 sampleShadingEnable;
	public float minSampleShading;
	public unsafe uint* pSampleMask;
	public VkBool32 alphaToCoverageEnable;
	public VkBool32 alphaToOneEnable;

	public static VkPipelineMultisampleStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineMultisampleStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineMultisampleStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkStencilOpState
{
	public VkStencilOp failOp;
	public VkStencilOp passOp;
	public VkStencilOp depthFailOp;
	public VkCompareOp compareOp;
	public uint compareMask;
	public uint writeMask;
	public uint reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDepthStencilStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDepthStencilStateCreateFlags flags;
	public VkBool32 depthTestEnable;
	public VkBool32 depthWriteEnable;
	public VkCompareOp depthCompareOp;
	public VkBool32 depthBoundsTestEnable;
	public VkBool32 stencilTestEnable;
	public VkStencilOpState front;
	public VkStencilOpState back;
	public float minDepthBounds;
	public float maxDepthBounds;

	public static VkPipelineDepthStencilStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineDepthStencilStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineDepthStencilStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendAttachmentState
{
	public VkBool32 blendEnable;
	public VkBlendFactor srcColorBlendFactor;
	public VkBlendFactor dstColorBlendFactor;
	public VkBlendOp colorBlendOp;
	public VkBlendFactor srcAlphaBlendFactor;
	public VkBlendFactor dstAlphaBlendFactor;
	public VkBlendOp alphaBlendOp;
	public VkColorComponentFlags colorWriteMask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineColorBlendStateCreateFlags flags;
	public VkBool32 logicOpEnable;
	public VkLogicOp logicOp;
	public uint attachmentCount;
	public unsafe VkPipelineColorBlendAttachmentState* pAttachments;
	public unsafe fixed float blendConstants[4];

	public static VkPipelineColorBlendStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineColorBlendStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineColorBlendStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDynamicStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDynamicStateCreateFlags flags;
	public uint dynamicStateCount;
	public unsafe VkDynamicState* pDynamicStates;

	public static VkPipelineDynamicStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineDynamicStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineDynamicStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public unsafe VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
	public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;
	public unsafe VkPipelineViewportStateCreateInfo* pViewportState;
	public unsafe VkPipelineRasterizationStateCreateInfo* pRasterizationState;
	public unsafe VkPipelineMultisampleStateCreateInfo* pMultisampleState;
	public unsafe VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
	public unsafe VkPipelineColorBlendStateCreateInfo* pColorBlendState;
	public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public static VkGraphicsPipelineCreateInfo New()
	{
		Unsafe.SkipInit(out VkGraphicsPipelineCreateInfo instance);
		instance.sType = VkStructureType.GraphicsPipelineCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPushConstantRange
{
	public VkShaderStageFlags stageFlags;
	public uint offset;
	public uint size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineLayoutCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineLayoutCreateFlags flags;
	public uint setLayoutCount;
	public unsafe VkDescriptorSetLayout* pSetLayouts;
	public uint pushConstantRangeCount;
	public unsafe VkPushConstantRange* pPushConstantRanges;

	public static VkPipelineLayoutCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineLayoutCreateInfo instance);
		instance.sType = VkStructureType.PipelineLayoutCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerCreateFlags flags;
	public VkFilter magFilter;
	public VkFilter minFilter;
	public VkSamplerMipmapMode mipmapMode;
	public VkSamplerAddressMode addressModeU;
	public VkSamplerAddressMode addressModeV;
	public VkSamplerAddressMode addressModeW;
	public float mipLodBias;
	public VkBool32 anisotropyEnable;
	public float maxAnisotropy;
	public VkBool32 compareEnable;
	public VkCompareOp compareOp;
	public float minLod;
	public float maxLod;
	public VkBorderColor borderColor;
	public VkBool32 unnormalizedCoordinates;

	public static VkSamplerCreateInfo New()
	{
		Unsafe.SkipInit(out VkSamplerCreateInfo instance);
		instance.sType = VkStructureType.SamplerCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyDescriptorSet
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSet srcSet;
	public uint srcBinding;
	public uint srcArrayElement;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;

	public static VkCopyDescriptorSet New()
	{
		Unsafe.SkipInit(out VkCopyDescriptorSet instance);
		instance.sType = VkStructureType.CopyDescriptorSet;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorBufferInfo
{
	public VkBuffer buffer;
	public ulong offset;
	public ulong range;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorImageInfo
{
	public VkSampler sampler;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolSize
{
	public VkDescriptorType type;
	public uint descriptorCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorPoolCreateFlags flags;
	public uint maxSets;
	public uint poolSizeCount;
	public unsafe VkDescriptorPoolSize* pPoolSizes;

	public static VkDescriptorPoolCreateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorPoolCreateInfo instance);
		instance.sType = VkStructureType.DescriptorPoolCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorPool descriptorPool;
	public uint descriptorSetCount;
	public unsafe VkDescriptorSetLayout* pSetLayouts;

	public static VkDescriptorSetAllocateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorSetAllocateInfo instance);
		instance.sType = VkStructureType.DescriptorSetAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutBinding
{
	public uint binding;
	public VkDescriptorType descriptorType;
	public uint descriptorCount;
	public VkShaderStageFlags stageFlags;
	public unsafe VkSampler* pImmutableSamplers;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSetLayoutCreateFlags flags;
	public uint bindingCount;
	public unsafe VkDescriptorSetLayoutBinding* pBindings;

	public static VkDescriptorSetLayoutCreateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorSetLayoutCreateInfo instance);
		instance.sType = VkStructureType.DescriptorSetLayoutCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSet
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public unsafe VkDescriptorImageInfo* pImageInfo;
	public unsafe VkDescriptorBufferInfo* pBufferInfo;
	public unsafe VkBufferView* pTexelBufferView;

	public static VkWriteDescriptorSet New()
	{
		Unsafe.SkipInit(out VkWriteDescriptorSet instance);
		instance.sType = VkStructureType.WriteDescriptorSet;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescription
{
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReference
{
	public uint attachment;
	public VkImageLayout layout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFramebufferCreateFlags flags;
	public VkRenderPass renderPass;
	public uint attachmentCount;
	public unsafe VkImageView* pAttachments;
	public uint width;
	public uint height;
	public uint layers;

	public static VkFramebufferCreateInfo New()
	{
		Unsafe.SkipInit(out VkFramebufferCreateInfo instance);
		instance.sType = VkStructureType.FramebufferCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescription
{
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint inputAttachmentCount;
	public unsafe VkAttachmentReference* pInputAttachments;
	public uint colorAttachmentCount;
	public unsafe VkAttachmentReference* pColorAttachments;
	public unsafe VkAttachmentReference* pResolveAttachments;
	public unsafe VkAttachmentReference* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public unsafe uint* pPreserveAttachments;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDependency
{
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public unsafe VkAttachmentDescription* pAttachments;
	public uint subpassCount;
	public unsafe VkSubpassDescription* pSubpasses;
	public uint dependencyCount;
	public unsafe VkSubpassDependency* pDependencies;

	public static VkRenderPassCreateInfo New()
	{
		Unsafe.SkipInit(out VkRenderPassCreateInfo instance);
		instance.sType = VkStructureType.RenderPassCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandPoolCreateFlags flags;
	public uint queueFamilyIndex;

	public static VkCommandPoolCreateInfo New()
	{
		Unsafe.SkipInit(out VkCommandPoolCreateInfo instance);
		instance.sType = VkStructureType.CommandPoolCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandPool commandPool;
	public VkCommandBufferLevel level;
	public uint commandBufferCount;

	public static VkCommandBufferAllocateInfo New()
	{
		Unsafe.SkipInit(out VkCommandBufferAllocateInfo instance);
		instance.sType = VkStructureType.CommandBufferAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkFramebuffer framebuffer;
	public VkBool32 occlusionQueryEnable;
	public VkQueryControlFlags queryFlags;
	public VkQueryPipelineStatisticFlags pipelineStatistics;

	public static VkCommandBufferInheritanceInfo New()
	{
		Unsafe.SkipInit(out VkCommandBufferInheritanceInfo instance);
		instance.sType = VkStructureType.CommandBufferInheritanceInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandBufferUsageFlags flags;
	public unsafe VkCommandBufferInheritanceInfo* pInheritanceInfo;

	public static VkCommandBufferBeginInfo New()
	{
		Unsafe.SkipInit(out VkCommandBufferBeginInfo instance);
		instance.sType = VkStructureType.CommandBufferBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCopy
{
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresourceLayers
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferImageCopy
{
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
}

[StructLayout(LayoutKind.Sequential)]
public readonly partial struct VkClearDepthStencilValue
{
	public readonly float depth;
	public readonly uint stencil;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkClearValue
{
	[FieldOffset(0)]
	public VkClearColorValue color;
	[FieldOffset(0)]
	public VkClearDepthStencilValue depthStencil;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkClearAttachment
{
	public VkImageAspectFlags aspectMask;
	public uint colorAttachment;
	public VkClearValue clearValue;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkClearRect
{
	public VkRect2D rect;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageBlit
{
	public VkImageSubresourceLayers srcSubresource;
	public srcOffsets__FixedBuffer srcOffsets;

	public unsafe struct srcOffsets__FixedBuffer
	{
		public VkOffset3D e0;
		public VkOffset3D e1;

		[UnscopedRef]
		public ref VkOffset3D this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkOffset3D> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}
	public VkImageSubresourceLayers dstSubresource;
	public dstOffsets__FixedBuffer dstOffsets;

	public unsafe struct dstOffsets__FixedBuffer
	{
		public VkOffset3D e0;
		public VkOffset3D e1;

		[UnscopedRef]
		public ref VkOffset3D this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkOffset3D> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCopy
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageResolve
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public VkFramebuffer framebuffer;
	public VkRect2D renderArea;
	public uint clearValueCount;
	public unsafe VkClearValue* pClearValues;

	public static VkRenderPassBeginInfo New()
	{
		Unsafe.SkipInit(out VkRenderPassBeginInfo instance);
		instance.sType = VkStructureType.RenderPassBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint subgroupSize;
	public VkShaderStageFlags supportedStages;
	public VkSubgroupFeatureFlags supportedOperations;
	public VkBool32 quadOperationsInAllStages;

	public static VkPhysicalDeviceSubgroupProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubgroupProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceSubgroupProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindBufferMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public static VkBindBufferMemoryInfo New()
	{
		Unsafe.SkipInit(out VkBindBufferMemoryInfo instance);
		instance.sType = VkStructureType.BindBufferMemoryInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkDeviceMemory memory;
	public ulong memoryOffset;

	public static VkBindImageMemoryInfo New()
	{
		Unsafe.SkipInit(out VkBindImageMemoryInfo instance);
		instance.sType = VkStructureType.BindImageMemoryInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice16BitStorageFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;

	public static VkPhysicalDevice16BitStorageFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDevice16BitStorageFeatures instance);
		instance.sType = VkStructureType.PhysicalDevice16BitStorageFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryDedicatedRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 prefersDedicatedAllocation;
	public VkBool32 requiresDedicatedAllocation;

	public static VkMemoryDedicatedRequirements New()
	{
		Unsafe.SkipInit(out VkMemoryDedicatedRequirements instance);
		instance.sType = VkStructureType.MemoryDedicatedRequirements;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryDedicatedAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkBuffer buffer;

	public static VkMemoryDedicatedAllocateInfo New()
	{
		Unsafe.SkipInit(out VkMemoryDedicatedAllocateInfo instance);
		instance.sType = VkStructureType.MemoryDedicatedAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryAllocateFlagsInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryAllocateFlags flags;
	public uint deviceMask;

	public static VkMemoryAllocateFlagsInfo New()
	{
		Unsafe.SkipInit(out VkMemoryAllocateFlagsInfo instance);
		instance.sType = VkStructureType.MemoryAllocateFlagsInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupRenderPassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceMask;
	public uint deviceRenderAreaCount;
	public unsafe VkRect2D* pDeviceRenderAreas;

	public static VkDeviceGroupRenderPassBeginInfo New()
	{
		Unsafe.SkipInit(out VkDeviceGroupRenderPassBeginInfo instance);
		instance.sType = VkStructureType.DeviceGroupRenderPassBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupCommandBufferBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceMask;

	public static VkDeviceGroupCommandBufferBeginInfo New()
	{
		Unsafe.SkipInit(out VkDeviceGroupCommandBufferBeginInfo instance);
		instance.sType = VkStructureType.DeviceGroupCommandBufferBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe uint* pWaitSemaphoreDeviceIndices;
	public uint commandBufferCount;
	public unsafe uint* pCommandBufferDeviceMasks;
	public uint signalSemaphoreCount;
	public unsafe uint* pSignalSemaphoreDeviceIndices;

	public static VkDeviceGroupSubmitInfo New()
	{
		Unsafe.SkipInit(out VkDeviceGroupSubmitInfo instance);
		instance.sType = VkStructureType.DeviceGroupSubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupBindSparseInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint resourceDeviceIndex;
	public uint memoryDeviceIndex;

	public static VkDeviceGroupBindSparseInfo New()
	{
		Unsafe.SkipInit(out VkDeviceGroupBindSparseInfo instance);
		instance.sType = VkStructureType.DeviceGroupBindSparseInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindBufferMemoryDeviceGroupInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;

	public static VkBindBufferMemoryDeviceGroupInfo New()
	{
		Unsafe.SkipInit(out VkBindBufferMemoryDeviceGroupInfo instance);
		instance.sType = VkStructureType.BindBufferMemoryDeviceGroupInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemoryDeviceGroupInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;
	public uint splitInstanceBindRegionCount;
	public unsafe VkRect2D* pSplitInstanceBindRegions;

	public static VkBindImageMemoryDeviceGroupInfo New()
	{
		Unsafe.SkipInit(out VkBindImageMemoryDeviceGroupInfo instance);
		instance.sType = VkStructureType.BindImageMemoryDeviceGroupInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGroupProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint physicalDeviceCount;
	public physicalDevices__FixedBuffer physicalDevices;

	public unsafe struct physicalDevices__FixedBuffer
	{
		public VkPhysicalDevice e0;
		public VkPhysicalDevice e1;
		public VkPhysicalDevice e2;
		public VkPhysicalDevice e3;
		public VkPhysicalDevice e4;
		public VkPhysicalDevice e5;
		public VkPhysicalDevice e6;
		public VkPhysicalDevice e7;
		public VkPhysicalDevice e8;
		public VkPhysicalDevice e9;
		public VkPhysicalDevice e10;
		public VkPhysicalDevice e11;
		public VkPhysicalDevice e12;
		public VkPhysicalDevice e13;
		public VkPhysicalDevice e14;
		public VkPhysicalDevice e15;
		public VkPhysicalDevice e16;
		public VkPhysicalDevice e17;
		public VkPhysicalDevice e18;
		public VkPhysicalDevice e19;
		public VkPhysicalDevice e20;
		public VkPhysicalDevice e21;
		public VkPhysicalDevice e22;
		public VkPhysicalDevice e23;
		public VkPhysicalDevice e24;
		public VkPhysicalDevice e25;
		public VkPhysicalDevice e26;
		public VkPhysicalDevice e27;
		public VkPhysicalDevice e28;
		public VkPhysicalDevice e29;
		public VkPhysicalDevice e30;
		public VkPhysicalDevice e31;

		[UnscopedRef]
		public ref VkPhysicalDevice this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkPhysicalDevice> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 32);
		}
	}
	public VkBool32 subsetAllocation;

	public static VkPhysicalDeviceGroupProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceGroupProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceGroupProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupDeviceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint physicalDeviceCount;
	public unsafe VkPhysicalDevice* pPhysicalDevices;

	public static VkDeviceGroupDeviceCreateInfo New()
	{
		Unsafe.SkipInit(out VkDeviceGroupDeviceCreateInfo instance);
		instance.sType = VkStructureType.DeviceGroupDeviceCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;

	public static VkBufferMemoryRequirementsInfo2 New()
	{
		Unsafe.SkipInit(out VkBufferMemoryRequirementsInfo2 instance);
		instance.sType = VkStructureType.BufferMemoryRequirementsInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;

	public static VkImageMemoryRequirementsInfo2 New()
	{
		Unsafe.SkipInit(out VkImageMemoryRequirementsInfo2 instance);
		instance.sType = VkStructureType.ImageMemoryRequirementsInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSparseMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;

	public static VkImageSparseMemoryRequirementsInfo2 New()
	{
		Unsafe.SkipInit(out VkImageSparseMemoryRequirementsInfo2 instance);
		instance.sType = VkStructureType.ImageSparseMemoryRequirementsInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryRequirements2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryRequirements memoryRequirements;

	public static VkMemoryRequirements2 New()
	{
		Unsafe.SkipInit(out VkMemoryRequirements2 instance);
		instance.sType = VkStructureType.MemoryRequirements2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryRequirements2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSparseImageMemoryRequirements memoryRequirements;

	public static VkSparseImageMemoryRequirements2 New()
	{
		Unsafe.SkipInit(out VkSparseImageMemoryRequirements2 instance);
		instance.sType = VkStructureType.SparseImageMemoryRequirements2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFeatures2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceFeatures features;

	public static VkPhysicalDeviceFeatures2 New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFeatures2 instance);
		instance.sType = VkStructureType.PhysicalDeviceFeatures2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceProperties properties;

	public static VkPhysicalDeviceProperties2 New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceProperties2 instance);
		instance.sType = VkStructureType.PhysicalDeviceProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormatProperties formatProperties;

	public static VkFormatProperties2 New()
	{
		Unsafe.SkipInit(out VkFormatProperties2 instance);
		instance.sType = VkStructureType.FormatProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageFormatProperties imageFormatProperties;

	public static VkImageFormatProperties2 New()
	{
		Unsafe.SkipInit(out VkImageFormatProperties2 instance);
		instance.sType = VkStructureType.ImageFormatProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageFormatInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkImageCreateFlags flags;

	public static VkPhysicalDeviceImageFormatInfo2 New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageFormatInfo2 instance);
		instance.sType = VkStructureType.PhysicalDeviceImageFormatInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueueFamilyProperties queueFamilyProperties;

	public static VkQueueFamilyProperties2 New()
	{
		Unsafe.SkipInit(out VkQueueFamilyProperties2 instance);
		instance.sType = VkStructureType.QueueFamilyProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceMemoryProperties memoryProperties;

	public static VkPhysicalDeviceMemoryProperties2 New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMemoryProperties2 instance);
		instance.sType = VkStructureType.PhysicalDeviceMemoryProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSparseImageFormatProperties properties;

	public static VkSparseImageFormatProperties2 New()
	{
		Unsafe.SkipInit(out VkSparseImageFormatProperties2 instance);
		instance.sType = VkStructureType.SparseImageFormatProperties2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSparseImageFormatInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkSampleCountFlags samples;
	public VkImageUsageFlags usage;
	public VkImageTiling tiling;

	public static VkPhysicalDeviceSparseImageFormatInfo2 New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSparseImageFormatInfo2 instance);
		instance.sType = VkStructureType.PhysicalDeviceSparseImageFormatInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePointClippingProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPointClippingBehavior pointClippingBehavior;

	public static VkPhysicalDevicePointClippingProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePointClippingProperties instance);
		instance.sType = VkStructureType.PhysicalDevicePointClippingProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInputAttachmentAspectReference
{
	public uint subpass;
	public uint inputAttachmentIndex;
	public VkImageAspectFlags aspectMask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassInputAttachmentAspectCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint aspectReferenceCount;
	public unsafe VkInputAttachmentAspectReference* pAspectReferences;

	public static VkRenderPassInputAttachmentAspectCreateInfo New()
	{
		Unsafe.SkipInit(out VkRenderPassInputAttachmentAspectCreateInfo instance);
		instance.sType = VkStructureType.RenderPassInputAttachmentAspectCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewUsageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags usage;

	public static VkImageViewUsageCreateInfo New()
	{
		Unsafe.SkipInit(out VkImageViewUsageCreateInfo instance);
		instance.sType = VkStructureType.ImageViewUsageCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineTessellationDomainOriginStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkTessellationDomainOrigin domainOrigin;

	public static VkPipelineTessellationDomainOriginStateCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineTessellationDomainOriginStateCreateInfo instance);
		instance.sType = VkStructureType.PipelineTessellationDomainOriginStateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassMultiviewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint subpassCount;
	public unsafe uint* pViewMasks;
	public uint dependencyCount;
	public unsafe int* pViewOffsets;
	public uint correlationMaskCount;
	public unsafe uint* pCorrelationMasks;

	public static VkRenderPassMultiviewCreateInfo New()
	{
		Unsafe.SkipInit(out VkRenderPassMultiviewCreateInfo instance);
		instance.sType = VkStructureType.RenderPassMultiviewCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;

	public static VkPhysicalDeviceMultiviewFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiviewFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiviewFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;

	public static VkPhysicalDeviceMultiviewProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiviewProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiviewProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVariablePointersFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;

	public static VkPhysicalDeviceVariablePointersFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVariablePointersFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceVariablePointersFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProtectedMemoryFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedMemory;

	public static VkPhysicalDeviceProtectedMemoryFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceProtectedMemoryFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceProtectedMemoryFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProtectedMemoryProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedNoFault;

	public static VkPhysicalDeviceProtectedMemoryProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceProtectedMemoryProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceProtectedMemoryProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueIndex;

	public static VkDeviceQueueInfo2 New()
	{
		Unsafe.SkipInit(out VkDeviceQueueInfo2 instance);
		instance.sType = VkStructureType.DeviceQueueInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkProtectedSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedSubmit;

	public static VkProtectedSubmitInfo New()
	{
		Unsafe.SkipInit(out VkProtectedSubmitInfo instance);
		instance.sType = VkStructureType.ProtectedSubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkSamplerYcbcrModelConversion ycbcrModel;
	public VkSamplerYcbcrRange ycbcrRange;
	public VkComponentMapping components;
	public VkChromaLocation xChromaOffset;
	public VkChromaLocation yChromaOffset;
	public VkFilter chromaFilter;
	public VkBool32 forceExplicitReconstruction;

	public static VkSamplerYcbcrConversionCreateInfo New()
	{
		Unsafe.SkipInit(out VkSamplerYcbcrConversionCreateInfo instance);
		instance.sType = VkStructureType.SamplerYcbcrConversionCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerYcbcrConversion conversion;

	public static VkSamplerYcbcrConversionInfo New()
	{
		Unsafe.SkipInit(out VkSamplerYcbcrConversionInfo instance);
		instance.sType = VkStructureType.SamplerYcbcrConversionInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImagePlaneMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageAspectFlags planeAspect;

	public static VkBindImagePlaneMemoryInfo New()
	{
		Unsafe.SkipInit(out VkBindImagePlaneMemoryInfo instance);
		instance.sType = VkStructureType.BindImagePlaneMemoryInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImagePlaneMemoryRequirementsInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageAspectFlags planeAspect;

	public static VkImagePlaneMemoryRequirementsInfo New()
	{
		Unsafe.SkipInit(out VkImagePlaneMemoryRequirementsInfo instance);
		instance.sType = VkStructureType.ImagePlaneMemoryRequirementsInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 samplerYcbcrConversion;

	public static VkPhysicalDeviceSamplerYcbcrConversionFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSamplerYcbcrConversionFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionImageFormatProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint combinedImageSamplerDescriptorCount;

	public static VkSamplerYcbcrConversionImageFormatProperties New()
	{
		Unsafe.SkipInit(out VkSamplerYcbcrConversionImageFormatProperties instance);
		instance.sType = VkStructureType.SamplerYcbcrConversionImageFormatProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorUpdateTemplateEntry
{
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public nuint offset;
	public nuint stride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorUpdateTemplateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorUpdateTemplateCreateFlags flags;
	public uint descriptorUpdateEntryCount;
	public unsafe VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
	public VkDescriptorUpdateTemplateType templateType;
	public VkDescriptorSetLayout descriptorSetLayout;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipelineLayout pipelineLayout;
	public uint set;

	public static VkDescriptorUpdateTemplateCreateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorUpdateTemplateCreateInfo instance);
		instance.sType = VkStructureType.DescriptorUpdateTemplateCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryProperties
{
	public VkExternalMemoryFeatureFlags externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalImageFormatInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;

	public static VkPhysicalDeviceExternalImageFormatInfo New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalImageFormatInfo instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalImageFormatInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalImageFormatProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;

	public static VkExternalImageFormatProperties New()
	{
		Unsafe.SkipInit(out VkExternalImageFormatProperties instance);
		instance.sType = VkStructureType.ExternalImageFormatProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalBufferInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferCreateFlags flags;
	public VkBufferUsageFlags usage;
	public VkExternalMemoryHandleTypeFlags handleType;

	public static VkPhysicalDeviceExternalBufferInfo New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalBufferInfo instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalBufferInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalBufferProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;

	public static VkExternalBufferProperties New()
	{
		Unsafe.SkipInit(out VkExternalBufferProperties instance);
		instance.sType = VkStructureType.ExternalBufferProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceIDProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte deviceUUID[16];
	public unsafe fixed byte driverUUID[16];
	public unsafe fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;

	public static VkPhysicalDeviceIDProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceIDProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceIDProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryImageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public static VkExternalMemoryImageCreateInfo New()
	{
		Unsafe.SkipInit(out VkExternalMemoryImageCreateInfo instance);
		instance.sType = VkStructureType.ExternalMemoryImageCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryBufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public static VkExternalMemoryBufferCreateInfo New()
	{
		Unsafe.SkipInit(out VkExternalMemoryBufferCreateInfo instance);
		instance.sType = VkStructureType.ExternalMemoryBufferCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMemoryAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;

	public static VkExportMemoryAllocateInfo New()
	{
		Unsafe.SkipInit(out VkExportMemoryAllocateInfo instance);
		instance.sType = VkStructureType.ExportMemoryAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalFenceInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags handleType;

	public static VkPhysicalDeviceExternalFenceInfo New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalFenceInfo instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalFenceInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalFenceProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
	public VkExternalFenceFeatureFlags externalFenceFeatures;

	public static VkExternalFenceProperties New()
	{
		Unsafe.SkipInit(out VkExternalFenceProperties instance);
		instance.sType = VkStructureType.ExternalFenceProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportFenceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags handleTypes;

	public static VkExportFenceCreateInfo New()
	{
		Unsafe.SkipInit(out VkExportFenceCreateInfo instance);
		instance.sType = VkStructureType.ExportFenceCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportSemaphoreCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleTypes;

	public static VkExportSemaphoreCreateInfo New()
	{
		Unsafe.SkipInit(out VkExportSemaphoreCreateInfo instance);
		instance.sType = VkStructureType.ExportSemaphoreCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalSemaphoreInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleType;

	public static VkPhysicalDeviceExternalSemaphoreInfo New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalSemaphoreInfo instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalSemaphoreInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalSemaphoreProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
	public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;

	public static VkExternalSemaphoreProperties New()
	{
		Unsafe.SkipInit(out VkExternalSemaphoreProperties instance);
		instance.sType = VkStructureType.ExternalSemaphoreProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance3Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;

	public static VkPhysicalDeviceMaintenance3Properties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMaintenance3Properties instance);
		instance.sType = VkStructureType.PhysicalDeviceMaintenance3Properties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutSupport
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supported;

	public static VkDescriptorSetLayoutSupport New()
	{
		Unsafe.SkipInit(out VkDescriptorSetLayoutSupport instance);
		instance.sType = VkStructureType.DescriptorSetLayoutSupport;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderDrawParametersFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderDrawParameters;

	public static VkPhysicalDeviceShaderDrawParametersFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderDrawParametersFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderDrawParametersFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan11Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;
	public VkBool32 protectedMemory;
	public VkBool32 samplerYcbcrConversion;
	public VkBool32 shaderDrawParameters;

	public static VkPhysicalDeviceVulkan11Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan11Features instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan11Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan11Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte deviceUUID[16];
	public unsafe fixed byte driverUUID[16];
	public unsafe fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;
	public uint subgroupSize;
	public VkShaderStageFlags subgroupSupportedStages;
	public VkSubgroupFeatureFlags subgroupSupportedOperations;
	public VkBool32 subgroupQuadOperationsInAllStages;
	public VkPointClippingBehavior pointClippingBehavior;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;
	public VkBool32 protectedNoFault;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;

	public static VkPhysicalDeviceVulkan11Properties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan11Properties instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan11Properties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan12Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 samplerMirrorClampToEdge;
	public VkBool32 drawIndirectCount;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;
	public VkBool32 descriptorIndexing;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;
	public VkBool32 samplerFilterMinmax;
	public VkBool32 scalarBlockLayout;
	public VkBool32 imagelessFramebuffer;
	public VkBool32 uniformBufferStandardLayout;
	public VkBool32 shaderSubgroupExtendedTypes;
	public VkBool32 separateDepthStencilLayouts;
	public VkBool32 hostQueryReset;
	public VkBool32 timelineSemaphore;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	public VkBool32 shaderOutputViewportIndex;
	public VkBool32 shaderOutputLayer;
	public VkBool32 subgroupBroadcastDynamicId;

	public static VkPhysicalDeviceVulkan12Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan12Features instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan12Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkConformanceVersion
{
	public byte major;
	public byte minor;
	public byte subminor;
	public byte patch;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan12Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDriverId driverID;
	public unsafe fixed sbyte driverName[256];
	public unsafe fixed sbyte driverInfo[256];
	public VkConformanceVersion conformanceVersion;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;
	public ulong maxTimelineSemaphoreValueDifference;
	public VkSampleCountFlags framebufferIntegerColorSampleCounts;

	public static VkPhysicalDeviceVulkan12Properties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan12Properties instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan12Properties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatListCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint viewFormatCount;
	public unsafe VkFormat* pViewFormats;

	public static VkImageFormatListCreateInfo New()
	{
		Unsafe.SkipInit(out VkImageFormatListCreateInfo instance);
		instance.sType = VkStructureType.ImageFormatListCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescription2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;

	public static VkAttachmentDescription2 New()
	{
		Unsafe.SkipInit(out VkAttachmentDescription2 instance);
		instance.sType = VkStructureType.AttachmentDescription2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReference2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachment;
	public VkImageLayout layout;
	public VkImageAspectFlags aspectMask;

	public static VkAttachmentReference2 New()
	{
		Unsafe.SkipInit(out VkAttachmentReference2 instance);
		instance.sType = VkStructureType.AttachmentReference2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescription2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint viewMask;
	public uint inputAttachmentCount;
	public unsafe VkAttachmentReference2* pInputAttachments;
	public uint colorAttachmentCount;
	public unsafe VkAttachmentReference2* pColorAttachments;
	public unsafe VkAttachmentReference2* pResolveAttachments;
	public unsafe VkAttachmentReference2* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public unsafe uint* pPreserveAttachments;

	public static VkSubpassDescription2 New()
	{
		Unsafe.SkipInit(out VkSubpassDescription2 instance);
		instance.sType = VkStructureType.SubpassDescription2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDependency2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
	public int viewOffset;

	public static VkSubpassDependency2 New()
	{
		Unsafe.SkipInit(out VkSubpassDependency2 instance);
		instance.sType = VkStructureType.SubpassDependency2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreateInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public unsafe VkAttachmentDescription2* pAttachments;
	public uint subpassCount;
	public unsafe VkSubpassDescription2* pSubpasses;
	public uint dependencyCount;
	public unsafe VkSubpassDependency2* pDependencies;
	public uint correlatedViewMaskCount;
	public unsafe uint* pCorrelatedViewMasks;

	public static VkRenderPassCreateInfo2 New()
	{
		Unsafe.SkipInit(out VkRenderPassCreateInfo2 instance);
		instance.sType = VkStructureType.RenderPassCreateInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubpassContents contents;

	public static VkSubpassBeginInfo New()
	{
		Unsafe.SkipInit(out VkSubpassBeginInfo instance);
		instance.sType = VkStructureType.SubpassBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassEndInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;

	public static VkSubpassEndInfo New()
	{
		Unsafe.SkipInit(out VkSubpassEndInfo instance);
		instance.sType = VkStructureType.SubpassEndInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice8BitStorageFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;

	public static VkPhysicalDevice8BitStorageFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDevice8BitStorageFeatures instance);
		instance.sType = VkStructureType.PhysicalDevice8BitStorageFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDriverProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDriverId driverID;
	public unsafe fixed sbyte driverName[256];
	public unsafe fixed sbyte driverInfo[256];
	public VkConformanceVersion conformanceVersion;

	public static VkPhysicalDeviceDriverProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDriverProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceDriverProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicInt64Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;

	public static VkPhysicalDeviceShaderAtomicInt64Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderAtomicInt64Features instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderAtomicInt64Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderFloat16Int8Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;

	public static VkPhysicalDeviceShaderFloat16Int8Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderFloat16Int8Features instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderFloat16Int8Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFloatControlsProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;

	public static VkPhysicalDeviceFloatControlsProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFloatControlsProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceFloatControlsProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint bindingCount;
	public unsafe VkDescriptorBindingFlags* pBindingFlags;

	public static VkDescriptorSetLayoutBindingFlagsCreateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorSetLayoutBindingFlagsCreateInfo instance);
		instance.sType = VkStructureType.DescriptorSetLayoutBindingFlagsCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorIndexingFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;

	public static VkPhysicalDeviceDescriptorIndexingFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorIndexingFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorIndexingFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorIndexingProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;

	public static VkPhysicalDeviceDescriptorIndexingProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorIndexingProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorIndexingProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint descriptorSetCount;
	public unsafe uint* pDescriptorCounts;

	public static VkDescriptorSetVariableDescriptorCountAllocateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorSetVariableDescriptorCountAllocateInfo instance);
		instance.sType = VkStructureType.DescriptorSetVariableDescriptorCountAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVariableDescriptorCount;

	public static VkDescriptorSetVariableDescriptorCountLayoutSupport New()
	{
		Unsafe.SkipInit(out VkDescriptorSetVariableDescriptorCountLayoutSupport instance);
		instance.sType = VkStructureType.DescriptorSetVariableDescriptorCountLayoutSupport;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescriptionDepthStencilResolve
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkResolveModeFlags depthResolveMode;
	public VkResolveModeFlags stencilResolveMode;
	public unsafe VkAttachmentReference2* pDepthStencilResolveAttachment;

	public static VkSubpassDescriptionDepthStencilResolve New()
	{
		Unsafe.SkipInit(out VkSubpassDescriptionDepthStencilResolve instance);
		instance.sType = VkStructureType.SubpassDescriptionDepthStencilResolve;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthStencilResolveProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;

	public static VkPhysicalDeviceDepthStencilResolveProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDepthStencilResolveProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceDepthStencilResolveProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 scalarBlockLayout;

	public static VkPhysicalDeviceScalarBlockLayoutFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceScalarBlockLayoutFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceScalarBlockLayoutFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageStencilUsageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags stencilUsage;

	public static VkImageStencilUsageCreateInfo New()
	{
		Unsafe.SkipInit(out VkImageStencilUsageCreateInfo instance);
		instance.sType = VkStructureType.ImageStencilUsageCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerReductionModeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerReductionMode reductionMode;

	public static VkSamplerReductionModeCreateInfo New()
	{
		Unsafe.SkipInit(out VkSamplerReductionModeCreateInfo instance);
		instance.sType = VkStructureType.SamplerReductionModeCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;

	public static VkPhysicalDeviceSamplerFilterMinmaxProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSamplerFilterMinmaxProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceSamplerFilterMinmaxProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;

	public static VkPhysicalDeviceVulkanMemoryModelFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkanMemoryModelFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkanMemoryModelFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImagelessFramebufferFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imagelessFramebuffer;

	public static VkPhysicalDeviceImagelessFramebufferFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImagelessFramebufferFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceImagelessFramebufferFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferAttachmentImageInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCreateFlags flags;
	public VkImageUsageFlags usage;
	public uint width;
	public uint height;
	public uint layerCount;
	public uint viewFormatCount;
	public unsafe VkFormat* pViewFormats;

	public static VkFramebufferAttachmentImageInfo New()
	{
		Unsafe.SkipInit(out VkFramebufferAttachmentImageInfo instance);
		instance.sType = VkStructureType.FramebufferAttachmentImageInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferAttachmentsCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentImageInfoCount;
	public unsafe VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;

	public static VkFramebufferAttachmentsCreateInfo New()
	{
		Unsafe.SkipInit(out VkFramebufferAttachmentsCreateInfo instance);
		instance.sType = VkStructureType.FramebufferAttachmentsCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassAttachmentBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentCount;
	public unsafe VkImageView* pAttachments;

	public static VkRenderPassAttachmentBeginInfo New()
	{
		Unsafe.SkipInit(out VkRenderPassAttachmentBeginInfo instance);
		instance.sType = VkStructureType.RenderPassAttachmentBeginInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 uniformBufferStandardLayout;

	public static VkPhysicalDeviceUniformBufferStandardLayoutFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceUniformBufferStandardLayoutFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceUniformBufferStandardLayoutFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupExtendedTypes;

	public static VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 separateDepthStencilLayouts;

	public static VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReferenceStencilLayout
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageLayout stencilLayout;

	public static VkAttachmentReferenceStencilLayout New()
	{
		Unsafe.SkipInit(out VkAttachmentReferenceStencilLayout instance);
		instance.sType = VkStructureType.AttachmentReferenceStencilLayout;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescriptionStencilLayout
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageLayout stencilInitialLayout;
	public VkImageLayout stencilFinalLayout;

	public static VkAttachmentDescriptionStencilLayout New()
	{
		Unsafe.SkipInit(out VkAttachmentDescriptionStencilLayout instance);
		instance.sType = VkStructureType.AttachmentDescriptionStencilLayout;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceHostQueryResetFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 hostQueryReset;

	public static VkPhysicalDeviceHostQueryResetFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceHostQueryResetFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceHostQueryResetFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 timelineSemaphore;

	public static VkPhysicalDeviceTimelineSemaphoreFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTimelineSemaphoreFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceTimelineSemaphoreFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTimelineSemaphoreProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxTimelineSemaphoreValueDifference;

	public static VkPhysicalDeviceTimelineSemaphoreProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTimelineSemaphoreProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceTimelineSemaphoreProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreTypeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreType semaphoreType;
	public ulong initialValue;

	public static VkSemaphoreTypeCreateInfo New()
	{
		Unsafe.SkipInit(out VkSemaphoreTypeCreateInfo instance);
		instance.sType = VkStructureType.SemaphoreTypeCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTimelineSemaphoreSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreValueCount;
	public unsafe ulong* pWaitSemaphoreValues;
	public uint signalSemaphoreValueCount;
	public unsafe ulong* pSignalSemaphoreValues;

	public static VkTimelineSemaphoreSubmitInfo New()
	{
		Unsafe.SkipInit(out VkTimelineSemaphoreSubmitInfo instance);
		instance.sType = VkStructureType.TimelineSemaphoreSubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreWaitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreWaitFlags flags;
	public uint semaphoreCount;
	public unsafe VkSemaphore* pSemaphores;
	public unsafe ulong* pValues;

	public static VkSemaphoreWaitInfo New()
	{
		Unsafe.SkipInit(out VkSemaphoreWaitInfo instance);
		instance.sType = VkStructureType.SemaphoreWaitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreSignalInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public ulong value;

	public static VkSemaphoreSignalInfo New()
	{
		Unsafe.SkipInit(out VkSemaphoreSignalInfo instance);
		instance.sType = VkStructureType.SemaphoreSignalInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;

	public static VkPhysicalDeviceBufferDeviceAddressFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceBufferDeviceAddressFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferDeviceAddressInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;

	public static VkBufferDeviceAddressInfo New()
	{
		Unsafe.SkipInit(out VkBufferDeviceAddressInfo instance);
		instance.sType = VkStructureType.BufferDeviceAddressInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferOpaqueCaptureAddressCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong opaqueCaptureAddress;

	public static VkBufferOpaqueCaptureAddressCreateInfo New()
	{
		Unsafe.SkipInit(out VkBufferOpaqueCaptureAddressCreateInfo instance);
		instance.sType = VkStructureType.BufferOpaqueCaptureAddressCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong opaqueCaptureAddress;

	public static VkMemoryOpaqueCaptureAddressAllocateInfo New()
	{
		Unsafe.SkipInit(out VkMemoryOpaqueCaptureAddressAllocateInfo instance);
		instance.sType = VkStructureType.MemoryOpaqueCaptureAddressAllocateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;

	public static VkDeviceMemoryOpaqueCaptureAddressInfo New()
	{
		Unsafe.SkipInit(out VkDeviceMemoryOpaqueCaptureAddressInfo instance);
		instance.sType = VkStructureType.DeviceMemoryOpaqueCaptureAddressInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan13Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustImageAccess;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	public VkBool32 pipelineCreationCacheControl;
	public VkBool32 privateData;
	public VkBool32 shaderDemoteToHelperInvocation;
	public VkBool32 shaderTerminateInvocation;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;
	public VkBool32 synchronization2;
	public VkBool32 textureCompressionASTC_HDR;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;
	public VkBool32 dynamicRendering;
	public VkBool32 shaderIntegerDotProduct;
	public VkBool32 maintenance4;

	public static VkPhysicalDeviceVulkan13Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan13Features instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan13Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan13Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	public uint maxInlineUniformTotalSize;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	public ulong maxBufferSize;

	public static VkPhysicalDeviceVulkan13Properties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVulkan13Properties instance);
		instance.sType = VkStructureType.PhysicalDeviceVulkan13Properties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCreationFeedback
{
	public VkPipelineCreationFeedbackFlags flags;
	public ulong duration;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCreationFeedbackCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkPipelineCreationFeedback* pPipelineCreationFeedback;
	public uint pipelineStageCreationFeedbackCount;
	public unsafe VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;

	public static VkPipelineCreationFeedbackCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineCreationFeedbackCreateInfo instance);
		instance.sType = VkStructureType.PipelineCreationFeedbackCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderTerminateInvocation;

	public static VkPhysicalDeviceShaderTerminateInvocationFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderTerminateInvocationFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderTerminateInvocationFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceToolProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed sbyte name[256];
	public unsafe fixed sbyte version[256];
	public VkToolPurposeFlags purposes;
	public unsafe fixed sbyte description[256];
	public unsafe fixed sbyte layer[256];

	public static VkPhysicalDeviceToolProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceToolProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceToolProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderDemoteToHelperInvocation;

	public static VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderDemoteToHelperInvocationFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrivateDataFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 privateData;

	public static VkPhysicalDevicePrivateDataFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePrivateDataFeatures instance);
		instance.sType = VkStructureType.PhysicalDevicePrivateDataFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDevicePrivateDataCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint privateDataSlotRequestCount;

	public static VkDevicePrivateDataCreateInfo New()
	{
		Unsafe.SkipInit(out VkDevicePrivateDataCreateInfo instance);
		instance.sType = VkStructureType.DevicePrivateDataCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPrivateDataSlotCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPrivateDataSlotCreateFlags flags;

	public static VkPrivateDataSlotCreateInfo New()
	{
		Unsafe.SkipInit(out VkPrivateDataSlotCreateInfo instance);
		instance.sType = VkStructureType.PrivateDataSlotCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineCreationCacheControl;

	public static VkPhysicalDevicePipelineCreationCacheControlFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineCreationCacheControlFeatures instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineCreationCacheControlFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;

	public static VkMemoryBarrier2 New()
	{
		Unsafe.SkipInit(out VkMemoryBarrier2 instance);
		instance.sType = VkStructureType.MemoryBarrier2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;

	public static VkBufferMemoryBarrier2 New()
	{
		Unsafe.SkipInit(out VkBufferMemoryBarrier2 instance);
		instance.sType = VkStructureType.BufferMemoryBarrier2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;

	public static VkImageMemoryBarrier2 New()
	{
		Unsafe.SkipInit(out VkImageMemoryBarrier2 instance);
		instance.sType = VkStructureType.ImageMemoryBarrier2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDependencyInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDependencyFlags dependencyFlags;
	public uint memoryBarrierCount;
	public unsafe VkMemoryBarrier2* pMemoryBarriers;
	public uint bufferMemoryBarrierCount;
	public unsafe VkBufferMemoryBarrier2* pBufferMemoryBarriers;
	public uint imageMemoryBarrierCount;
	public unsafe VkImageMemoryBarrier2* pImageMemoryBarriers;

	public static VkDependencyInfo New()
	{
		Unsafe.SkipInit(out VkDependencyInfo instance);
		instance.sType = VkStructureType.DependencyInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public ulong value;
	public VkPipelineStageFlags2 stageMask;
	public uint deviceIndex;

	public static VkSemaphoreSubmitInfo New()
	{
		Unsafe.SkipInit(out VkSemaphoreSubmitInfo instance);
		instance.sType = VkStructureType.SemaphoreSubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandBuffer commandBuffer;
	public uint deviceMask;

	public static VkCommandBufferSubmitInfo New()
	{
		Unsafe.SkipInit(out VkCommandBufferSubmitInfo instance);
		instance.sType = VkStructureType.CommandBufferSubmitInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubmitInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubmitFlags flags;
	public uint waitSemaphoreInfoCount;
	public unsafe VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
	public uint commandBufferInfoCount;
	public unsafe VkCommandBufferSubmitInfo* pCommandBufferInfos;
	public uint signalSemaphoreInfoCount;
	public unsafe VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;

	public static VkSubmitInfo2 New()
	{
		Unsafe.SkipInit(out VkSubmitInfo2 instance);
		instance.sType = VkStructureType.SubmitInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSynchronization2Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 synchronization2;

	public static VkPhysicalDeviceSynchronization2Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSynchronization2Features instance);
		instance.sType = VkStructureType.PhysicalDeviceSynchronization2Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;

	public static VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageRobustnessFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustImageAccess;

	public static VkPhysicalDeviceImageRobustnessFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageRobustnessFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceImageRobustnessFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;

	public static VkBufferCopy2 New()
	{
		Unsafe.SkipInit(out VkBufferCopy2 instance);
		instance.sType = VkStructureType.BufferCopy2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyBufferInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer srcBuffer;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public unsafe VkBufferCopy2* pRegions;

	public static VkCopyBufferInfo2 New()
	{
		Unsafe.SkipInit(out VkCopyBufferInfo2 instance);
		instance.sType = VkStructureType.CopyBufferInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;

	public static VkImageCopy2 New()
	{
		Unsafe.SkipInit(out VkImageCopy2 instance);
		instance.sType = VkStructureType.ImageCopy2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageCopy2* pRegions;

	public static VkCopyImageInfo2 New()
	{
		Unsafe.SkipInit(out VkCopyImageInfo2 instance);
		instance.sType = VkStructureType.CopyImageInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferImageCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;

	public static VkBufferImageCopy2 New()
	{
		Unsafe.SkipInit(out VkBufferImageCopy2 instance);
		instance.sType = VkStructureType.BufferImageCopy2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyBufferToImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer srcBuffer;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkBufferImageCopy2* pRegions;

	public static VkCopyBufferToImageInfo2 New()
	{
		Unsafe.SkipInit(out VkCopyBufferToImageInfo2 instance);
		instance.sType = VkStructureType.CopyBufferToImageInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyImageToBufferInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public unsafe VkBufferImageCopy2* pRegions;

	public static VkCopyImageToBufferInfo2 New()
	{
		Unsafe.SkipInit(out VkCopyImageToBufferInfo2 instance);
		instance.sType = VkStructureType.CopyImageToBufferInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageBlit2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public srcOffsets__FixedBuffer srcOffsets;

	public unsafe struct srcOffsets__FixedBuffer
	{
		public VkOffset3D e0;
		public VkOffset3D e1;

		[UnscopedRef]
		public ref VkOffset3D this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkOffset3D> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}
	public VkImageSubresourceLayers dstSubresource;
	public dstOffsets__FixedBuffer dstOffsets;

	public unsafe struct dstOffsets__FixedBuffer
	{
		public VkOffset3D e0;
		public VkOffset3D e1;

		[UnscopedRef]
		public ref VkOffset3D this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkOffset3D> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}

	public static VkImageBlit2 New()
	{
		Unsafe.SkipInit(out VkImageBlit2 instance);
		instance.sType = VkStructureType.ImageBlit2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBlitImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageBlit2* pRegions;
	public VkFilter filter;

	public static VkBlitImageInfo2 New()
	{
		Unsafe.SkipInit(out VkBlitImageInfo2 instance);
		instance.sType = VkStructureType.BlitImageInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageResolve2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;

	public static VkImageResolve2 New()
	{
		Unsafe.SkipInit(out VkImageResolve2 instance);
		instance.sType = VkStructureType.ImageResolve2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkResolveImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageResolve2* pRegions;

	public static VkResolveImageInfo2 New()
	{
		Unsafe.SkipInit(out VkResolveImageInfo2 instance);
		instance.sType = VkStructureType.ResolveImageInfo2;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;

	public static VkPhysicalDeviceSubgroupSizeControlFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubgroupSizeControlFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceSubgroupSizeControlFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupSizeControlProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;

	public static VkPhysicalDeviceSubgroupSizeControlProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubgroupSizeControlProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceSubgroupSizeControlProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint requiredSubgroupSize;

	public static VkPipelineShaderStageRequiredSubgroupSizeCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineShaderStageRequiredSubgroupSizeCreateInfo instance);
		instance.sType = VkStructureType.PipelineShaderStageRequiredSubgroupSizeCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInlineUniformBlockFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;

	public static VkPhysicalDeviceInlineUniformBlockFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceInlineUniformBlockFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceInlineUniformBlockFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInlineUniformBlockProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;

	public static VkPhysicalDeviceInlineUniformBlockProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceInlineUniformBlockProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceInlineUniformBlockProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetInlineUniformBlock
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint dataSize;
	public unsafe void* pData;

	public static VkWriteDescriptorSetInlineUniformBlock New()
	{
		Unsafe.SkipInit(out VkWriteDescriptorSetInlineUniformBlock instance);
		instance.sType = VkStructureType.WriteDescriptorSetInlineUniformBlock;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInlineUniformBlockBindings;

	public static VkDescriptorPoolInlineUniformBlockCreateInfo New()
	{
		Unsafe.SkipInit(out VkDescriptorPoolInlineUniformBlockCreateInfo instance);
		instance.sType = VkStructureType.DescriptorPoolInlineUniformBlockCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 textureCompressionASTC_HDR;

	public static VkPhysicalDeviceTextureCompressionASTCHDRFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTextureCompressionASTCHDRFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceTextureCompressionASTCHDRFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingAttachmentInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkResolveModeFlags resolveMode;
	public VkImageView resolveImageView;
	public VkImageLayout resolveImageLayout;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkClearValue clearValue;

	public static VkRenderingAttachmentInfo New()
	{
		Unsafe.SkipInit(out VkRenderingAttachmentInfo instance);
		instance.sType = VkStructureType.RenderingAttachmentInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderingFlags flags;
	public VkRect2D renderArea;
	public uint layerCount;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkRenderingAttachmentInfo* pColorAttachments;
	public unsafe VkRenderingAttachmentInfo* pDepthAttachment;
	public unsafe VkRenderingAttachmentInfo* pStencilAttachment;

	public static VkRenderingInfo New()
	{
		Unsafe.SkipInit(out VkRenderingInfo instance);
		instance.sType = VkStructureType.RenderingInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRenderingCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;

	public static VkPipelineRenderingCreateInfo New()
	{
		Unsafe.SkipInit(out VkPipelineRenderingCreateInfo instance);
		instance.sType = VkStructureType.PipelineRenderingCreateInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDynamicRenderingFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dynamicRendering;

	public static VkPhysicalDeviceDynamicRenderingFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDynamicRenderingFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceDynamicRenderingFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceRenderingInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderingFlags flags;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;
	public VkSampleCountFlags rasterizationSamples;

	public static VkCommandBufferInheritanceRenderingInfo New()
	{
		Unsafe.SkipInit(out VkCommandBufferInheritanceRenderingInfo instance);
		instance.sType = VkStructureType.CommandBufferInheritanceRenderingInfo;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderIntegerDotProduct;

	public static VkPhysicalDeviceShaderIntegerDotProductFeatures New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderIntegerDotProductFeatures instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductFeatures;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;

	public static VkPhysicalDeviceShaderIntegerDotProductProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderIntegerDotProductProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;

	public static VkPhysicalDeviceTexelBufferAlignmentProperties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTexelBufferAlignmentProperties instance);
		instance.sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentProperties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties3
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormatFeatureFlags2 linearTilingFeatures;
	public VkFormatFeatureFlags2 optimalTilingFeatures;
	public VkFormatFeatureFlags2 bufferFeatures;

	public static VkFormatProperties3 New()
	{
		Unsafe.SkipInit(out VkFormatProperties3 instance);
		instance.sType = VkStructureType.FormatProperties3;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance4Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 maintenance4;

	public static VkPhysicalDeviceMaintenance4Features New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMaintenance4Features instance);
		instance.sType = VkStructureType.PhysicalDeviceMaintenance4Features;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance4Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxBufferSize;

	public static VkPhysicalDeviceMaintenance4Properties New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMaintenance4Properties instance);
		instance.sType = VkStructureType.PhysicalDeviceMaintenance4Properties;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceBufferMemoryRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkBufferCreateInfo* pCreateInfo;

	public static VkDeviceBufferMemoryRequirements New()
	{
		Unsafe.SkipInit(out VkDeviceBufferMemoryRequirements instance);
		instance.sType = VkStructureType.DeviceBufferMemoryRequirements;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceImageMemoryRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkImageCreateInfo* pCreateInfo;
	public VkImageAspectFlags planeAspect;

	public static VkDeviceImageMemoryRequirements New()
	{
		Unsafe.SkipInit(out VkDeviceImageMemoryRequirements instance);
		instance.sType = VkStructureType.DeviceImageMemoryRequirements;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilitiesKHR
{
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceFormatKHR
{
	public VkFormat format;
	public VkColorSpaceKHR colorSpace;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainCreateFlagsKHR flags;
	public VkSurfaceKHR surface;
	public uint minImageCount;
	public VkFormat imageFormat;
	public VkColorSpaceKHR imageColorSpace;
	public VkExtent2D imageExtent;
	public uint imageArrayLayers;
	public VkImageUsageFlags imageUsage;
	public VkSharingMode imageSharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkSurfaceTransformFlagsKHR preTransform;
	public VkCompositeAlphaFlagsKHR compositeAlpha;
	public VkPresentModeKHR presentMode;
	public VkBool32 clipped;
	public VkSwapchainKHR oldSwapchain;

	public static VkSwapchainCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkSwapchainCreateInfoKHR instance);
		instance.sType = VkStructureType.SwapchainCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public uint swapchainCount;
	public unsafe VkSwapchainKHR* pSwapchains;
	public unsafe uint* pImageIndices;
	public unsafe VkResult* pResults;

	public static VkPresentInfoKHR New()
	{
		Unsafe.SkipInit(out VkPresentInfoKHR instance);
		instance.sType = VkStructureType.PresentInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;

	public static VkImageSwapchainCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkImageSwapchainCreateInfoKHR instance);
		instance.sType = VkStructureType.ImageSwapchainCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemorySwapchainInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public uint imageIndex;

	public static VkBindImageMemorySwapchainInfoKHR New()
	{
		Unsafe.SkipInit(out VkBindImageMemorySwapchainInfoKHR instance);
		instance.sType = VkStructureType.BindImageMemorySwapchainInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAcquireNextImageInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public ulong timeout;
	public VkSemaphore semaphore;
	public VkFence fence;
	public uint deviceMask;

	public static VkAcquireNextImageInfoKHR New()
	{
		Unsafe.SkipInit(out VkAcquireNextImageInfoKHR instance);
		instance.sType = VkStructureType.AcquireNextImageInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupPresentCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed uint presentMask[32];
	public VkDeviceGroupPresentModeFlagsKHR modes;

	public static VkDeviceGroupPresentCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkDeviceGroupPresentCapabilitiesKHR instance);
		instance.sType = VkStructureType.DeviceGroupPresentCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe uint* pDeviceMasks;
	public VkDeviceGroupPresentModeFlagsKHR mode;

	public static VkDeviceGroupPresentInfoKHR New()
	{
		Unsafe.SkipInit(out VkDeviceGroupPresentInfoKHR instance);
		instance.sType = VkStructureType.DeviceGroupPresentInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceGroupPresentModeFlagsKHR modes;

	public static VkDeviceGroupSwapchainCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkDeviceGroupSwapchainCreateInfoKHR instance);
		instance.sType = VkStructureType.DeviceGroupSwapchainCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeParametersKHR
{
	public VkExtent2D visibleRegion;
	public uint refreshRate;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModeCreateFlagsKHR flags;
	public VkDisplayModeParametersKHR parameters;

	public static VkDisplayModeCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkDisplayModeCreateInfoKHR instance);
		instance.sType = VkStructureType.DisplayModeCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModePropertiesKHR
{
	public VkDisplayModeKHR displayMode;
	public VkDisplayModeParametersKHR parameters;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneCapabilitiesKHR
{
	public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
	public VkOffset2D minSrcPosition;
	public VkOffset2D maxSrcPosition;
	public VkExtent2D minSrcExtent;
	public VkExtent2D maxSrcExtent;
	public VkOffset2D minDstPosition;
	public VkOffset2D maxDstPosition;
	public VkExtent2D minDstExtent;
	public VkExtent2D maxDstExtent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlanePropertiesKHR
{
	public VkDisplayKHR currentDisplay;
	public uint currentStackIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPropertiesKHR
{
	public VkDisplayKHR display;
	public unsafe sbyte* displayName;
	public VkExtent2D physicalDimensions;
	public VkExtent2D physicalResolution;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkBool32 planeReorderPossible;
	public VkBool32 persistentContent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplaySurfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplaySurfaceCreateFlagsKHR flags;
	public VkDisplayModeKHR displayMode;
	public uint planeIndex;
	public uint planeStackIndex;
	public VkSurfaceTransformFlagsKHR transform;
	public float globalAlpha;
	public VkDisplayPlaneAlphaFlagsKHR alphaMode;
	public VkExtent2D imageExtent;

	public static VkDisplaySurfaceCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkDisplaySurfaceCreateInfoKHR instance);
		instance.sType = VkStructureType.DisplaySurfaceCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRect2D srcRect;
	public VkRect2D dstRect;
	public VkBool32 persistent;

	public static VkDisplayPresentInfoKHR New()
	{
		Unsafe.SkipInit(out VkDisplayPresentInfoKHR instance);
		instance.sType = VkStructureType.DisplayPresentInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyQueryResultStatusPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 queryResultStatusSupport;

	public static VkQueueFamilyQueryResultStatusPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkQueueFamilyQueryResultStatusPropertiesKHR instance);
		instance.sType = VkStructureType.QueueFamilyQueryResultStatusPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyVideoPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperations;

	public static VkQueueFamilyVideoPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkQueueFamilyVideoPropertiesKHR instance);
		instance.sType = VkStructureType.QueueFamilyVideoPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoProfileInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperation;
	public VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
	public VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
	public VkVideoComponentBitDepthFlagsKHR chromaBitDepth;

	public static VkVideoProfileInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoProfileInfoKHR instance);
		instance.sType = VkStructureType.VideoProfileInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoProfileListInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint profileCount;
	public unsafe VkVideoProfileInfoKHR* pProfiles;

	public static VkVideoProfileListInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoProfileListInfoKHR instance);
		instance.sType = VkStructureType.VideoProfileListInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCapabilityFlagsKHR flags;
	public ulong minBitstreamBufferOffsetAlignment;
	public ulong minBitstreamBufferSizeAlignment;
	public VkExtent2D pictureAccessGranularity;
	public VkExtent2D minCodedExtent;
	public VkExtent2D maxCodedExtent;
	public uint maxDpbSlots;
	public uint maxActiveReferencePictures;
	public VkExtensionProperties stdHeaderVersion;

	public static VkVideoCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoCapabilitiesKHR instance);
		instance.sType = VkStructureType.VideoCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVideoFormatInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags imageUsage;

	public static VkPhysicalDeviceVideoFormatInfoKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVideoFormatInfoKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceVideoFormatInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoFormatPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkComponentMapping componentMapping;
	public VkImageCreateFlags imageCreateFlags;
	public VkImageType imageType;
	public VkImageTiling imageTiling;
	public VkImageUsageFlags imageUsageFlags;

	public static VkVideoFormatPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoFormatPropertiesKHR instance);
		instance.sType = VkStructureType.VideoFormatPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoPictureResourceInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOffset2D codedOffset;
	public VkExtent2D codedExtent;
	public uint baseArrayLayer;
	public VkImageView imageViewBinding;

	public static VkVideoPictureResourceInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoPictureResourceInfoKHR instance);
		instance.sType = VkStructureType.VideoPictureResourceInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoReferenceSlotInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public int slotIndex;
	public unsafe VkVideoPictureResourceInfoKHR* pPictureResource;

	public static VkVideoReferenceSlotInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoReferenceSlotInfoKHR instance);
		instance.sType = VkStructureType.VideoReferenceSlotInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionMemoryRequirementsKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryBindIndex;
	public VkMemoryRequirements memoryRequirements;

	public static VkVideoSessionMemoryRequirementsKHR New()
	{
		Unsafe.SkipInit(out VkVideoSessionMemoryRequirementsKHR instance);
		instance.sType = VkStructureType.VideoSessionMemoryRequirementsKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindVideoSessionMemoryInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryBindIndex;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public ulong memorySize;

	public static VkBindVideoSessionMemoryInfoKHR New()
	{
		Unsafe.SkipInit(out VkBindVideoSessionMemoryInfoKHR instance);
		instance.sType = VkStructureType.BindVideoSessionMemoryInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint queueFamilyIndex;
	public VkVideoSessionCreateFlagsKHR flags;
	public unsafe VkVideoProfileInfoKHR* pVideoProfile;
	public VkFormat pictureFormat;
	public VkExtent2D maxCodedExtent;
	public VkFormat referencePictureFormat;
	public uint maxDpbSlots;
	public uint maxActiveReferencePictures;
	public unsafe VkExtensionProperties* pStdHeaderVersion;

	public static VkVideoSessionCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoSessionCreateInfoKHR instance);
		instance.sType = VkStructureType.VideoSessionCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionParametersCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoSessionParametersCreateFlagsKHR flags;
	public VkVideoSessionParametersKHR videoSessionParametersTemplate;
	public VkVideoSessionKHR videoSession;

	public static VkVideoSessionParametersCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoSessionParametersCreateInfoKHR instance);
		instance.sType = VkStructureType.VideoSessionParametersCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionParametersUpdateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint updateSequenceCount;

	public static VkVideoSessionParametersUpdateInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoSessionParametersUpdateInfoKHR instance);
		instance.sType = VkStructureType.VideoSessionParametersUpdateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoBeginCodingInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoBeginCodingFlagsKHR flags;
	public VkVideoSessionKHR videoSession;
	public VkVideoSessionParametersKHR videoSessionParameters;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotInfoKHR* pReferenceSlots;

	public static VkVideoBeginCodingInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoBeginCodingInfoKHR instance);
		instance.sType = VkStructureType.VideoBeginCodingInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEndCodingInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEndCodingFlagsKHR flags;

	public static VkVideoEndCodingInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoEndCodingInfoKHR instance);
		instance.sType = VkStructureType.VideoEndCodingInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoCodingControlInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodingControlFlagsKHR flags;

	public static VkVideoCodingControlInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoCodingControlInfoKHR instance);
		instance.sType = VkStructureType.VideoCodingControlInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoDecodeCapabilityFlagsKHR flags;

	public static VkVideoDecodeCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeCapabilitiesKHR instance);
		instance.sType = VkStructureType.VideoDecodeCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeUsageInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoDecodeUsageFlagsKHR videoUsageHints;

	public static VkVideoDecodeUsageInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeUsageInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeUsageInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoDecodeFlagsKHR flags;
	public VkBuffer srcBuffer;
	public ulong srcBufferOffset;
	public ulong srcBufferRange;
	public VkVideoPictureResourceInfoKHR dstPictureResource;
	public unsafe VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotInfoKHR* pReferenceSlots;

	public static VkVideoDecodeInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint color_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint timing_info_present_flag;
	public uint fixed_frame_rate_flag;
	public uint bitstream_restriction_flag;
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264HrdParameters
{
	public byte cpb_cnt_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public byte reserved1;
	public unsafe fixed uint bit_rate_value_minus1[32];
	public unsafe fixed uint cpb_size_value_minus1[32];
	public unsafe fixed byte cbr_flag[32];
	public uint initial_cpb_removal_delay_length_minus1;
	public uint cpb_removal_delay_length_minus1;
	public uint dpb_output_delay_length_minus1;
	public uint time_offset_length;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SequenceParameterSetVui
{
	public StdVideoH264SpsVuiFlags flags;
	public StdVideoH264AspectRatioIdc aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte colour_primaries;
	public byte transfer_characteristics;
	public byte matrix_coefficients;
	public uint num_units_in_tick;
	public uint time_scale;
	public byte max_num_reorder_frames;
	public byte max_dec_frame_buffering;
	public byte chroma_sample_loc_type_top_field;
	public byte chroma_sample_loc_type_bottom_field;
	public uint reserved1;
	public unsafe StdVideoH264HrdParameters* pHrdParameters;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SpsFlags
{
	public uint constraint_set0_flag;
	public uint constraint_set1_flag;
	public uint constraint_set2_flag;
	public uint constraint_set3_flag;
	public uint constraint_set4_flag;
	public uint constraint_set5_flag;
	public uint direct_8x8_inference_flag;
	public uint mb_adaptive_frame_field_flag;
	public uint frame_mbs_only_flag;
	public uint delta_pic_order_always_zero_flag;
	public uint separate_colour_plane_flag;
	public uint gaps_in_frame_num_value_allowed_flag;
	public uint qpprime_y_zero_transform_bypass_flag;
	public uint frame_cropping_flag;
	public uint seq_scaling_matrix_present_flag;
	public uint vui_parameters_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264ScalingLists
{
	public ushort scaling_list_present_mask;
	public ushort use_default_scaling_matrix_mask;
	public unsafe fixed byte ScalingList4x4[6 * 16];
	public unsafe fixed byte ScalingList8x8[6 * 64];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SequenceParameterSet
{
	public StdVideoH264SpsFlags flags;
	public StdVideoH264ProfileIdc profile_idc;
	public StdVideoH264LevelIdc level_idc;
	public StdVideoH264ChromaFormatIdc chroma_format_idc;
	public byte seq_parameter_set_id;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_frame_num_minus4;
	public StdVideoH264PocType pic_order_cnt_type;
	public int offset_for_non_ref_pic;
	public int offset_for_top_to_bottom_field;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public byte num_ref_frames_in_pic_order_cnt_cycle;
	public byte max_num_ref_frames;
	public byte reserved1;
	public uint pic_width_in_mbs_minus1;
	public uint pic_height_in_map_units_minus1;
	public uint frame_crop_left_offset;
	public uint frame_crop_right_offset;
	public uint frame_crop_top_offset;
	public uint frame_crop_bottom_offset;
	public uint reserved2;
	public unsafe int* pOffsetForRefFrame;
	public unsafe StdVideoH264ScalingLists* pScalingLists;
	public unsafe StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264PpsFlags
{
	public uint transform_8x8_mode_flag;
	public uint redundant_pic_cnt_present_flag;
	public uint constrained_intra_pred_flag;
	public uint deblocking_filter_control_present_flag;
	public uint weighted_pred_flag;
	public uint bottom_field_pic_order_in_frame_present_flag;
	public uint entropy_coding_mode_flag;
	public uint pic_scaling_matrix_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264PictureParameterSet
{
	public StdVideoH264PpsFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public StdVideoH264WeightedBipredIdc weighted_bipred_idc;
	public sbyte pic_init_qp_minus26;
	public sbyte pic_init_qs_minus26;
	public sbyte chroma_qp_index_offset;
	public sbyte second_chroma_qp_index_offset;
	public unsafe StdVideoH264ScalingLists* pScalingLists;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264PictureInfoFlags
{
	public uint field_pic_flag;
	public uint is_intra;
	public uint IdrPicFlag;
	public uint bottom_field_flag;
	public uint is_reference;
	public uint complementary_field_pair;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264PictureInfo
{
	public StdVideoDecodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public byte reserved1;
	public byte reserved2;
	public ushort frame_num;
	public ushort idr_pic_id;
	public unsafe fixed int PicOrderCnt[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264ReferenceInfoFlags
{
	public uint top_field_flag;
	public uint bottom_field_flag;
	public uint used_for_long_term_reference;
	public uint is_non_existing;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264ReferenceInfo
{
	public StdVideoDecodeH264ReferenceInfoFlags flags;
	public ushort FrameNum;
	public ushort reserved;
	public unsafe fixed int PicOrderCnt[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264ProfileInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;
	public VkVideoDecodeH264PictureLayoutFlagsKHR pictureLayout;

	public static VkVideoDecodeH264ProfileInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264ProfileInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264ProfileInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264CapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264LevelIdc maxLevelIdc;
	public VkOffset2D fieldOffsetGranularity;

	public static VkVideoDecodeH264CapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264CapabilitiesKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264CapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264SessionParametersAddInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stdSPSCount;
	public unsafe StdVideoH264SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public unsafe StdVideoH264PictureParameterSet* pStdPPSs;

	public static VkVideoDecodeH264SessionParametersAddInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264SessionParametersAddInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264SessionParametersAddInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264SessionParametersCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public unsafe VkVideoDecodeH264SessionParametersAddInfoKHR* pParametersAddInfo;

	public static VkVideoDecodeH264SessionParametersCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264SessionParametersCreateInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264SessionParametersCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264PictureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH264PictureInfo* pStdPictureInfo;
	public uint sliceCount;
	public unsafe uint* pSliceOffsets;

	public static VkVideoDecodeH264PictureInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264PictureInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264PictureInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264DpbSlotInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;

	public static VkVideoDecodeH264DpbSlotInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH264DpbSlotInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH264DpbSlotInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkExtent2D shadingRateAttachmentTexelSize;

	public static VkRenderingFragmentShadingRateAttachmentInfoKHR New()
	{
		Unsafe.SkipInit(out VkRenderingFragmentShadingRateAttachmentInfoKHR instance);
		instance.sType = VkStructureType.RenderingFragmentShadingRateAttachmentInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;

	public static VkRenderingFragmentDensityMapAttachmentInfoEXT New()
	{
		Unsafe.SkipInit(out VkRenderingFragmentDensityMapAttachmentInfoEXT instance);
		instance.sType = VkStructureType.RenderingFragmentDensityMapAttachmentInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentSampleCountInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint colorAttachmentCount;
	public unsafe VkSampleCountFlags* pColorAttachmentSamples;
	public VkSampleCountFlags depthStencilAttachmentSamples;

	public static VkAttachmentSampleCountInfoAMD New()
	{
		Unsafe.SkipInit(out VkAttachmentSampleCountInfoAMD instance);
		instance.sType = VkStructureType.AttachmentSampleCountInfoAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiviewPerViewAttributesInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 perViewAttributes;
	public VkBool32 perViewAttributesPositionXOnly;

	public static VkMultiviewPerViewAttributesInfoNVX New()
	{
		Unsafe.SkipInit(out VkMultiviewPerViewAttributesInfoNVX instance);
		instance.sType = VkStructureType.MultiviewPerViewAttributesInfoNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMemoryFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public int fd;

	public static VkImportMemoryFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkImportMemoryFdInfoKHR instance);
		instance.sType = VkStructureType.ImportMemoryFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryFdPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryTypeBits;

	public static VkMemoryFdPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkMemoryFdPropertiesKHR instance);
		instance.sType = VkStructureType.MemoryFdPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public static VkMemoryGetFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkMemoryGetFdInfoKHR instance);
		instance.sType = VkStructureType.MemoryGetFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportSemaphoreFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public VkSemaphoreImportFlags flags;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public int fd;

	public static VkImportSemaphoreFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkImportSemaphoreFdInfoKHR instance);
		instance.sType = VkStructureType.ImportSemaphoreFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public VkExternalSemaphoreHandleTypeFlags handleType;

	public static VkSemaphoreGetFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkSemaphoreGetFdInfoKHR instance);
		instance.sType = VkStructureType.SemaphoreGetFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPushDescriptors;

	public static VkPhysicalDevicePushDescriptorPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePushDescriptorPropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePushDescriptorPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRectLayerKHR
{
	public VkOffset2D offset;
	public VkExtent2D extent;
	public uint layer;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentRegionKHR
{
	public uint rectangleCount;
	public unsafe VkRectLayerKHR* pRectangles;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentRegionsKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkPresentRegionKHR* pRegions;

	public static VkPresentRegionsKHR New()
	{
		Unsafe.SkipInit(out VkPresentRegionsKHR instance);
		instance.sType = VkStructureType.PresentRegionsKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSharedPresentSurfaceCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags sharedPresentSupportedUsageFlags;

	public static VkSharedPresentSurfaceCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkSharedPresentSurfaceCapabilitiesKHR instance);
		instance.sType = VkStructureType.SharedPresentSurfaceCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportFenceFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFence fence;
	public VkFenceImportFlags flags;
	public VkExternalFenceHandleTypeFlags handleType;
	public int fd;

	public static VkImportFenceFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkImportFenceFdInfoKHR instance);
		instance.sType = VkStructureType.ImportFenceFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFenceGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFence fence;
	public VkExternalFenceHandleTypeFlags handleType;

	public static VkFenceGetFdInfoKHR New()
	{
		Unsafe.SkipInit(out VkFenceGetFdInfoKHR instance);
		instance.sType = VkStructureType.FenceGetFdInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 performanceCounterQueryPools;
	public VkBool32 performanceCounterMultipleQueryPools;

	public static VkPhysicalDevicePerformanceQueryFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePerformanceQueryFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePerformanceQueryFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 allowCommandBufferQueryCopies;

	public static VkPhysicalDevicePerformanceQueryPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePerformanceQueryPropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePerformanceQueryPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceCounterKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceCounterUnitKHR unit;
	public VkPerformanceCounterScopeKHR scope;
	public VkPerformanceCounterStorageKHR storage;
	public unsafe fixed byte uuid[16];

	public static VkPerformanceCounterKHR New()
	{
		Unsafe.SkipInit(out VkPerformanceCounterKHR instance);
		instance.sType = VkStructureType.PerformanceCounterKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceCounterDescriptionKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceCounterDescriptionFlagsKHR flags;
	public unsafe fixed sbyte name[256];
	public unsafe fixed sbyte category[256];
	public unsafe fixed sbyte description[256];

	public static VkPerformanceCounterDescriptionKHR New()
	{
		Unsafe.SkipInit(out VkPerformanceCounterDescriptionKHR instance);
		instance.sType = VkStructureType.PerformanceCounterDescriptionKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolPerformanceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint queueFamilyIndex;
	public uint counterIndexCount;
	public unsafe uint* pCounterIndices;

	public static VkQueryPoolPerformanceCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkQueryPoolPerformanceCreateInfoKHR instance);
		instance.sType = VkStructureType.QueryPoolPerformanceCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPerformanceCounterResultKHR
{
	[FieldOffset(0)]
	public int int32;
	[FieldOffset(0)]
	public long int64;
	[FieldOffset(0)]
	public uint uint32;
	[FieldOffset(0)]
	public ulong uint64;
	[FieldOffset(0)]
	public float float32;
	[FieldOffset(0)]
	public double float64;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAcquireProfilingLockInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAcquireProfilingLockFlagsKHR flags;
	public ulong timeout;

	public static VkAcquireProfilingLockInfoKHR New()
	{
		Unsafe.SkipInit(out VkAcquireProfilingLockInfoKHR instance);
		instance.sType = VkStructureType.AcquireProfilingLockInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceQuerySubmitInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint counterPassIndex;

	public static VkPerformanceQuerySubmitInfoKHR New()
	{
		Unsafe.SkipInit(out VkPerformanceQuerySubmitInfoKHR instance);
		instance.sType = VkStructureType.PerformanceQuerySubmitInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSurfaceInfo2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceKHR surface;

	public static VkPhysicalDeviceSurfaceInfo2KHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSurfaceInfo2KHR instance);
		instance.sType = VkStructureType.PhysicalDeviceSurfaceInfo2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilities2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceCapabilitiesKHR surfaceCapabilities;

	public static VkSurfaceCapabilities2KHR New()
	{
		Unsafe.SkipInit(out VkSurfaceCapabilities2KHR instance);
		instance.sType = VkStructureType.SurfaceCapabilities2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceFormat2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceFormatKHR surfaceFormat;

	public static VkSurfaceFormat2KHR New()
	{
		Unsafe.SkipInit(out VkSurfaceFormat2KHR instance);
		instance.sType = VkStructureType.SurfaceFormat2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPropertiesKHR displayProperties;

	public static VkDisplayProperties2KHR New()
	{
		Unsafe.SkipInit(out VkDisplayProperties2KHR instance);
		instance.sType = VkStructureType.DisplayProperties2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPlanePropertiesKHR displayPlaneProperties;

	public static VkDisplayPlaneProperties2KHR New()
	{
		Unsafe.SkipInit(out VkDisplayPlaneProperties2KHR instance);
		instance.sType = VkStructureType.DisplayPlaneProperties2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModePropertiesKHR displayModeProperties;

	public static VkDisplayModeProperties2KHR New()
	{
		Unsafe.SkipInit(out VkDisplayModeProperties2KHR instance);
		instance.sType = VkStructureType.DisplayModeProperties2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneInfo2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModeKHR mode;
	public uint planeIndex;

	public static VkDisplayPlaneInfo2KHR New()
	{
		Unsafe.SkipInit(out VkDisplayPlaneInfo2KHR instance);
		instance.sType = VkStructureType.DisplayPlaneInfo2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneCapabilities2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPlaneCapabilitiesKHR capabilities;

	public static VkDisplayPlaneCapabilities2KHR New()
	{
		Unsafe.SkipInit(out VkDisplayPlaneCapabilities2KHR instance);
		instance.sType = VkStructureType.DisplayPlaneCapabilities2KHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderClockFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupClock;
	public VkBool32 shaderDeviceClock;

	public static VkPhysicalDeviceShaderClockFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderClockFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderClockFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265DecPicBufMgr
{
	public unsafe fixed uint max_latency_increase_plus1[7];
	public unsafe fixed byte max_dec_pic_buffering_minus1[7];
	public unsafe fixed byte max_num_reorder_pics[7];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SubLayerHrdParameters
{
	public unsafe fixed uint bit_rate_value_minus1[32];
	public unsafe fixed uint cpb_size_value_minus1[32];
	public unsafe fixed uint cpb_size_du_value_minus1[32];
	public unsafe fixed uint bit_rate_du_value_minus1[32];
	public uint cbr_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265HrdFlags
{
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
	public uint sub_pic_hrd_params_present_flag;
	public uint sub_pic_cpb_params_in_pic_timing_sei_flag;
	public uint fixed_pic_rate_general_flag;
	public uint fixed_pic_rate_within_cvs_flag;
	public uint low_delay_hrd_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265HrdParameters
{
	public StdVideoH265HrdFlags flags;
	public byte tick_divisor_minus2;
	public byte du_cpb_removal_delay_increment_length_minus1;
	public byte dpb_output_delay_du_length_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public byte cpb_size_du_scale;
	public byte initial_cpb_removal_delay_length_minus1;
	public byte au_cpb_removal_delay_length_minus1;
	public byte dpb_output_delay_length_minus1;
	public unsafe fixed byte cpb_cnt_minus1[7];
	public unsafe fixed ushort elemental_duration_in_tc_minus1[7];
	public unsafe fixed ushort reserved[3];
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265VpsFlags
{
	public uint vps_temporal_id_nesting_flag;
	public uint vps_sub_layer_ordering_info_present_flag;
	public uint vps_timing_info_present_flag;
	public uint vps_poc_proportional_to_timing_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ProfileTierLevelFlags
{
	public uint general_tier_flag;
	public uint general_progressive_source_flag;
	public uint general_interlaced_source_flag;
	public uint general_non_packed_constraint_flag;
	public uint general_frame_only_constraint_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ProfileTierLevel
{
	public StdVideoH265ProfileTierLevelFlags flags;
	public StdVideoH265ProfileIdc general_profile_idc;
	public StdVideoH265LevelIdc general_level_idc;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265VideoParameterSet
{
	public StdVideoH265VpsFlags flags;
	public byte vps_video_parameter_set_id;
	public byte vps_max_sub_layers_minus1;
	public byte reserved1;
	public byte reserved2;
	public uint vps_num_units_in_tick;
	public uint vps_time_scale;
	public uint vps_num_ticks_poc_diff_one_minus1;
	public uint reserved3;
	public unsafe StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public unsafe StdVideoH265HrdParameters* pHrdParameters;
	public unsafe StdVideoH265ProfileTierLevel* pProfileTierLevel;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ScalingLists
{
	public unsafe fixed byte ScalingList4x4[6 * 16];
	public unsafe fixed byte ScalingList8x8[6 * 64];
	public unsafe fixed byte ScalingList16x16[6 * 64];
	public unsafe fixed byte ScalingList32x32[2 * 64];
	public unsafe fixed byte ScalingListDCCoef16x16[6];
	public unsafe fixed byte ScalingListDCCoef32x32[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint colour_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint neutral_chroma_indication_flag;
	public uint field_seq_flag;
	public uint frame_field_info_present_flag;
	public uint default_display_window_flag;
	public uint vui_timing_info_present_flag;
	public uint vui_poc_proportional_to_timing_flag;
	public uint vui_hrd_parameters_present_flag;
	public uint bitstream_restriction_flag;
	public uint tiles_fixed_structure_flag;
	public uint motion_vectors_over_pic_boundaries_flag;
	public uint restricted_ref_pic_lists_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SequenceParameterSetVui
{
	public StdVideoH265SpsVuiFlags flags;
	public StdVideoH265AspectRatioIdc aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte colour_primaries;
	public byte transfer_characteristics;
	public byte matrix_coeffs;
	public byte chroma_sample_loc_type_top_field;
	public byte chroma_sample_loc_type_bottom_field;
	public byte reserved1;
	public byte reserved2;
	public ushort def_disp_win_left_offset;
	public ushort def_disp_win_right_offset;
	public ushort def_disp_win_top_offset;
	public ushort def_disp_win_bottom_offset;
	public uint vui_num_units_in_tick;
	public uint vui_time_scale;
	public uint vui_num_ticks_poc_diff_one_minus1;
	public ushort min_spatial_segmentation_idc;
	public ushort reserved3;
	public byte max_bytes_per_pic_denom;
	public byte max_bits_per_min_cu_denom;
	public byte log2_max_mv_length_horizontal;
	public byte log2_max_mv_length_vertical;
	public unsafe StdVideoH265HrdParameters* pHrdParameters;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PredictorPaletteEntries
{
	public unsafe fixed ushort PredictorPaletteEntries[3 * 128];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SpsFlags
{
	public uint sps_temporal_id_nesting_flag;
	public uint separate_colour_plane_flag;
	public uint conformance_window_flag;
	public uint sps_sub_layer_ordering_info_present_flag;
	public uint scaling_list_enabled_flag;
	public uint sps_scaling_list_data_present_flag;
	public uint amp_enabled_flag;
	public uint sample_adaptive_offset_enabled_flag;
	public uint pcm_enabled_flag;
	public uint pcm_loop_filter_disabled_flag;
	public uint long_term_ref_pics_present_flag;
	public uint sps_temporal_mvp_enabled_flag;
	public uint strong_intra_smoothing_enabled_flag;
	public uint vui_parameters_present_flag;
	public uint sps_extension_present_flag;
	public uint sps_range_extension_flag;
	public uint transform_skip_rotation_enabled_flag;
	public uint transform_skip_context_enabled_flag;
	public uint implicit_rdpcm_enabled_flag;
	public uint explicit_rdpcm_enabled_flag;
	public uint extended_precision_processing_flag;
	public uint intra_smoothing_disabled_flag;
	public uint high_precision_offsets_enabled_flag;
	public uint persistent_rice_adaptation_enabled_flag;
	public uint cabac_bypass_alignment_enabled_flag;
	public uint sps_scc_extension_flag;
	public uint sps_curr_pic_ref_enabled_flag;
	public uint palette_mode_enabled_flag;
	public uint sps_palette_predictor_initializers_present_flag;
	public uint intra_boundary_filtering_disabled_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ShortTermRefPicSetFlags
{
	public uint inter_ref_pic_set_prediction_flag;
	public uint delta_rps_sign;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ShortTermRefPicSet
{
	public StdVideoH265ShortTermRefPicSetFlags flags;
	public uint delta_idx_minus1;
	public ushort use_delta_flag;
	public ushort abs_delta_rps_minus1;
	public ushort used_by_curr_pic_flag;
	public ushort used_by_curr_pic_s0_flag;
	public ushort used_by_curr_pic_s1_flag;
	public ushort reserved1;
	public byte reserved2;
	public byte reserved3;
	public byte num_negative_pics;
	public byte num_positive_pics;
	public unsafe fixed ushort delta_poc_s0_minus1[16];
	public unsafe fixed ushort delta_poc_s1_minus1[16];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265LongTermRefPicsSps
{
	public uint used_by_curr_pic_lt_sps_flag;
	public unsafe fixed uint lt_ref_pic_poc_lsb_sps[32];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SequenceParameterSet
{
	public StdVideoH265SpsFlags flags;
	public StdVideoH265ChromaFormatIdc chroma_format_idc;
	public uint pic_width_in_luma_samples;
	public uint pic_height_in_luma_samples;
	public byte sps_video_parameter_set_id;
	public byte sps_max_sub_layers_minus1;
	public byte sps_seq_parameter_set_id;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public byte log2_min_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_luma_coding_block_size;
	public byte log2_min_luma_transform_block_size_minus2;
	public byte log2_diff_max_min_luma_transform_block_size;
	public byte max_transform_hierarchy_depth_inter;
	public byte max_transform_hierarchy_depth_intra;
	public byte num_short_term_ref_pic_sets;
	public byte num_long_term_ref_pics_sps;
	public byte pcm_sample_bit_depth_luma_minus1;
	public byte pcm_sample_bit_depth_chroma_minus1;
	public byte log2_min_pcm_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_pcm_luma_coding_block_size;
	public byte reserved1;
	public byte reserved2;
	public byte palette_max_size;
	public byte delta_palette_max_predictor_size;
	public byte motion_vector_resolution_control_idc;
	public byte sps_num_palette_predictor_initializers_minus1;
	public uint conf_win_left_offset;
	public uint conf_win_right_offset;
	public uint conf_win_top_offset;
	public uint conf_win_bottom_offset;
	public unsafe StdVideoH265ProfileTierLevel* pProfileTierLevel;
	public unsafe StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public unsafe StdVideoH265ScalingLists* pScalingLists;
	public unsafe StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	public unsafe StdVideoH265LongTermRefPicsSps* pLongTermRefPicsSps;
	public unsafe StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
	public unsafe StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PpsFlags
{
	public uint dependent_slice_segments_enabled_flag;
	public uint output_flag_present_flag;
	public uint sign_data_hiding_enabled_flag;
	public uint cabac_init_present_flag;
	public uint constrained_intra_pred_flag;
	public uint transform_skip_enabled_flag;
	public uint cu_qp_delta_enabled_flag;
	public uint pps_slice_chroma_qp_offsets_present_flag;
	public uint weighted_pred_flag;
	public uint weighted_bipred_flag;
	public uint transquant_bypass_enabled_flag;
	public uint tiles_enabled_flag;
	public uint entropy_coding_sync_enabled_flag;
	public uint uniform_spacing_flag;
	public uint loop_filter_across_tiles_enabled_flag;
	public uint pps_loop_filter_across_slices_enabled_flag;
	public uint deblocking_filter_control_present_flag;
	public uint deblocking_filter_override_enabled_flag;
	public uint pps_deblocking_filter_disabled_flag;
	public uint pps_scaling_list_data_present_flag;
	public uint lists_modification_present_flag;
	public uint slice_segment_header_extension_present_flag;
	public uint pps_extension_present_flag;
	public uint cross_component_prediction_enabled_flag;
	public uint chroma_qp_offset_list_enabled_flag;
	public uint pps_curr_pic_ref_enabled_flag;
	public uint residual_adaptive_colour_transform_enabled_flag;
	public uint pps_slice_act_qp_offsets_present_flag;
	public uint pps_palette_predictor_initializers_present_flag;
	public uint monochrome_palette_flag;
	public uint pps_range_extension_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PictureParameterSet
{
	public StdVideoH265PpsFlags flags;
	public byte pps_pic_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte sps_video_parameter_set_id;
	public byte num_extra_slice_header_bits;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public sbyte init_qp_minus26;
	public byte diff_cu_qp_delta_depth;
	public sbyte pps_cb_qp_offset;
	public sbyte pps_cr_qp_offset;
	public sbyte pps_beta_offset_div2;
	public sbyte pps_tc_offset_div2;
	public byte log2_parallel_merge_level_minus2;
	public byte log2_max_transform_skip_block_size_minus2;
	public byte diff_cu_chroma_qp_offset_depth;
	public byte chroma_qp_offset_list_len_minus1;
	public unsafe fixed sbyte cb_qp_offset_list[6];
	public unsafe fixed sbyte cr_qp_offset_list[6];
	public byte log2_sao_offset_scale_luma;
	public byte log2_sao_offset_scale_chroma;
	public sbyte pps_act_y_qp_offset_plus5;
	public sbyte pps_act_cb_qp_offset_plus5;
	public sbyte pps_act_cr_qp_offset_plus3;
	public byte pps_num_palette_predictor_initializers;
	public byte luma_bit_depth_entry_minus8;
	public byte chroma_bit_depth_entry_minus8;
	public byte num_tile_columns_minus1;
	public byte num_tile_rows_minus1;
	public byte reserved1;
	public byte reserved2;
	public unsafe fixed ushort column_width_minus1[19];
	public unsafe fixed ushort row_height_minus1[21];
	public uint reserved3;
	public unsafe StdVideoH265ScalingLists* pScalingLists;
	public unsafe StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265PictureInfoFlags
{
	public uint IrapPicFlag;
	public uint IdrPicFlag;
	public uint IsReference;
	public uint short_term_ref_pic_set_sps_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265PictureInfo
{
	public StdVideoDecodeH265PictureInfoFlags flags;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public byte NumDeltaPocsOfRefRpsIdx;
	public int PicOrderCntVal;
	public ushort NumBitsForSTRefPicSetInSlice;
	public ushort reserved;
	public unsafe fixed byte RefPicSetStCurrBefore[8];
	public unsafe fixed byte RefPicSetStCurrAfter[8];
	public unsafe fixed byte RefPicSetLtCurr[8];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265ReferenceInfo
{
	public StdVideoDecodeH265ReferenceInfoFlags flags;
	public int PicOrderCntVal;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265ProfileInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;

	public static VkVideoDecodeH265ProfileInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265ProfileInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265ProfileInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265CapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265LevelIdc maxLevelIdc;

	public static VkVideoDecodeH265CapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265CapabilitiesKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265CapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265SessionParametersAddInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stdVPSCount;
	public unsafe StdVideoH265VideoParameterSet* pStdVPSs;
	public uint stdSPSCount;
	public unsafe StdVideoH265SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public unsafe StdVideoH265PictureParameterSet* pStdPPSs;

	public static VkVideoDecodeH265SessionParametersAddInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265SessionParametersAddInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265SessionParametersAddInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265SessionParametersCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxStdVPSCount;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public unsafe VkVideoDecodeH265SessionParametersAddInfoKHR* pParametersAddInfo;

	public static VkVideoDecodeH265SessionParametersCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265SessionParametersCreateInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265SessionParametersCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265PictureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH265PictureInfo* pStdPictureInfo;
	public uint sliceSegmentCount;
	public unsafe uint* pSliceSegmentOffsets;

	public static VkVideoDecodeH265PictureInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265PictureInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265PictureInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265DpbSlotInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;

	public static VkVideoDecodeH265DpbSlotInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoDecodeH265DpbSlotInfoKHR instance);
		instance.sType = VkStructureType.VideoDecodeH265DpbSlotInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueueGlobalPriorityKHR globalPriority;

	public static VkDeviceQueueGlobalPriorityCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkDeviceQueueGlobalPriorityCreateInfoKHR instance);
		instance.sType = VkStructureType.DeviceQueueGlobalPriorityCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 globalPriorityQuery;

	public static VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceGlobalPriorityQueryFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint priorityCount;
	public priorities__FixedBuffer priorities;

	public unsafe struct priorities__FixedBuffer
	{
		public VkQueueGlobalPriorityKHR e0;
		public VkQueueGlobalPriorityKHR e1;
		public VkQueueGlobalPriorityKHR e2;
		public VkQueueGlobalPriorityKHR e3;
		public VkQueueGlobalPriorityKHR e4;
		public VkQueueGlobalPriorityKHR e5;
		public VkQueueGlobalPriorityKHR e6;
		public VkQueueGlobalPriorityKHR e7;
		public VkQueueGlobalPriorityKHR e8;
		public VkQueueGlobalPriorityKHR e9;
		public VkQueueGlobalPriorityKHR e10;
		public VkQueueGlobalPriorityKHR e11;
		public VkQueueGlobalPriorityKHR e12;
		public VkQueueGlobalPriorityKHR e13;
		public VkQueueGlobalPriorityKHR e14;
		public VkQueueGlobalPriorityKHR e15;

		[UnscopedRef]
		public ref VkQueueGlobalPriorityKHR this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkQueueGlobalPriorityKHR> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 16);
		}
	}

	public static VkQueueFamilyGlobalPriorityPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkQueueFamilyGlobalPriorityPropertiesKHR instance);
		instance.sType = VkStructureType.QueueFamilyGlobalPriorityPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFragmentShadingRateAttachmentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkAttachmentReference2* pFragmentShadingRateAttachment;
	public VkExtent2D shadingRateAttachmentTexelSize;

	public static VkFragmentShadingRateAttachmentInfoKHR New()
	{
		Unsafe.SkipInit(out VkFragmentShadingRateAttachmentInfoKHR instance);
		instance.sType = VkStructureType.FragmentShadingRateAttachmentInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D fragmentSize;
	public combinerOps__FixedBuffer combinerOps;

	public unsafe struct combinerOps__FixedBuffer
	{
		public VkFragmentShadingRateCombinerOpKHR e0;
		public VkFragmentShadingRateCombinerOpKHR e1;

		[UnscopedRef]
		public ref VkFragmentShadingRateCombinerOpKHR this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkFragmentShadingRateCombinerOpKHR> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}

	public static VkPipelineFragmentShadingRateStateCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkPipelineFragmentShadingRateStateCreateInfoKHR instance);
		instance.sType = VkStructureType.PipelineFragmentShadingRateStateCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineFragmentShadingRate;
	public VkBool32 primitiveFragmentShadingRate;
	public VkBool32 attachmentFragmentShadingRate;

	public static VkPhysicalDeviceFragmentShadingRateFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShadingRateFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShadingRateFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
	public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
	public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
	public VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
	public VkBool32 layeredShadingRateAttachments;
	public VkBool32 fragmentShadingRateNonTrivialCombinerOps;
	public VkExtent2D maxFragmentSize;
	public uint maxFragmentSizeAspectRatio;
	public uint maxFragmentShadingRateCoverageSamples;
	public VkSampleCountFlags maxFragmentShadingRateRasterizationSamples;
	public VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
	public VkBool32 fragmentShadingRateWithSampleMask;
	public VkBool32 fragmentShadingRateWithShaderSampleMask;
	public VkBool32 fragmentShadingRateWithConservativeRasterization;
	public VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
	public VkBool32 fragmentShadingRateWithCustomSampleLocations;
	public VkBool32 fragmentShadingRateStrictMultiplyCombiner;

	public static VkPhysicalDeviceFragmentShadingRatePropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShadingRatePropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShadingRatePropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleCounts;
	public VkExtent2D fragmentSize;

	public static VkPhysicalDeviceFragmentShadingRateKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShadingRateKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShadingRateKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceProtectedCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supportsProtected;

	public static VkSurfaceProtectedCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkSurfaceProtectedCapabilitiesKHR instance);
		instance.sType = VkStructureType.SurfaceProtectedCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePresentWaitFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentWait;

	public static VkPhysicalDevicePresentWaitFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePresentWaitFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePresentWaitFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineExecutableInfo;

	public static VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipeline pipeline;

	public static VkPipelineInfoKHR New()
	{
		Unsafe.SkipInit(out VkPipelineInfoKHR instance);
		instance.sType = VkStructureType.PipelineInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutablePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderStageFlags stages;
	public unsafe fixed sbyte name[256];
	public unsafe fixed sbyte description[256];
	public uint subgroupSize;

	public static VkPipelineExecutablePropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPipelineExecutablePropertiesKHR instance);
		instance.sType = VkStructureType.PipelineExecutablePropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipeline pipeline;
	public uint executableIndex;

	public static VkPipelineExecutableInfoKHR New()
	{
		Unsafe.SkipInit(out VkPipelineExecutableInfoKHR instance);
		instance.sType = VkStructureType.PipelineExecutableInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPipelineExecutableStatisticValueKHR
{
	[FieldOffset(0)]
	public VkBool32 b32;
	[FieldOffset(0)]
	public long i64;
	[FieldOffset(0)]
	public ulong u64;
	[FieldOffset(0)]
	public double f64;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableStatisticKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed sbyte name[256];
	public unsafe fixed sbyte description[256];
	public VkPipelineExecutableStatisticFormatKHR format;
	public VkPipelineExecutableStatisticValueKHR value;

	public static VkPipelineExecutableStatisticKHR New()
	{
		Unsafe.SkipInit(out VkPipelineExecutableStatisticKHR instance);
		instance.sType = VkStructureType.PipelineExecutableStatisticKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableInternalRepresentationKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed sbyte name[256];
	public unsafe fixed sbyte description[256];
	public VkBool32 isText;
	public nuint dataSize;
	public unsafe void* pData;

	public static VkPipelineExecutableInternalRepresentationKHR New()
	{
		Unsafe.SkipInit(out VkPipelineExecutableInternalRepresentationKHR instance);
		instance.sType = VkStructureType.PipelineExecutableInternalRepresentationKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryMapInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryMapFlags flags;
	public VkDeviceMemory memory;
	public ulong offset;
	public ulong size;

	public static VkMemoryMapInfoKHR New()
	{
		Unsafe.SkipInit(out VkMemoryMapInfoKHR instance);
		instance.sType = VkStructureType.MemoryMapInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryUnmapInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryUnmapFlagsKHR flags;
	public VkDeviceMemory memory;

	public static VkMemoryUnmapInfoKHR New()
	{
		Unsafe.SkipInit(out VkMemoryUnmapInfoKHR instance);
		instance.sType = VkStructureType.MemoryUnmapInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineLibraryCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint libraryCount;
	public unsafe VkPipeline* pLibraries;

	public static VkPipelineLibraryCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkPipelineLibraryCreateInfoKHR instance);
		instance.sType = VkStructureType.PipelineLibraryCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentIdKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe ulong* pPresentIds;

	public static VkPresentIdKHR New()
	{
		Unsafe.SkipInit(out VkPresentIdKHR instance);
		instance.sType = VkStructureType.PresentIdKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePresentIdFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentId;

	public static VkPhysicalDevicePresentIdFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePresentIdFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePresentIdFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyCheckpointProperties2NV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 checkpointExecutionStageMask;

	public static VkQueueFamilyCheckpointProperties2NV New()
	{
		Unsafe.SkipInit(out VkQueueFamilyCheckpointProperties2NV instance);
		instance.sType = VkStructureType.QueueFamilyCheckpointProperties2NV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCheckpointData2NV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 stage;
	public unsafe void* pCheckpointMarker;

	public static VkCheckpointData2NV New()
	{
		Unsafe.SkipInit(out VkCheckpointData2NV instance);
		instance.sType = VkStructureType.CheckpointData2NV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShaderBarycentric;

	public static VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 triStripVertexOrderIndependentOfProvokingVertex;

	public static VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupUniformControlFlow;

	public static VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 workgroupMemoryExplicitLayout;
	public VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
	public VkBool32 workgroupMemoryExplicitLayout8BitAccess;
	public VkBool32 workgroupMemoryExplicitLayout16BitAccess;

	public static VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingMaintenance1;
	public VkBool32 rayTracingPipelineTraceRaysIndirect2;

	public static VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingMaintenance1FeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTraceRaysIndirectCommand2KHR
{
	public ulong raygenShaderRecordAddress;
	public ulong raygenShaderRecordSize;
	public ulong missShaderBindingTableAddress;
	public ulong missShaderBindingTableSize;
	public ulong missShaderBindingTableStride;
	public ulong hitShaderBindingTableAddress;
	public ulong hitShaderBindingTableSize;
	public ulong hitShaderBindingTableStride;
	public ulong callableShaderBindingTableAddress;
	public ulong callableShaderBindingTableSize;
	public ulong callableShaderBindingTableStride;
	public uint width;
	public uint height;
	public uint depth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugReportCallbackCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportFlagsEXT flags;
	public unsafe delegate* unmanaged<VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, sbyte*, sbyte*, void*, uint> pfnCallback;
	public unsafe void* pUserData;

	public static VkDebugReportCallbackCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugReportCallbackCreateInfoEXT instance);
		instance.sType = VkStructureType.DebugReportCallbackCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateRasterizationOrderAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRasterizationOrderAMD rasterizationOrder;

	public static VkPipelineRasterizationStateRasterizationOrderAMD New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationStateRasterizationOrderAMD instance);
		instance.sType = VkStructureType.PipelineRasterizationStateRasterizationOrderAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerObjectNameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public unsafe sbyte* pObjectName;

	public static VkDebugMarkerObjectNameInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugMarkerObjectNameInfoEXT instance);
		instance.sType = VkStructureType.DebugMarkerObjectNameInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerObjectTagInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public ulong tagName;
	public nuint tagSize;
	public unsafe void* pTag;

	public static VkDebugMarkerObjectTagInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugMarkerObjectTagInfoEXT instance);
		instance.sType = VkStructureType.DebugMarkerObjectTagInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerMarkerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe sbyte* pMarkerName;
	public unsafe fixed float color[4];

	public static VkDebugMarkerMarkerInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugMarkerMarkerInfoEXT instance);
		instance.sType = VkStructureType.DebugMarkerMarkerInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationImageCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocation;

	public static VkDedicatedAllocationImageCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkDedicatedAllocationImageCreateInfoNV instance);
		instance.sType = VkStructureType.DedicatedAllocationImageCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationBufferCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocation;

	public static VkDedicatedAllocationBufferCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkDedicatedAllocationBufferCreateInfoNV instance);
		instance.sType = VkStructureType.DedicatedAllocationBufferCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationMemoryAllocateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkBuffer buffer;

	public static VkDedicatedAllocationMemoryAllocateInfoNV New()
	{
		Unsafe.SkipInit(out VkDedicatedAllocationMemoryAllocateInfoNV instance);
		instance.sType = VkStructureType.DedicatedAllocationMemoryAllocateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 transformFeedback;
	public VkBool32 geometryStreams;

	public static VkPhysicalDeviceTransformFeedbackFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTransformFeedbackFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceTransformFeedbackFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxTransformFeedbackStreams;
	public uint maxTransformFeedbackBuffers;
	public ulong maxTransformFeedbackBufferSize;
	public uint maxTransformFeedbackStreamDataSize;
	public uint maxTransformFeedbackBufferDataSize;
	public uint maxTransformFeedbackBufferDataStride;
	public VkBool32 transformFeedbackQueries;
	public VkBool32 transformFeedbackStreamsLinesTriangles;
	public VkBool32 transformFeedbackRasterizationStreamSelect;
	public VkBool32 transformFeedbackDraw;

	public static VkPhysicalDeviceTransformFeedbackPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTransformFeedbackPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceTransformFeedbackPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
	public uint rasterizationStream;

	public static VkPipelineRasterizationStateStreamCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationStateStreamCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRasterizationStateStreamCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuModuleCreateInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public nuint dataSize;
	public unsafe void* pData;

	public static VkCuModuleCreateInfoNVX New()
	{
		Unsafe.SkipInit(out VkCuModuleCreateInfoNVX instance);
		instance.sType = VkStructureType.CuModuleCreateInfoNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuFunctionCreateInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCuModuleNVX module;
	public unsafe sbyte* pName;

	public static VkCuFunctionCreateInfoNVX New()
	{
		Unsafe.SkipInit(out VkCuFunctionCreateInfoNVX instance);
		instance.sType = VkStructureType.CuFunctionCreateInfoNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuLaunchInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCuFunctionNVX function;
	public uint gridDimX;
	public uint gridDimY;
	public uint gridDimZ;
	public uint blockDimX;
	public uint blockDimY;
	public uint blockDimZ;
	public uint sharedMemBytes;
	public nuint paramCount;
	public unsafe void** pParams;
	public nuint extraCount;
	public unsafe void** pExtras;

	public static VkCuLaunchInfoNVX New()
	{
		Unsafe.SkipInit(out VkCuLaunchInfoNVX instance);
		instance.sType = VkStructureType.CuLaunchInfoNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewHandleInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkDescriptorType descriptorType;
	public VkSampler sampler;

	public static VkImageViewHandleInfoNVX New()
	{
		Unsafe.SkipInit(out VkImageViewHandleInfoNVX instance);
		instance.sType = VkStructureType.ImageViewHandleInfoNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewAddressPropertiesNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong deviceAddress;
	public ulong size;

	public static VkImageViewAddressPropertiesNVX New()
	{
		Unsafe.SkipInit(out VkImageViewAddressPropertiesNVX instance);
		instance.sType = VkStructureType.ImageViewAddressPropertiesNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTextureLODGatherFormatPropertiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supportsTextureGatherLODBiasAMD;

	public static VkTextureLODGatherFormatPropertiesAMD New()
	{
		Unsafe.SkipInit(out VkTextureLODGatherFormatPropertiesAMD instance);
		instance.sType = VkStructureType.TextureLODGatherFormatPropertiesAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderResourceUsageAMD
{
	public uint numUsedVgprs;
	public uint numUsedSgprs;
	public uint ldsSizePerLocalWorkGroup;
	public nuint ldsUsageSizeInBytes;
	public nuint scratchMemUsageInBytes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderStatisticsInfoAMD
{
	public VkShaderStageFlags shaderStageMask;
	public VkShaderResourceUsageAMD resourceUsage;
	public uint numPhysicalVgprs;
	public uint numPhysicalSgprs;
	public uint numAvailableVgprs;
	public uint numAvailableSgprs;
	public unsafe fixed uint computeWorkGroupSize[3];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 cornerSampledImage;

	public static VkPhysicalDeviceCornerSampledImageFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCornerSampledImageFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCornerSampledImageFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalImageFormatPropertiesNV
{
	public VkImageFormatProperties imageFormatProperties;
	public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryImageCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;

	public static VkExternalMemoryImageCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkExternalMemoryImageCreateInfoNV instance);
		instance.sType = VkStructureType.ExternalMemoryImageCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMemoryAllocateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;

	public static VkExportMemoryAllocateInfoNV New()
	{
		Unsafe.SkipInit(out VkExportMemoryAllocateInfoNV instance);
		instance.sType = VkStructureType.ExportMemoryAllocateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationFlagsEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint disabledValidationCheckCount;
	public unsafe VkValidationCheckEXT* pDisabledValidationChecks;

	public static VkValidationFlagsEXT New()
	{
		Unsafe.SkipInit(out VkValidationFlagsEXT instance);
		instance.sType = VkStructureType.ValidationFlagsEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewASTCDecodeModeEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat decodeMode;

	public static VkImageViewASTCDecodeModeEXT New()
	{
		Unsafe.SkipInit(out VkImageViewASTCDecodeModeEXT instance);
		instance.sType = VkStructureType.ImageViewASTCDecodeModeEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 decodeModeSharedExponent;

	public static VkPhysicalDeviceASTCDecodeFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceASTCDecodeFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceASTCDecodeFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineRobustnessFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineRobustness;

	public static VkPhysicalDevicePipelineRobustnessFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineRobustnessFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineRobustnessFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineRobustnessPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessStorageBuffers;
	public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessUniformBuffers;
	public VkPipelineRobustnessBufferBehaviorEXT defaultRobustnessVertexInputs;
	public VkPipelineRobustnessImageBehaviorEXT defaultRobustnessImages;

	public static VkPhysicalDevicePipelineRobustnessPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineRobustnessPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineRobustnessPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRobustnessCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRobustnessBufferBehaviorEXT storageBuffers;
	public VkPipelineRobustnessBufferBehaviorEXT uniformBuffers;
	public VkPipelineRobustnessBufferBehaviorEXT vertexInputs;
	public VkPipelineRobustnessImageBehaviorEXT images;

	public static VkPipelineRobustnessCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRobustnessCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRobustnessCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkConditionalRenderingBeginInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public ulong offset;
	public VkConditionalRenderingFlagsEXT flags;

	public static VkConditionalRenderingBeginInfoEXT New()
	{
		Unsafe.SkipInit(out VkConditionalRenderingBeginInfoEXT instance);
		instance.sType = VkStructureType.ConditionalRenderingBeginInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 conditionalRendering;
	public VkBool32 inheritedConditionalRendering;

	public static VkPhysicalDeviceConditionalRenderingFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceConditionalRenderingFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceConditionalRenderingFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 conditionalRenderingEnable;

	public static VkCommandBufferInheritanceConditionalRenderingInfoEXT New()
	{
		Unsafe.SkipInit(out VkCommandBufferInheritanceConditionalRenderingInfoEXT instance);
		instance.sType = VkStructureType.CommandBufferInheritanceConditionalRenderingInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewportWScalingNV
{
	public float xcoeff;
	public float ycoeff;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportWScalingStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 viewportWScalingEnable;
	public uint viewportCount;
	public unsafe VkViewportWScalingNV* pViewportWScalings;

	public static VkPipelineViewportWScalingStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineViewportWScalingStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineViewportWScalingStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilities2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
	public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;

	public static VkSurfaceCapabilities2EXT New()
	{
		Unsafe.SkipInit(out VkSurfaceCapabilities2EXT instance);
		instance.sType = VkStructureType.SurfaceCapabilities2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPowerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPowerStateEXT powerState;

	public static VkDisplayPowerInfoEXT New()
	{
		Unsafe.SkipInit(out VkDisplayPowerInfoEXT instance);
		instance.sType = VkStructureType.DisplayPowerInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceEventTypeEXT deviceEvent;

	public static VkDeviceEventInfoEXT New()
	{
		Unsafe.SkipInit(out VkDeviceEventInfoEXT instance);
		instance.sType = VkStructureType.DeviceEventInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayEventTypeEXT displayEvent;

	public static VkDisplayEventInfoEXT New()
	{
		Unsafe.SkipInit(out VkDisplayEventInfoEXT instance);
		instance.sType = VkStructureType.DisplayEventInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainCounterCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceCounterFlagsEXT surfaceCounters;

	public static VkSwapchainCounterCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkSwapchainCounterCreateInfoEXT instance);
		instance.sType = VkStructureType.SwapchainCounterCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRefreshCycleDurationGOOGLE
{
	public ulong refreshDuration;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPastPresentationTimingGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
	public ulong actualPresentTime;
	public ulong earliestPresentTime;
	public ulong presentMargin;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentTimeGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentTimesInfoGOOGLE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkPresentTimeGOOGLE* pTimes;

	public static VkPresentTimesInfoGOOGLE New()
	{
		Unsafe.SkipInit(out VkPresentTimesInfoGOOGLE instance);
		instance.sType = VkStructureType.PresentTimesInfoGOOGLE;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 perViewPositionAllComponents;

	public static VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewportSwizzleNV
{
	public VkViewportCoordinateSwizzleNV x;
	public VkViewportCoordinateSwizzleNV y;
	public VkViewportCoordinateSwizzleNV z;
	public VkViewportCoordinateSwizzleNV w;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportSwizzleStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
	public uint viewportCount;
	public unsafe VkViewportSwizzleNV* pViewportSwizzles;

	public static VkPipelineViewportSwizzleStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineViewportSwizzleStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineViewportSwizzleStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxDiscardRectangles;

	public static VkPhysicalDeviceDiscardRectanglePropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDiscardRectanglePropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDiscardRectanglePropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
	public VkDiscardRectangleModeEXT discardRectangleMode;
	public uint discardRectangleCount;
	public unsafe VkRect2D* pDiscardRectangles;

	public static VkPipelineDiscardRectangleStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineDiscardRectangleStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineDiscardRectangleStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float primitiveOverestimationSize;
	public float maxExtraPrimitiveOverestimationSize;
	public float extraPrimitiveOverestimationSizeGranularity;
	public VkBool32 primitiveUnderestimation;
	public VkBool32 conservativePointAndLineRasterization;
	public VkBool32 degenerateTrianglesRasterized;
	public VkBool32 degenerateLinesRasterized;
	public VkBool32 fullyCoveredFragmentShaderInputVariable;
	public VkBool32 conservativeRasterizationPostDepthCoverage;

	public static VkPhysicalDeviceConservativeRasterizationPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceConservativeRasterizationPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceConservativeRasterizationPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
	public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
	public float extraPrimitiveOverestimationSize;

	public static VkPipelineRasterizationConservativeStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationConservativeStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRasterizationConservativeStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 depthClipEnable;

	public static VkPhysicalDeviceDepthClipEnableFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDepthClipEnableFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDepthClipEnableFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
	public VkBool32 depthClipEnable;

	public static VkPipelineRasterizationDepthClipStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationDepthClipStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRasterizationDepthClipStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkXYColorEXT
{
	public float x;
	public float y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkHdrMetadataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkXYColorEXT displayPrimaryRed;
	public VkXYColorEXT displayPrimaryGreen;
	public VkXYColorEXT displayPrimaryBlue;
	public VkXYColorEXT whitePoint;
	public float maxLuminance;
	public float minLuminance;
	public float maxContentLightLevel;
	public float maxFrameAverageLightLevel;

	public static VkHdrMetadataEXT New()
	{
		Unsafe.SkipInit(out VkHdrMetadataEXT instance);
		instance.sType = VkStructureType.HdrMetadataEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsLabelEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe sbyte* pLabelName;
	public unsafe fixed float color[4];

	public static VkDebugUtilsLabelEXT New()
	{
		Unsafe.SkipInit(out VkDebugUtilsLabelEXT instance);
		instance.sType = VkStructureType.DebugUtilsLabelEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsObjectNameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public unsafe sbyte* pObjectName;

	public static VkDebugUtilsObjectNameInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugUtilsObjectNameInfoEXT instance);
		instance.sType = VkStructureType.DebugUtilsObjectNameInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsMessengerCallbackDataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
	public unsafe sbyte* pMessageIdName;
	public int messageIdNumber;
	public unsafe sbyte* pMessage;
	public uint queueLabelCount;
	public unsafe VkDebugUtilsLabelEXT* pQueueLabels;
	public uint cmdBufLabelCount;
	public unsafe VkDebugUtilsLabelEXT* pCmdBufLabels;
	public uint objectCount;
	public unsafe VkDebugUtilsObjectNameInfoEXT* pObjects;

	public static VkDebugUtilsMessengerCallbackDataEXT New()
	{
		Unsafe.SkipInit(out VkDebugUtilsMessengerCallbackDataEXT instance);
		instance.sType = VkStructureType.DebugUtilsMessengerCallbackDataEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsMessengerCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugUtilsMessengerCreateFlagsEXT flags;
	public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
	public VkDebugUtilsMessageTypeFlagsEXT messageType;
	public unsafe delegate* unmanaged<VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, uint> pfnUserCallback;
	public unsafe void* pUserData;

	public static VkDebugUtilsMessengerCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugUtilsMessengerCreateInfoEXT instance);
		instance.sType = VkStructureType.DebugUtilsMessengerCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsObjectTagInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public ulong tagName;
	public nuint tagSize;
	public unsafe void* pTag;

	public static VkDebugUtilsObjectTagInfoEXT New()
	{
		Unsafe.SkipInit(out VkDebugUtilsObjectTagInfoEXT instance);
		instance.sType = VkStructureType.DebugUtilsObjectTagInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSampleLocationEXT
{
	public float x;
	public float y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSampleLocationsInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleLocationsPerPixel;
	public VkExtent2D sampleLocationGridSize;
	public uint sampleLocationsCount;
	public unsafe VkSampleLocationEXT* pSampleLocations;

	public static VkSampleLocationsInfoEXT New()
	{
		Unsafe.SkipInit(out VkSampleLocationsInfoEXT instance);
		instance.sType = VkStructureType.SampleLocationsInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentSampleLocationsEXT
{
	public uint attachmentIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassSampleLocationsEXT
{
	public uint subpassIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassSampleLocationsBeginInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentInitialSampleLocationsCount;
	public unsafe VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
	public uint postSubpassSampleLocationsCount;
	public unsafe VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;

	public static VkRenderPassSampleLocationsBeginInfoEXT New()
	{
		Unsafe.SkipInit(out VkRenderPassSampleLocationsBeginInfoEXT instance);
		instance.sType = VkStructureType.RenderPassSampleLocationsBeginInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineSampleLocationsStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 sampleLocationsEnable;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;

	public static VkPipelineSampleLocationsStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineSampleLocationsStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineSampleLocationsStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleLocationSampleCounts;
	public VkExtent2D maxSampleLocationGridSize;
	public unsafe fixed float sampleLocationCoordinateRange[2];
	public uint sampleLocationSubPixelBits;
	public VkBool32 variableSampleLocations;

	public static VkPhysicalDeviceSampleLocationsPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSampleLocationsPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceSampleLocationsPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultisamplePropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D maxSampleLocationGridSize;

	public static VkMultisamplePropertiesEXT New()
	{
		Unsafe.SkipInit(out VkMultisamplePropertiesEXT instance);
		instance.sType = VkStructureType.MultisamplePropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 advancedBlendCoherentOperations;

	public static VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint advancedBlendMaxColorAttachments;
	public VkBool32 advancedBlendIndependentBlend;
	public VkBool32 advancedBlendNonPremultipliedSrcColor;
	public VkBool32 advancedBlendNonPremultipliedDstColor;
	public VkBool32 advancedBlendCorrelatedOverlap;
	public VkBool32 advancedBlendAllOperations;

	public static VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 srcPremultiplied;
	public VkBool32 dstPremultiplied;
	public VkBlendOverlapEXT blendOverlap;

	public static VkPipelineColorBlendAdvancedStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineColorBlendAdvancedStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineColorBlendAdvancedStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageToColorStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageToColorStateCreateFlagsNV flags;
	public VkBool32 coverageToColorEnable;
	public uint coverageToColorLocation;

	public static VkPipelineCoverageToColorStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineCoverageToColorStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineCoverageToColorStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageModulationStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageModulationStateCreateFlagsNV flags;
	public VkCoverageModulationModeNV coverageModulationMode;
	public VkBool32 coverageModulationTableEnable;
	public uint coverageModulationTableCount;
	public unsafe float* pCoverageModulationTable;

	public static VkPipelineCoverageModulationStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineCoverageModulationStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineCoverageModulationStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderSMCount;
	public uint shaderWarpsPerSM;

	public static VkPhysicalDeviceShaderSMBuiltinsPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderSMBuiltinsPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSMBuiltins;

	public static VkPhysicalDeviceShaderSMBuiltinsFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderSMBuiltinsFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesEXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesListEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;

	public static VkDrmFormatModifierPropertiesListEXT New()
	{
		Unsafe.SkipInit(out VkDrmFormatModifierPropertiesListEXT instance);
		instance.sType = VkStructureType.DrmFormatModifierPropertiesListEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;

	public static VkPhysicalDeviceImageDrmFormatModifierInfoEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageDrmFormatModifierInfoEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageDrmFormatModifierInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierListCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe ulong* pDrmFormatModifiers;

	public static VkImageDrmFormatModifierListCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageDrmFormatModifierListCreateInfoEXT instance);
		instance.sType = VkStructureType.ImageDrmFormatModifierListCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public unsafe VkSubresourceLayout* pPlaneLayouts;

	public static VkImageDrmFormatModifierExplicitCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageDrmFormatModifierExplicitCreateInfoEXT instance);
		instance.sType = VkStructureType.ImageDrmFormatModifierExplicitCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;

	public static VkImageDrmFormatModifierPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkImageDrmFormatModifierPropertiesEXT instance);
		instance.sType = VkStructureType.ImageDrmFormatModifierPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierProperties2EXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesList2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;

	public static VkDrmFormatModifierPropertiesList2EXT New()
	{
		Unsafe.SkipInit(out VkDrmFormatModifierPropertiesList2EXT instance);
		instance.sType = VkStructureType.DrmFormatModifierPropertiesList2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationCacheCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkValidationCacheCreateFlagsEXT flags;
	public nuint initialDataSize;
	public unsafe void* pInitialData;

	public static VkValidationCacheCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkValidationCacheCreateInfoEXT instance);
		instance.sType = VkStructureType.ValidationCacheCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderModuleValidationCacheCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkValidationCacheEXT validationCache;

	public static VkShaderModuleValidationCacheCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkShaderModuleValidationCacheCreateInfoEXT instance);
		instance.sType = VkStructureType.ShaderModuleValidationCacheCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShadingRatePaletteNV
{
	public uint shadingRatePaletteEntryCount;
	public unsafe VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shadingRateImageEnable;
	public uint viewportCount;
	public unsafe VkShadingRatePaletteNV* pShadingRatePalettes;

	public static VkPipelineViewportShadingRateImageStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineViewportShadingRateImageStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineViewportShadingRateImageStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shadingRateImage;
	public VkBool32 shadingRateCoarseSampleOrder;

	public static VkPhysicalDeviceShadingRateImageFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShadingRateImageFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceShadingRateImageFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D shadingRateTexelSize;
	public uint shadingRatePaletteSize;
	public uint shadingRateMaxCoarseSamples;

	public static VkPhysicalDeviceShadingRateImagePropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShadingRateImagePropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceShadingRateImagePropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCoarseSampleLocationNV
{
	public uint pixelX;
	public uint pixelY;
	public uint sample;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCoarseSampleOrderCustomNV
{
	public VkShadingRatePaletteEntryNV shadingRate;
	public uint sampleCount;
	public uint sampleLocationCount;
	public unsafe VkCoarseSampleLocationNV* pSampleLocations;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCoarseSampleOrderTypeNV sampleOrderType;
	public uint customSampleOrderCount;
	public unsafe VkCoarseSampleOrderCustomNV* pCustomSampleOrders;

	public static VkPipelineViewportCoarseSampleOrderStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineViewportCoarseSampleOrderStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingShaderGroupCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;

	public static VkRayTracingShaderGroupCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkRayTracingShaderGroupCreateInfoNV instance);
		instance.sType = VkStructureType.RayTracingShaderGroupCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public unsafe VkRayTracingShaderGroupCreateInfoNV* pGroups;
	public uint maxRecursionDepth;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public static VkRayTracingPipelineCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkRayTracingPipelineCreateInfoNV instance);
		instance.sType = VkStructureType.RayTracingPipelineCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryTrianglesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer vertexData;
	public ulong vertexOffset;
	public uint vertexCount;
	public ulong vertexStride;
	public VkFormat vertexFormat;
	public VkBuffer indexData;
	public ulong indexOffset;
	public uint indexCount;
	public VkIndexType indexType;
	public VkBuffer transformData;
	public ulong transformOffset;

	public static VkGeometryTrianglesNV New()
	{
		Unsafe.SkipInit(out VkGeometryTrianglesNV instance);
		instance.sType = VkStructureType.GeometryTrianglesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryAABBNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer aabbData;
	public uint numAABBs;
	public uint stride;
	public ulong offset;

	public static VkGeometryAABBNV New()
	{
		Unsafe.SkipInit(out VkGeometryAABBNV instance);
		instance.sType = VkStructureType.GeometryAABBNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryDataNV
{
	public VkGeometryTrianglesNV triangles;
	public VkGeometryAABBNV aabbs;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkGeometryDataNV geometry;
	public VkGeometryFlagsKHR flags;

	public static VkGeometryNV New()
	{
		Unsafe.SkipInit(out VkGeometryNV instance);
		instance.sType = VkStructureType.GeometryNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsNV flags;
	public uint instanceCount;
	public uint geometryCount;
	public unsafe VkGeometryNV* pGeometries;

	public static VkAccelerationStructureInfoNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureInfoNV instance);
		instance.sType = VkStructureType.AccelerationStructureInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong compactedSize;
	public VkAccelerationStructureInfoNV info;

	public static VkAccelerationStructureCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureCreateInfoNV instance);
		instance.sType = VkStructureType.AccelerationStructureCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindAccelerationStructureMemoryInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;

	public static VkBindAccelerationStructureMemoryInfoNV New()
	{
		Unsafe.SkipInit(out VkBindAccelerationStructureMemoryInfoNV instance);
		instance.sType = VkStructureType.BindAccelerationStructureMemoryInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetAccelerationStructureNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint accelerationStructureCount;
	public unsafe VkAccelerationStructureKHR* pAccelerationStructures;

	public static VkWriteDescriptorSetAccelerationStructureNV New()
	{
		Unsafe.SkipInit(out VkWriteDescriptorSetAccelerationStructureNV instance);
		instance.sType = VkStructureType.WriteDescriptorSetAccelerationStructureNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMemoryRequirementsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureMemoryRequirementsTypeKHR type;
	public VkAccelerationStructureKHR accelerationStructure;

	public static VkAccelerationStructureMemoryRequirementsInfoNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureMemoryRequirementsInfoNV instance);
		instance.sType = VkStructureType.AccelerationStructureMemoryRequirementsInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxTriangleCount;
	public uint maxDescriptorSetAccelerationStructures;

	public static VkPhysicalDeviceRayTracingPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAabbPositionsKHR
{
	public float minX;
	public float minY;
	public float minZ;
	public float maxX;
	public float maxY;
	public float maxZ;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 representativeFragmentTest;

	public static VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 representativeFragmentTestEnable;

	public static VkPipelineRepresentativeFragmentTestStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineRepresentativeFragmentTestStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineRepresentativeFragmentTestStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageViewType imageViewType;

	public static VkPhysicalDeviceImageViewImageFormatInfoEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageViewImageFormatInfoEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageViewImageFormatInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 filterCubic;
	public VkBool32 filterCubicMinmax;

	public static VkFilterCubicImageViewImageFormatPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkFilterCubicImageViewImageFormatPropertiesEXT instance);
		instance.sType = VkStructureType.FilterCubicImageViewImageFormatPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMemoryHostPointerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public unsafe void* pHostPointer;

	public static VkImportMemoryHostPointerInfoEXT New()
	{
		Unsafe.SkipInit(out VkImportMemoryHostPointerInfoEXT instance);
		instance.sType = VkStructureType.ImportMemoryHostPointerInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryHostPointerPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryTypeBits;

	public static VkMemoryHostPointerPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkMemoryHostPointerPropertiesEXT instance);
		instance.sType = VkStructureType.MemoryHostPointerPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong minImportedHostPointerAlignment;

	public static VkPhysicalDeviceExternalMemoryHostPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalMemoryHostPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalMemoryHostPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCompilerControlCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCompilerControlFlagsAMD compilerControlFlags;

	public static VkPipelineCompilerControlCreateInfoAMD New()
	{
		Unsafe.SkipInit(out VkPipelineCompilerControlCreateInfoAMD instance);
		instance.sType = VkStructureType.PipelineCompilerControlCreateInfoAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCalibratedTimestampInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkTimeDomainEXT timeDomain;

	public static VkCalibratedTimestampInfoEXT New()
	{
		Unsafe.SkipInit(out VkCalibratedTimestampInfoEXT instance);
		instance.sType = VkStructureType.CalibratedTimestampInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCorePropertiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderEngineCount;
	public uint shaderArraysPerEngineCount;
	public uint computeUnitsPerShaderArray;
	public uint simdPerComputeUnit;
	public uint wavefrontsPerSimd;
	public uint wavefrontSize;
	public uint sgprsPerSimd;
	public uint minSgprAllocation;
	public uint maxSgprAllocation;
	public uint sgprAllocationGranularity;
	public uint vgprsPerSimd;
	public uint minVgprAllocation;
	public uint maxVgprAllocation;
	public uint vgprAllocationGranularity;

	public static VkPhysicalDeviceShaderCorePropertiesAMD New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderCorePropertiesAMD instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderCorePropertiesAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryOverallocationCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryOverallocationBehaviorAMD overallocationBehavior;

	public static VkDeviceMemoryOverallocationCreateInfoAMD New()
	{
		Unsafe.SkipInit(out VkDeviceMemoryOverallocationCreateInfoAMD instance);
		instance.sType = VkStructureType.DeviceMemoryOverallocationCreateInfoAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVertexAttribDivisor;

	public static VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDivisorDescriptionEXT
{
	public uint binding;
	public uint divisor;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint vertexBindingDivisorCount;
	public unsafe VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors;

	public static VkPipelineVertexInputDivisorStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineVertexInputDivisorStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineVertexInputDivisorStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vertexAttributeInstanceRateDivisor;
	public VkBool32 vertexAttributeInstanceRateZeroDivisor;

	public static VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 computeDerivativeGroupQuads;
	public VkBool32 computeDerivativeGroupLinear;

	public static VkPhysicalDeviceComputeShaderDerivativesFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceComputeShaderDerivativesFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceComputeShaderDerivativesFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 taskShader;
	public VkBool32 meshShader;

	public static VkPhysicalDeviceMeshShaderFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMeshShaderFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxDrawMeshTasksCount;
	public uint maxTaskWorkGroupInvocations;
	public unsafe fixed uint maxTaskWorkGroupSize[3];
	public uint maxTaskTotalMemorySize;
	public uint maxTaskOutputCount;
	public uint maxMeshWorkGroupInvocations;
	public unsafe fixed uint maxMeshWorkGroupSize[3];
	public uint maxMeshTotalMemorySize;
	public uint maxMeshOutputVertices;
	public uint maxMeshOutputPrimitives;
	public uint maxMeshMultiviewViewCount;
	public uint meshOutputPerVertexGranularity;
	public uint meshOutputPerPrimitiveGranularity;

	public static VkPhysicalDeviceMeshShaderPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMeshShaderPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawMeshTasksIndirectCommandNV
{
	public uint taskCount;
	public uint firstTask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imageFootprint;

	public static VkPhysicalDeviceShaderImageFootprintFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderImageFootprintFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderImageFootprintFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint exclusiveScissorCount;
	public unsafe VkRect2D* pExclusiveScissors;

	public static VkPipelineViewportExclusiveScissorStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineViewportExclusiveScissorStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineViewportExclusiveScissorStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 exclusiveScissor;

	public static VkPhysicalDeviceExclusiveScissorFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExclusiveScissorFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceExclusiveScissorFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyCheckpointPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags checkpointExecutionStageMask;

	public static VkQueueFamilyCheckpointPropertiesNV New()
	{
		Unsafe.SkipInit(out VkQueueFamilyCheckpointPropertiesNV instance);
		instance.sType = VkStructureType.QueueFamilyCheckpointPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCheckpointDataNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags stage;
	public unsafe void* pCheckpointMarker;

	public static VkCheckpointDataNV New()
	{
		Unsafe.SkipInit(out VkCheckpointDataNV instance);
		instance.sType = VkStructureType.CheckpointDataNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderIntegerFunctions2;

	public static VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPerformanceValueDataINTEL
{
	[FieldOffset(0)]
	public uint value32;
	[FieldOffset(0)]
	public ulong value64;
	[FieldOffset(0)]
	public float valueFloat;
	[FieldOffset(0)]
	public VkBool32 valueBool;
	[FieldOffset(0)]
	public unsafe sbyte* valueString;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceValueINTEL
{
	public VkPerformanceValueTypeINTEL type;
	public VkPerformanceValueDataINTEL data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInitializePerformanceApiInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe void* pUserData;

	public static VkInitializePerformanceApiInfoINTEL New()
	{
		Unsafe.SkipInit(out VkInitializePerformanceApiInfoINTEL instance);
		instance.sType = VkStructureType.InitializePerformanceApiInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueryPoolSamplingModeINTEL performanceCountersSampling;

	public static VkQueryPoolPerformanceQueryCreateInfoINTEL New()
	{
		Unsafe.SkipInit(out VkQueryPoolPerformanceQueryCreateInfoINTEL instance);
		instance.sType = VkStructureType.QueryPoolPerformanceQueryCreateInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceMarkerInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong marker;

	public static VkPerformanceMarkerInfoINTEL New()
	{
		Unsafe.SkipInit(out VkPerformanceMarkerInfoINTEL instance);
		instance.sType = VkStructureType.PerformanceMarkerInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceStreamMarkerInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint marker;

	public static VkPerformanceStreamMarkerInfoINTEL New()
	{
		Unsafe.SkipInit(out VkPerformanceStreamMarkerInfoINTEL instance);
		instance.sType = VkStructureType.PerformanceStreamMarkerInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceOverrideInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceOverrideTypeINTEL type;
	public VkBool32 enable;
	public ulong parameter;

	public static VkPerformanceOverrideInfoINTEL New()
	{
		Unsafe.SkipInit(out VkPerformanceOverrideInfoINTEL instance);
		instance.sType = VkStructureType.PerformanceOverrideInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceConfigurationAcquireInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceConfigurationTypeINTEL type;

	public static VkPerformanceConfigurationAcquireInfoINTEL New()
	{
		Unsafe.SkipInit(out VkPerformanceConfigurationAcquireInfoINTEL instance);
		instance.sType = VkStructureType.PerformanceConfigurationAcquireInfoINTEL;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint pciDomain;
	public uint pciBus;
	public uint pciDevice;
	public uint pciFunction;

	public static VkPhysicalDevicePCIBusInfoPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePCIBusInfoPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePCIBusInfoPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 localDimmingSupport;

	public static VkDisplayNativeHdrSurfaceCapabilitiesAMD New()
	{
		Unsafe.SkipInit(out VkDisplayNativeHdrSurfaceCapabilitiesAMD instance);
		instance.sType = VkStructureType.DisplayNativeHdrSurfaceCapabilitiesAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 localDimmingEnable;

	public static VkSwapchainDisplayNativeHdrCreateInfoAMD New()
	{
		Unsafe.SkipInit(out VkSwapchainDisplayNativeHdrCreateInfoAMD instance);
		instance.sType = VkStructureType.SwapchainDisplayNativeHdrCreateInfoAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMap;
	public VkBool32 fragmentDensityMapDynamic;
	public VkBool32 fragmentDensityMapNonSubsampledImages;

	public static VkPhysicalDeviceFragmentDensityMapFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMapFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMapFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D minFragmentDensityTexelSize;
	public VkExtent2D maxFragmentDensityTexelSize;
	public VkBool32 fragmentDensityInvocations;

	public static VkPhysicalDeviceFragmentDensityMapPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMapPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMapPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAttachmentReference fragmentDensityMapAttachment;

	public static VkRenderPassFragmentDensityMapCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkRenderPassFragmentDensityMapCreateInfoEXT instance);
		instance.sType = VkStructureType.RenderPassFragmentDensityMapCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCoreProperties2AMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
	public uint activeComputeUnitCount;

	public static VkPhysicalDeviceShaderCoreProperties2AMD New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderCoreProperties2AMD instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderCoreProperties2AMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceCoherentMemory;

	public static VkPhysicalDeviceCoherentMemoryFeaturesAMD New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCoherentMemoryFeaturesAMD instance);
		instance.sType = VkStructureType.PhysicalDeviceCoherentMemoryFeaturesAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderImageInt64Atomics;
	public VkBool32 sparseImageInt64Atomics;

	public static VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public heapBudget__FixedBuffer heapBudget;

	public unsafe struct heapBudget__FixedBuffer
	{
		public ulong e0;
		public ulong e1;
		public ulong e2;
		public ulong e3;
		public ulong e4;
		public ulong e5;
		public ulong e6;
		public ulong e7;
		public ulong e8;
		public ulong e9;
		public ulong e10;
		public ulong e11;
		public ulong e12;
		public ulong e13;
		public ulong e14;
		public ulong e15;

		[UnscopedRef]
		public ref ulong this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<ulong> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 16);
		}
	}
	public heapUsage__FixedBuffer heapUsage;

	public unsafe struct heapUsage__FixedBuffer
	{
		public ulong e0;
		public ulong e1;
		public ulong e2;
		public ulong e3;
		public ulong e4;
		public ulong e5;
		public ulong e6;
		public ulong e7;
		public ulong e8;
		public ulong e9;
		public ulong e10;
		public ulong e11;
		public ulong e12;
		public ulong e13;
		public ulong e14;
		public ulong e15;

		[UnscopedRef]
		public ref ulong this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<ulong> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 16);
		}
	}

	public static VkPhysicalDeviceMemoryBudgetPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMemoryBudgetPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMemoryBudgetPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 memoryPriority;

	public static VkPhysicalDeviceMemoryPriorityFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMemoryPriorityFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMemoryPriorityFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryPriorityAllocateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float priority;

	public static VkMemoryPriorityAllocateInfoEXT New()
	{
		Unsafe.SkipInit(out VkMemoryPriorityAllocateInfoEXT instance);
		instance.sType = VkStructureType.MemoryPriorityAllocateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocationImageAliasing;

	public static VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;

	public static VkPhysicalDeviceBufferDeviceAddressFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceBufferDeviceAddressFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferDeviceAddressCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong deviceAddress;

	public static VkBufferDeviceAddressCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkBufferDeviceAddressCreateInfoEXT instance);
		instance.sType = VkStructureType.BufferDeviceAddressCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint enabledValidationFeatureCount;
	public unsafe VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
	public uint disabledValidationFeatureCount;
	public unsafe VkValidationFeatureDisableEXT* pDisabledValidationFeatures;

	public static VkValidationFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkValidationFeaturesEXT instance);
		instance.sType = VkStructureType.ValidationFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCooperativeMatrixPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint MSize;
	public uint NSize;
	public uint KSize;
	public VkComponentTypeNV AType;
	public VkComponentTypeNV BType;
	public VkComponentTypeNV CType;
	public VkComponentTypeNV DType;
	public VkScopeNV scope;

	public static VkCooperativeMatrixPropertiesNV New()
	{
		Unsafe.SkipInit(out VkCooperativeMatrixPropertiesNV instance);
		instance.sType = VkStructureType.CooperativeMatrixPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 cooperativeMatrix;
	public VkBool32 cooperativeMatrixRobustBufferAccess;

	public static VkPhysicalDeviceCooperativeMatrixFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCooperativeMatrixFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCooperativeMatrixFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderStageFlags cooperativeMatrixSupportedStages;

	public static VkPhysicalDeviceCooperativeMatrixPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCooperativeMatrixPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCooperativeMatrixPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 coverageReductionMode;

	public static VkPhysicalDeviceCoverageReductionModeFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCoverageReductionModeFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCoverageReductionModeFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageReductionStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageReductionStateCreateFlagsNV flags;
	public VkCoverageReductionModeNV coverageReductionMode;

	public static VkPipelineCoverageReductionStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineCoverageReductionStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineCoverageReductionStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferMixedSamplesCombinationNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCoverageReductionModeNV coverageReductionMode;
	public VkSampleCountFlags rasterizationSamples;
	public VkSampleCountFlags depthStencilSamples;
	public VkSampleCountFlags colorSamples;

	public static VkFramebufferMixedSamplesCombinationNV New()
	{
		Unsafe.SkipInit(out VkFramebufferMixedSamplesCombinationNV instance);
		instance.sType = VkStructureType.FramebufferMixedSamplesCombinationNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShaderSampleInterlock;
	public VkBool32 fragmentShaderPixelInterlock;
	public VkBool32 fragmentShaderShadingRateInterlock;

	public static VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShaderInterlockFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 ycbcrImageArrays;

	public static VkPhysicalDeviceYcbcrImageArraysFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceYcbcrImageArraysFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceYcbcrImageArraysFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 provokingVertexLast;
	public VkBool32 transformFeedbackPreservesProvokingVertex;

	public static VkPhysicalDeviceProvokingVertexFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceProvokingVertexFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceProvokingVertexFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 provokingVertexModePerPipeline;
	public VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;

	public static VkPhysicalDeviceProvokingVertexPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceProvokingVertexPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceProvokingVertexPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkProvokingVertexModeEXT provokingVertexMode;

	public static VkPipelineRasterizationProvokingVertexStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationProvokingVertexStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRasterizationProvokingVertexStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkHeadlessSurfaceCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkHeadlessSurfaceCreateFlagsEXT flags;

	public static VkHeadlessSurfaceCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkHeadlessSurfaceCreateInfoEXT instance);
		instance.sType = VkStructureType.HeadlessSurfaceCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rectangularLines;
	public VkBool32 bresenhamLines;
	public VkBool32 smoothLines;
	public VkBool32 stippledRectangularLines;
	public VkBool32 stippledBresenhamLines;
	public VkBool32 stippledSmoothLines;

	public static VkPhysicalDeviceLineRasterizationFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceLineRasterizationFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceLineRasterizationFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint lineSubPixelPrecisionBits;

	public static VkPhysicalDeviceLineRasterizationPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceLineRasterizationPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceLineRasterizationPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationLineStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkLineRasterizationModeEXT lineRasterizationMode;
	public VkBool32 stippledLineEnable;
	public uint lineStippleFactor;
	public ushort lineStipplePattern;

	public static VkPipelineRasterizationLineStateCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineRasterizationLineStateCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineRasterizationLineStateCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferFloat32Atomics;
	public VkBool32 shaderBufferFloat32AtomicAdd;
	public VkBool32 shaderBufferFloat64Atomics;
	public VkBool32 shaderBufferFloat64AtomicAdd;
	public VkBool32 shaderSharedFloat32Atomics;
	public VkBool32 shaderSharedFloat32AtomicAdd;
	public VkBool32 shaderSharedFloat64Atomics;
	public VkBool32 shaderSharedFloat64AtomicAdd;
	public VkBool32 shaderImageFloat32Atomics;
	public VkBool32 shaderImageFloat32AtomicAdd;
	public VkBool32 sparseImageFloat32Atomics;
	public VkBool32 sparseImageFloat32AtomicAdd;

	public static VkPhysicalDeviceShaderAtomicFloatFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderAtomicFloatFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderAtomicFloatFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 indexTypeUint8;

	public static VkPhysicalDeviceIndexTypeUint8FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceIndexTypeUint8FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceIndexTypeUint8FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 extendedDynamicState;

	public static VkPhysicalDeviceExtendedDynamicStateFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExtendedDynamicStateFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceExtendedDynamicStateFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferFloat16Atomics;
	public VkBool32 shaderBufferFloat16AtomicAdd;
	public VkBool32 shaderBufferFloat16AtomicMinMax;
	public VkBool32 shaderBufferFloat32AtomicMinMax;
	public VkBool32 shaderBufferFloat64AtomicMinMax;
	public VkBool32 shaderSharedFloat16Atomics;
	public VkBool32 shaderSharedFloat16AtomicAdd;
	public VkBool32 shaderSharedFloat16AtomicMinMax;
	public VkBool32 shaderSharedFloat32AtomicMinMax;
	public VkBool32 shaderSharedFloat64AtomicMinMax;
	public VkBool32 shaderImageFloat32AtomicMinMax;
	public VkBool32 sparseImageFloat32AtomicMinMax;

	public static VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderAtomicFloat2FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfacePresentModeEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPresentModeKHR presentMode;

	public static VkSurfacePresentModeEXT New()
	{
		Unsafe.SkipInit(out VkSurfacePresentModeEXT instance);
		instance.sType = VkStructureType.SurfacePresentModeEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfacePresentScalingCapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPresentScalingFlagsEXT supportedPresentScaling;
	public VkPresentGravityFlagsEXT supportedPresentGravityX;
	public VkPresentGravityFlagsEXT supportedPresentGravityY;
	public VkExtent2D minScaledImageExtent;
	public VkExtent2D maxScaledImageExtent;

	public static VkSurfacePresentScalingCapabilitiesEXT New()
	{
		Unsafe.SkipInit(out VkSurfacePresentScalingCapabilitiesEXT instance);
		instance.sType = VkStructureType.SurfacePresentScalingCapabilitiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfacePresentModeCompatibilityEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint presentModeCount;
	public unsafe VkPresentModeKHR* pPresentModes;

	public static VkSurfacePresentModeCompatibilityEXT New()
	{
		Unsafe.SkipInit(out VkSurfacePresentModeCompatibilityEXT instance);
		instance.sType = VkStructureType.SurfacePresentModeCompatibilityEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 swapchainMaintenance1;

	public static VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceSwapchainMaintenance1FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainPresentFenceInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkFence* pFences;

	public static VkSwapchainPresentFenceInfoEXT New()
	{
		Unsafe.SkipInit(out VkSwapchainPresentFenceInfoEXT instance);
		instance.sType = VkStructureType.SwapchainPresentFenceInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainPresentModesCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint presentModeCount;
	public unsafe VkPresentModeKHR* pPresentModes;

	public static VkSwapchainPresentModesCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkSwapchainPresentModesCreateInfoEXT instance);
		instance.sType = VkStructureType.SwapchainPresentModesCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainPresentModeInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkPresentModeKHR* pPresentModes;

	public static VkSwapchainPresentModeInfoEXT New()
	{
		Unsafe.SkipInit(out VkSwapchainPresentModeInfoEXT instance);
		instance.sType = VkStructureType.SwapchainPresentModeInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainPresentScalingCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPresentScalingFlagsEXT scalingBehavior;
	public VkPresentGravityFlagsEXT presentGravityX;
	public VkPresentGravityFlagsEXT presentGravityY;

	public static VkSwapchainPresentScalingCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkSwapchainPresentScalingCreateInfoEXT instance);
		instance.sType = VkStructureType.SwapchainPresentScalingCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkReleaseSwapchainImagesInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public uint imageIndexCount;
	public unsafe uint* pImageIndices;

	public static VkReleaseSwapchainImagesInfoEXT New()
	{
		Unsafe.SkipInit(out VkReleaseSwapchainImagesInfoEXT instance);
		instance.sType = VkStructureType.ReleaseSwapchainImagesInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxGraphicsShaderGroupCount;
	public uint maxIndirectSequenceCount;
	public uint maxIndirectCommandsTokenCount;
	public uint maxIndirectCommandsStreamCount;
	public uint maxIndirectCommandsTokenOffset;
	public uint maxIndirectCommandsStreamStride;
	public uint minSequencesCountBufferOffsetAlignment;
	public uint minSequencesIndexBufferOffsetAlignment;
	public uint minIndirectCommandsBufferOffsetAlignment;

	public static VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceGeneratedCommands;

	public static VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsShaderGroupCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;

	public static VkGraphicsShaderGroupCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkGraphicsShaderGroupCreateInfoNV instance);
		instance.sType = VkStructureType.GraphicsShaderGroupCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint groupCount;
	public unsafe VkGraphicsShaderGroupCreateInfoNV* pGroups;
	public uint pipelineCount;
	public unsafe VkPipeline* pPipelines;

	public static VkGraphicsPipelineShaderGroupsCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkGraphicsPipelineShaderGroupsCreateInfoNV instance);
		instance.sType = VkStructureType.GraphicsPipelineShaderGroupsCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindShaderGroupIndirectCommandNV
{
	public uint groupIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindIndexBufferIndirectCommandNV
{
	public ulong bufferAddress;
	public uint size;
	public VkIndexType indexType;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindVertexBufferIndirectCommandNV
{
	public ulong bufferAddress;
	public uint size;
	public uint stride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSetStateFlagsIndirectCommandNV
{
	public uint data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsStreamNV
{
	public VkBuffer buffer;
	public ulong offset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsLayoutTokenNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIndirectCommandsTokenTypeNV tokenType;
	public uint stream;
	public uint offset;
	public uint vertexBindingUnit;
	public VkBool32 vertexDynamicStride;
	public VkPipelineLayout pushconstantPipelineLayout;
	public VkShaderStageFlags pushconstantShaderStageFlags;
	public uint pushconstantOffset;
	public uint pushconstantSize;
	public VkIndirectStateFlagsNV indirectStateFlags;
	public uint indexTypeCount;
	public unsafe VkIndexType* pIndexTypes;
	public unsafe uint* pIndexTypeValues;

	public static VkIndirectCommandsLayoutTokenNV New()
	{
		Unsafe.SkipInit(out VkIndirectCommandsLayoutTokenNV instance);
		instance.sType = VkStructureType.IndirectCommandsLayoutTokenNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsLayoutCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIndirectCommandsLayoutUsageFlagsNV flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint tokenCount;
	public unsafe VkIndirectCommandsLayoutTokenNV* pTokens;
	public uint streamCount;
	public unsafe uint* pStreamStrides;

	public static VkIndirectCommandsLayoutCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkIndirectCommandsLayoutCreateInfoNV instance);
		instance.sType = VkStructureType.IndirectCommandsLayoutCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeneratedCommandsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint streamCount;
	public unsafe VkIndirectCommandsStreamNV* pStreams;
	public uint sequencesCount;
	public VkBuffer preprocessBuffer;
	public ulong preprocessOffset;
	public ulong preprocessSize;
	public VkBuffer sequencesCountBuffer;
	public ulong sequencesCountOffset;
	public VkBuffer sequencesIndexBuffer;
	public ulong sequencesIndexOffset;

	public static VkGeneratedCommandsInfoNV New()
	{
		Unsafe.SkipInit(out VkGeneratedCommandsInfoNV instance);
		instance.sType = VkStructureType.GeneratedCommandsInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint maxSequencesCount;

	public static VkGeneratedCommandsMemoryRequirementsInfoNV New()
	{
		Unsafe.SkipInit(out VkGeneratedCommandsMemoryRequirementsInfoNV instance);
		instance.sType = VkStructureType.GeneratedCommandsMemoryRequirementsInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 inheritedViewportScissor2D;

	public static VkPhysicalDeviceInheritedViewportScissorFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceInheritedViewportScissorFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceInheritedViewportScissorFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceViewportScissorInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 viewportScissor2D;
	public uint viewportDepthCount;
	public unsafe VkViewport* pViewportDepths;

	public static VkCommandBufferInheritanceViewportScissorInfoNV New()
	{
		Unsafe.SkipInit(out VkCommandBufferInheritanceViewportScissorInfoNV instance);
		instance.sType = VkStructureType.CommandBufferInheritanceViewportScissorInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 texelBufferAlignment;

	public static VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassTransformBeginInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;

	public static VkRenderPassTransformBeginInfoQCOM New()
	{
		Unsafe.SkipInit(out VkRenderPassTransformBeginInfoQCOM instance);
		instance.sType = VkStructureType.RenderPassTransformBeginInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;
	public VkRect2D renderArea;

	public static VkCommandBufferInheritanceRenderPassTransformInfoQCOM New()
	{
		Unsafe.SkipInit(out VkCommandBufferInheritanceRenderPassTransformInfoQCOM instance);
		instance.sType = VkStructureType.CommandBufferInheritanceRenderPassTransformInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceMemoryReport;

	public static VkPhysicalDeviceDeviceMemoryReportFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDeviceMemoryReportFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDeviceMemoryReportFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryReportCallbackDataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	public VkDeviceMemoryReportEventTypeEXT type;
	public ulong memoryObjectId;
	public ulong size;
	public VkObjectType objectType;
	public ulong objectHandle;
	public uint heapIndex;

	public static VkDeviceMemoryReportCallbackDataEXT New()
	{
		Unsafe.SkipInit(out VkDeviceMemoryReportCallbackDataEXT instance);
		instance.sType = VkStructureType.DeviceMemoryReportCallbackDataEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	public unsafe delegate* unmanaged<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback;
	public unsafe void* pUserData;

	public static VkDeviceDeviceMemoryReportCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkDeviceDeviceMemoryReportCreateInfoEXT instance);
		instance.sType = VkStructureType.DeviceDeviceMemoryReportCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRobustness2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustBufferAccess2;
	public VkBool32 robustImageAccess2;
	public VkBool32 nullDescriptor;

	public static VkPhysicalDeviceRobustness2FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRobustness2FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceRobustness2FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRobustness2PropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong robustStorageBufferAccessSizeAlignment;
	public ulong robustUniformBufferAccessSizeAlignment;

	public static VkPhysicalDeviceRobustness2PropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRobustness2PropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceRobustness2PropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerCustomBorderColorCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkClearColorValue customBorderColor;
	public VkFormat format;

	public static VkSamplerCustomBorderColorCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkSamplerCustomBorderColorCreateInfoEXT instance);
		instance.sType = VkStructureType.SamplerCustomBorderColorCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxCustomBorderColorSamplers;

	public static VkPhysicalDeviceCustomBorderColorPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCustomBorderColorPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceCustomBorderColorPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 customBorderColors;
	public VkBool32 customBorderColorWithoutFormat;

	public static VkPhysicalDeviceCustomBorderColorFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCustomBorderColorFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceCustomBorderColorFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePresentBarrierFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentBarrier;

	public static VkPhysicalDevicePresentBarrierFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePresentBarrierFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDevicePresentBarrierFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilitiesPresentBarrierNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentBarrierSupported;

	public static VkSurfaceCapabilitiesPresentBarrierNV New()
	{
		Unsafe.SkipInit(out VkSurfaceCapabilitiesPresentBarrierNV instance);
		instance.sType = VkStructureType.SurfaceCapabilitiesPresentBarrierNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainPresentBarrierCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentBarrierEnable;

	public static VkSwapchainPresentBarrierCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkSwapchainPresentBarrierCreateInfoNV instance);
		instance.sType = VkStructureType.SwapchainPresentBarrierCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 diagnosticsConfig;

	public static VkPhysicalDeviceDiagnosticsConfigFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDiagnosticsConfigFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDiagnosticsConfigFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceDiagnosticsConfigCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceDiagnosticsConfigFlagsNV flags;

	public static VkDeviceDiagnosticsConfigCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkDeviceDiagnosticsConfigCreateInfoNV instance);
		instance.sType = VkStructureType.DeviceDiagnosticsConfigCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryLowLatencySupportNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe void* pQueriedLowLatencyData;

	public static VkQueryLowLatencySupportNV New()
	{
		Unsafe.SkipInit(out VkQueryLowLatencySupportNV instance);
		instance.sType = VkStructureType.QueryLowLatencySupportNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorBufferPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 combinedImageSamplerDescriptorSingleArray;
	public VkBool32 bufferlessPushDescriptors;
	public VkBool32 allowSamplerImageViewPostSubmitCreation;
	public ulong descriptorBufferOffsetAlignment;
	public uint maxDescriptorBufferBindings;
	public uint maxResourceDescriptorBufferBindings;
	public uint maxSamplerDescriptorBufferBindings;
	public uint maxEmbeddedImmutableSamplerBindings;
	public uint maxEmbeddedImmutableSamplers;
	public nuint bufferCaptureReplayDescriptorDataSize;
	public nuint imageCaptureReplayDescriptorDataSize;
	public nuint imageViewCaptureReplayDescriptorDataSize;
	public nuint samplerCaptureReplayDescriptorDataSize;
	public nuint accelerationStructureCaptureReplayDescriptorDataSize;
	public nuint samplerDescriptorSize;
	public nuint combinedImageSamplerDescriptorSize;
	public nuint sampledImageDescriptorSize;
	public nuint storageImageDescriptorSize;
	public nuint uniformTexelBufferDescriptorSize;
	public nuint robustUniformTexelBufferDescriptorSize;
	public nuint storageTexelBufferDescriptorSize;
	public nuint robustStorageTexelBufferDescriptorSize;
	public nuint uniformBufferDescriptorSize;
	public nuint robustUniformBufferDescriptorSize;
	public nuint storageBufferDescriptorSize;
	public nuint robustStorageBufferDescriptorSize;
	public nuint inputAttachmentDescriptorSize;
	public nuint accelerationStructureDescriptorSize;
	public ulong maxSamplerDescriptorBufferRange;
	public ulong maxResourceDescriptorBufferRange;
	public ulong samplerDescriptorBufferAddressSpaceSize;
	public ulong resourceDescriptorBufferAddressSpaceSize;
	public ulong descriptorBufferAddressSpaceSize;

	public static VkPhysicalDeviceDescriptorBufferPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorBufferPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorBufferPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public nuint combinedImageSamplerDensityMapDescriptorSize;

	public static VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorBufferDensityMapPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorBufferFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 descriptorBuffer;
	public VkBool32 descriptorBufferCaptureReplay;
	public VkBool32 descriptorBufferImageLayoutIgnored;
	public VkBool32 descriptorBufferPushDescriptors;

	public static VkPhysicalDeviceDescriptorBufferFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorBufferFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorBufferFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorAddressInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong address;
	public ulong range;
	public VkFormat format;

	public static VkDescriptorAddressInfoEXT New()
	{
		Unsafe.SkipInit(out VkDescriptorAddressInfoEXT instance);
		instance.sType = VkStructureType.DescriptorAddressInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorBufferBindingInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong address;
	public VkBufferUsageFlags usage;

	public static VkDescriptorBufferBindingInfoEXT New()
	{
		Unsafe.SkipInit(out VkDescriptorBufferBindingInfoEXT instance);
		instance.sType = VkStructureType.DescriptorBufferBindingInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorBufferBindingPushDescriptorBufferHandleEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;

	public static VkDescriptorBufferBindingPushDescriptorBufferHandleEXT New()
	{
		Unsafe.SkipInit(out VkDescriptorBufferBindingPushDescriptorBufferHandleEXT instance);
		instance.sType = VkStructureType.DescriptorBufferBindingPushDescriptorBufferHandleEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkDescriptorDataEXT
{
	[FieldOffset(0)]
	public unsafe VkSampler* pSampler;
	[FieldOffset(0)]
	public unsafe VkDescriptorImageInfo* pCombinedImageSampler;
	[FieldOffset(0)]
	public unsafe VkDescriptorImageInfo* pInputAttachmentImage;
	[FieldOffset(0)]
	public unsafe VkDescriptorImageInfo* pSampledImage;
	[FieldOffset(0)]
	public unsafe VkDescriptorImageInfo* pStorageImage;
	[FieldOffset(0)]
	public unsafe VkDescriptorAddressInfoEXT* pUniformTexelBuffer;
	[FieldOffset(0)]
	public unsafe VkDescriptorAddressInfoEXT* pStorageTexelBuffer;
	[FieldOffset(0)]
	public unsafe VkDescriptorAddressInfoEXT* pUniformBuffer;
	[FieldOffset(0)]
	public unsafe VkDescriptorAddressInfoEXT* pStorageBuffer;
	[FieldOffset(0)]
	public ulong accelerationStructure;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorGetInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorType type;
	public VkDescriptorDataEXT data;

	public static VkDescriptorGetInfoEXT New()
	{
		Unsafe.SkipInit(out VkDescriptorGetInfoEXT instance);
		instance.sType = VkStructureType.DescriptorGetInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCaptureDescriptorDataInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;

	public static VkBufferCaptureDescriptorDataInfoEXT New()
	{
		Unsafe.SkipInit(out VkBufferCaptureDescriptorDataInfoEXT instance);
		instance.sType = VkStructureType.BufferCaptureDescriptorDataInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCaptureDescriptorDataInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;

	public static VkImageCaptureDescriptorDataInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageCaptureDescriptorDataInfoEXT instance);
		instance.sType = VkStructureType.ImageCaptureDescriptorDataInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewCaptureDescriptorDataInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;

	public static VkImageViewCaptureDescriptorDataInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageViewCaptureDescriptorDataInfoEXT instance);
		instance.sType = VkStructureType.ImageViewCaptureDescriptorDataInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerCaptureDescriptorDataInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampler sampler;

	public static VkSamplerCaptureDescriptorDataInfoEXT New()
	{
		Unsafe.SkipInit(out VkSamplerCaptureDescriptorDataInfoEXT instance);
		instance.sType = VkStructureType.SamplerCaptureDescriptorDataInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpaqueCaptureDescriptorDataCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe void* opaqueCaptureDescriptorData;

	public static VkOpaqueCaptureDescriptorDataCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkOpaqueCaptureDescriptorDataCreateInfoEXT instance);
		instance.sType = VkStructureType.OpaqueCaptureDescriptorDataCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureCaptureDescriptorDataInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkAccelerationStructureKHR accelerationStructureNV;

	public static VkAccelerationStructureCaptureDescriptorDataInfoEXT New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureCaptureDescriptorDataInfoEXT instance);
		instance.sType = VkStructureType.AccelerationStructureCaptureDescriptorDataInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 graphicsPipelineLibrary;

	public static VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 graphicsPipelineLibraryFastLinking;
	public VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;

	public static VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineLibraryCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGraphicsPipelineLibraryFlagsEXT flags;

	public static VkGraphicsPipelineLibraryCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkGraphicsPipelineLibraryCreateInfoEXT instance);
		instance.sType = VkStructureType.GraphicsPipelineLibraryCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderEarlyAndLateFragmentTests;

	public static VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShadingRateEnums;
	public VkBool32 supersampleFragmentShadingRates;
	public VkBool32 noInvocationFragmentShadingRates;

	public static VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags maxFragmentShadingRateInvocationCount;

	public static VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFragmentShadingRateTypeNV shadingRateType;
	public VkFragmentShadingRateNV shadingRate;
	public combinerOps__FixedBuffer combinerOps;

	public unsafe struct combinerOps__FixedBuffer
	{
		public VkFragmentShadingRateCombinerOpKHR e0;
		public VkFragmentShadingRateCombinerOpKHR e1;

		[UnscopedRef]
		public ref VkFragmentShadingRateCombinerOpKHR this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<VkFragmentShadingRateCombinerOpKHR> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 2);
		}
	}

	public static VkPipelineFragmentShadingRateEnumStateCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkPipelineFragmentShadingRateEnumStateCreateInfoNV instance);
		instance.sType = VkStructureType.PipelineFragmentShadingRateEnumStateCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkDeviceOrHostAddressConstKHR
{
	[FieldOffset(0)]
	public ulong deviceAddress;
	[FieldOffset(0)]
	public unsafe void* hostAddress;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR vertexData;

	public static VkAccelerationStructureGeometryMotionTrianglesDataNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureGeometryMotionTrianglesDataNV instance);
		instance.sType = VkStructureType.AccelerationStructureGeometryMotionTrianglesDataNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMotionInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInstances;
	public VkAccelerationStructureMotionInfoFlagsNV flags;

	public static VkAccelerationStructureMotionInfoNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureMotionInfoNV instance);
		instance.sType = VkStructureType.AccelerationStructureMotionInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSRTDataNV
{
	public float sx;
	public float a;
	public float b;
	public float pvx;
	public float sy;
	public float c;
	public float pvy;
	public float sz;
	public float pvz;
	public float qx;
	public float qy;
	public float qz;
	public float qw;
	public float tx;
	public float ty;
	public float tz;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureMotionInstanceDataNV
{
	[FieldOffset(0)]
	public VkAccelerationStructureInstanceKHR staticInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMotionInstanceNV
{
	public VkAccelerationStructureMotionInstanceTypeNV type;
	public VkAccelerationStructureMotionInstanceFlagsNV flags;
	public VkAccelerationStructureMotionInstanceDataNV data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingMotionBlur;
	public VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;

	public static VkPhysicalDeviceRayTracingMotionBlurFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingMotionBlurFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingMotionBlurFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 ycbcr2plane444Formats;

	public static VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMapDeferred;

	public static VkPhysicalDeviceFragmentDensityMap2FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMap2FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMap2FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subsampledLoads;
	public VkBool32 subsampledCoarseReconstructionEarlyAccess;
	public uint maxSubsampledArrayLayers;
	public uint maxDescriptorSetSubsampledSamplers;

	public static VkPhysicalDeviceFragmentDensityMap2PropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMap2PropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMap2PropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyCommandTransformInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;

	public static VkCopyCommandTransformInfoQCOM New()
	{
		Unsafe.SkipInit(out VkCopyCommandTransformInfoQCOM instance);
		instance.sType = VkStructureType.CopyCommandTransformInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageCompressionControlFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imageCompressionControl;

	public static VkPhysicalDeviceImageCompressionControlFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageCompressionControlFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageCompressionControlFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCompressionControlEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCompressionFlagsEXT flags;
	public uint compressionControlPlaneCount;
	public unsafe VkImageCompressionFixedRateFlagsEXT* pFixedRateFlags;

	public static VkImageCompressionControlEXT New()
	{
		Unsafe.SkipInit(out VkImageCompressionControlEXT instance);
		instance.sType = VkStructureType.ImageCompressionControlEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubresourceLayout2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubresourceLayout subresourceLayout;

	public static VkSubresourceLayout2EXT New()
	{
		Unsafe.SkipInit(out VkSubresourceLayout2EXT instance);
		instance.sType = VkStructureType.SubresourceLayout2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresource2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresource imageSubresource;

	public static VkImageSubresource2EXT New()
	{
		Unsafe.SkipInit(out VkImageSubresource2EXT instance);
		instance.sType = VkStructureType.ImageSubresource2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCompressionPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCompressionFlagsEXT imageCompressionFlags;
	public VkImageCompressionFixedRateFlagsEXT imageCompressionFixedRateFlags;

	public static VkImageCompressionPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkImageCompressionPropertiesEXT instance);
		instance.sType = VkStructureType.ImageCompressionPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 attachmentFeedbackLoopLayout;

	public static VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice4444FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 formatA4R4G4B4;
	public VkBool32 formatA4B4G4R4;

	public static VkPhysicalDevice4444FormatsFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevice4444FormatsFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevice4444FormatsFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFaultFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceFault;
	public VkBool32 deviceFaultVendorBinary;

	public static VkPhysicalDeviceFaultFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFaultFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceFaultFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceFaultCountsEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint addressInfoCount;
	public uint vendorInfoCount;
	public ulong vendorBinarySize;

	public static VkDeviceFaultCountsEXT New()
	{
		Unsafe.SkipInit(out VkDeviceFaultCountsEXT instance);
		instance.sType = VkStructureType.DeviceFaultCountsEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceFaultAddressInfoEXT
{
	public VkDeviceFaultAddressTypeEXT addressType;
	public ulong reportedAddress;
	public ulong addressPrecision;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceFaultVendorInfoEXT
{
	public unsafe fixed sbyte description[256];
	public ulong vendorFaultCode;
	public ulong vendorFaultData;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceFaultInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed sbyte description[256];
	public unsafe VkDeviceFaultAddressInfoEXT* pAddressInfos;
	public unsafe VkDeviceFaultVendorInfoEXT* pVendorInfos;
	public unsafe void* pVendorBinaryData;

	public static VkDeviceFaultInfoEXT New()
	{
		Unsafe.SkipInit(out VkDeviceFaultInfoEXT instance);
		instance.sType = VkStructureType.DeviceFaultInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
{
	public uint headerSize;
	public VkDeviceFaultVendorBinaryHeaderVersionEXT headerVersion;
	public uint vendorID;
	public uint deviceID;
	public uint driverVersion;
	public unsafe fixed byte pipelineCacheUUID[16];
	public uint applicationNameOffset;
	public VkVersion applicationVersion;
	public uint engineNameOffset;
	public VkVersion engineVersion;
	public VkVersion apiVersion;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rasterizationOrderColorAttachmentAccess;
	public VkBool32 rasterizationOrderDepthAttachmentAccess;
	public VkBool32 rasterizationOrderStencilAttachmentAccess;

	public static VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 formatRgba10x6WithoutYCbCrSampler;

	public static VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceRGBA10X6FormatsFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 mutableDescriptorType;

	public static VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMutableDescriptorTypeFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMutableDescriptorTypeListEXT
{
	public uint descriptorTypeCount;
	public unsafe VkDescriptorType* pDescriptorTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMutableDescriptorTypeCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint mutableDescriptorTypeListCount;
	public unsafe VkMutableDescriptorTypeListEXT* pMutableDescriptorTypeLists;

	public static VkMutableDescriptorTypeCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkMutableDescriptorTypeCreateInfoEXT instance);
		instance.sType = VkStructureType.MutableDescriptorTypeCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vertexInputDynamicState;

	public static VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceVertexInputDynamicStateFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDescription2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
	public uint divisor;

	public static VkVertexInputBindingDescription2EXT New()
	{
		Unsafe.SkipInit(out VkVertexInputBindingDescription2EXT instance);
		instance.sType = VkStructureType.VertexInputBindingDescription2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputAttributeDescription2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;

	public static VkVertexInputAttributeDescription2EXT New()
	{
		Unsafe.SkipInit(out VkVertexInputAttributeDescription2EXT instance);
		instance.sType = VkStructureType.VertexInputAttributeDescription2EXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDrmPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 hasPrimary;
	public VkBool32 hasRender;
	public long primaryMajor;
	public long primaryMinor;
	public long renderMajor;
	public long renderMinor;

	public static VkPhysicalDeviceDrmPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDrmPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDrmPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 reportAddressBinding;

	public static VkPhysicalDeviceAddressBindingReportFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceAddressBindingReportFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceAddressBindingReportFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceAddressBindingCallbackDataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceAddressBindingFlagsEXT flags;
	public ulong baseAddress;
	public ulong size;
	public VkDeviceAddressBindingTypeEXT bindingType;

	public static VkDeviceAddressBindingCallbackDataEXT New()
	{
		Unsafe.SkipInit(out VkDeviceAddressBindingCallbackDataEXT instance);
		instance.sType = VkStructureType.DeviceAddressBindingCallbackDataEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 depthClipControl;

	public static VkPhysicalDeviceDepthClipControlFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDepthClipControlFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDepthClipControlFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 negativeOneToOne;

	public static VkPipelineViewportDepthClipControlCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineViewportDepthClipControlCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineViewportDepthClipControlCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 primitiveTopologyListRestart;
	public VkBool32 primitiveTopologyPatchListRestart;

	public static VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;

	public static VkSubpassShadingPipelineCreateInfoHUAWEI New()
	{
		Unsafe.SkipInit(out VkSubpassShadingPipelineCreateInfoHUAWEI instance);
		instance.sType = VkStructureType.SubpassShadingPipelineCreateInfoHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subpassShading;

	public static VkPhysicalDeviceSubpassShadingFeaturesHUAWEI New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubpassShadingFeaturesHUAWEI instance);
		instance.sType = VkStructureType.PhysicalDeviceSubpassShadingFeaturesHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxSubpassShadingWorkgroupSizeAspectRatio;

	public static VkPhysicalDeviceSubpassShadingPropertiesHUAWEI New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubpassShadingPropertiesHUAWEI instance);
		instance.sType = VkStructureType.PhysicalDeviceSubpassShadingPropertiesHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 invocationMask;

	public static VkPhysicalDeviceInvocationMaskFeaturesHUAWEI New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceInvocationMaskFeaturesHUAWEI instance);
		instance.sType = VkStructureType.PhysicalDeviceInvocationMaskFeaturesHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetRemoteAddressInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;

	public static VkMemoryGetRemoteAddressInfoNV New()
	{
		Unsafe.SkipInit(out VkMemoryGetRemoteAddressInfoNV instance);
		instance.sType = VkStructureType.MemoryGetRemoteAddressInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 externalMemoryRDMA;

	public static VkPhysicalDeviceExternalMemoryRDMAFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExternalMemoryRDMAFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceExternalMemoryRDMAFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelinePropertiesIdentifierEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte pipelineIdentifier[16];

	public static VkPipelinePropertiesIdentifierEXT New()
	{
		Unsafe.SkipInit(out VkPipelinePropertiesIdentifierEXT instance);
		instance.sType = VkStructureType.PipelinePropertiesIdentifierEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelinePropertiesIdentifier;

	public static VkPhysicalDevicePipelinePropertiesFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelinePropertiesFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePipelinePropertiesFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multisampledRenderToSingleSampled;

	public static VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassResolvePerformanceQueryEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 optimal;

	public static VkSubpassResolvePerformanceQueryEXT New()
	{
		Unsafe.SkipInit(out VkSubpassResolvePerformanceQueryEXT instance);
		instance.sType = VkStructureType.SubpassResolvePerformanceQueryEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultisampledRenderToSingleSampledInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multisampledRenderToSingleSampledEnable;
	public VkSampleCountFlags rasterizationSamples;

	public static VkMultisampledRenderToSingleSampledInfoEXT New()
	{
		Unsafe.SkipInit(out VkMultisampledRenderToSingleSampledInfoEXT instance);
		instance.sType = VkStructureType.MultisampledRenderToSingleSampledInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 extendedDynamicState2;
	public VkBool32 extendedDynamicState2LogicOp;
	public VkBool32 extendedDynamicState2PatchControlPoints;

	public static VkPhysicalDeviceExtendedDynamicState2FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExtendedDynamicState2FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceExtendedDynamicState2FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 colorWriteEnable;

	public static VkPhysicalDeviceColorWriteEnableFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceColorWriteEnableFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceColorWriteEnableFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorWriteCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentCount;
	public unsafe VkBool32* pColorWriteEnables;

	public static VkPipelineColorWriteCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineColorWriteCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineColorWriteCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 primitivesGeneratedQuery;
	public VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
	public VkBool32 primitivesGeneratedQueryWithNonZeroStreams;

	public static VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 minLod;

	public static VkPhysicalDeviceImageViewMinLodFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageViewMinLodFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageViewMinLodFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewMinLodCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float minLod;

	public static VkImageViewMinLodCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageViewMinLodCreateInfoEXT instance);
		instance.sType = VkStructureType.ImageViewMinLodCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiDraw;

	public static VkPhysicalDeviceMultiDrawFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiDrawFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiDrawFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxMultiDrawCount;

	public static VkPhysicalDeviceMultiDrawPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiDrawPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiDrawPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiDrawInfoEXT
{
	public uint firstVertex;
	public uint vertexCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiDrawIndexedInfoEXT
{
	public uint firstIndex;
	public uint indexCount;
	public int vertexOffset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 image2DViewOf3D;
	public VkBool32 sampler2DViewOf3D;

	public static VkPhysicalDeviceImage2DViewOf3DFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImage2DViewOf3DFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImage2DViewOf3DFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderTileImageFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderTileImageColorReadAccess;
	public VkBool32 shaderTileImageDepthReadAccess;
	public VkBool32 shaderTileImageStencilReadAccess;

	public static VkPhysicalDeviceShaderTileImageFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderTileImageFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderTileImageFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderTileImagePropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderTileImageCoherentReadAccelerated;
	public VkBool32 shaderTileImageReadSampleFromPixelRateInvocation;
	public VkBool32 shaderTileImageReadFromHelperInvocation;

	public static VkPhysicalDeviceShaderTileImagePropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderTileImagePropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderTileImagePropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapUsageEXT
{
	public uint count;
	public uint subdivisionLevel;
	public uint format;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkDeviceOrHostAddressKHR
{
	[FieldOffset(0)]
	public ulong deviceAddress;
	[FieldOffset(0)]
	public unsafe void* hostAddress;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapBuildInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMicromapTypeEXT type;
	public VkBuildMicromapFlagsEXT flags;
	public VkBuildMicromapModeEXT mode;
	public VkMicromapEXT dstMicromap;
	public uint usageCountsCount;
	public unsafe VkMicromapUsageEXT* pUsageCounts;
	public unsafe VkMicromapUsageEXT** ppUsageCounts;
	public VkDeviceOrHostAddressConstKHR data;
	public VkDeviceOrHostAddressKHR scratchData;
	public VkDeviceOrHostAddressConstKHR triangleArray;
	public ulong triangleArrayStride;

	public static VkMicromapBuildInfoEXT New()
	{
		Unsafe.SkipInit(out VkMicromapBuildInfoEXT instance);
		instance.sType = VkStructureType.MicromapBuildInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMicromapCreateFlagsEXT createFlags;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkMicromapTypeEXT type;
	public ulong deviceAddress;

	public static VkMicromapCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkMicromapCreateInfoEXT instance);
		instance.sType = VkStructureType.MicromapCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 micromap;
	public VkBool32 micromapCaptureReplay;
	public VkBool32 micromapHostCommands;

	public static VkPhysicalDeviceOpacityMicromapFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceOpacityMicromapFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceOpacityMicromapFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxOpacity2StateSubdivisionLevel;
	public uint maxOpacity4StateSubdivisionLevel;

	public static VkPhysicalDeviceOpacityMicromapPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceOpacityMicromapPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceOpacityMicromapPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapVersionInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pVersionData;

	public static VkMicromapVersionInfoEXT New()
	{
		Unsafe.SkipInit(out VkMicromapVersionInfoEXT instance);
		instance.sType = VkStructureType.MicromapVersionInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMicromapToMemoryInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMicromapEXT src;
	public VkDeviceOrHostAddressKHR dst;
	public VkCopyMicromapModeEXT mode;

	public static VkCopyMicromapToMemoryInfoEXT New()
	{
		Unsafe.SkipInit(out VkCopyMicromapToMemoryInfoEXT instance);
		instance.sType = VkStructureType.CopyMicromapToMemoryInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMemoryToMicromapInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR src;
	public VkMicromapEXT dst;
	public VkCopyMicromapModeEXT mode;

	public static VkCopyMemoryToMicromapInfoEXT New()
	{
		Unsafe.SkipInit(out VkCopyMemoryToMicromapInfoEXT instance);
		instance.sType = VkStructureType.CopyMemoryToMicromapInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMicromapInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMicromapEXT src;
	public VkMicromapEXT dst;
	public VkCopyMicromapModeEXT mode;

	public static VkCopyMicromapInfoEXT New()
	{
		Unsafe.SkipInit(out VkCopyMicromapInfoEXT instance);
		instance.sType = VkStructureType.CopyMicromapInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapBuildSizesInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong micromapSize;
	public ulong buildScratchSize;
	public VkBool32 discardable;

	public static VkMicromapBuildSizesInfoEXT New()
	{
		Unsafe.SkipInit(out VkMicromapBuildSizesInfoEXT instance);
		instance.sType = VkStructureType.MicromapBuildSizesInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureTrianglesOpacityMicromapEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexBuffer;
	public ulong indexStride;
	public uint baseTriangle;
	public uint usageCountsCount;
	public unsafe VkMicromapUsageEXT* pUsageCounts;
	public unsafe VkMicromapUsageEXT** ppUsageCounts;
	public VkMicromapEXT micromap;

	public static VkAccelerationStructureTrianglesOpacityMicromapEXT New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureTrianglesOpacityMicromapEXT instance);
		instance.sType = VkStructureType.AccelerationStructureTrianglesOpacityMicromapEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMicromapTriangleEXT
{
	public uint dataOffset;
	public ushort subdivisionLevel;
	public ushort format;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 clustercullingShader;
	public VkBool32 multiviewClusterCullingShader;

	public static VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI instance);
		instance.sType = VkStructureType.PhysicalDeviceClusterCullingShaderFeaturesHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed uint maxWorkGroupCount[3];
	public unsafe fixed uint maxWorkGroupSize[3];
	public uint maxOutputClusterCount;
	public ulong indirectBufferOffsetAlignment;

	public static VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI instance);
		instance.sType = VkStructureType.PhysicalDeviceClusterCullingShaderPropertiesHUAWEI;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 borderColorSwizzle;
	public VkBool32 borderColorSwizzleFromImage;

	public static VkPhysicalDeviceBorderColorSwizzleFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceBorderColorSwizzleFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceBorderColorSwizzleFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkComponentMapping components;
	public VkBool32 srgb;

	public static VkSamplerBorderColorComponentMappingCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkSamplerBorderColorComponentMappingCreateInfoEXT instance);
		instance.sType = VkStructureType.SamplerBorderColorComponentMappingCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pageableDeviceLocalMemory;

	public static VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCorePropertiesARM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint pixelRate;
	public uint texelRate;
	public uint fmaRate;

	public static VkPhysicalDeviceShaderCorePropertiesARM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderCorePropertiesARM instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderCorePropertiesARM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imageSlicedViewOf3D;

	public static VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageSlicedViewOf3DFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewSlicedCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint sliceOffset;
	public uint sliceCount;

	public static VkImageViewSlicedCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkImageViewSlicedCreateInfoEXT instance);
		instance.sType = VkStructureType.ImageViewSlicedCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 descriptorSetHostMapping;

	public static VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE instance);
		instance.sType = VkStructureType.PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetBindingReferenceVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSetLayout descriptorSetLayout;
	public uint binding;

	public static VkDescriptorSetBindingReferenceVALVE New()
	{
		Unsafe.SkipInit(out VkDescriptorSetBindingReferenceVALVE instance);
		instance.sType = VkStructureType.DescriptorSetBindingReferenceVALVE;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutHostMappingInfoVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public nuint descriptorOffset;
	public uint descriptorSize;

	public static VkDescriptorSetLayoutHostMappingInfoVALVE New()
	{
		Unsafe.SkipInit(out VkDescriptorSetLayoutHostMappingInfoVALVE instance);
		instance.sType = VkStructureType.DescriptorSetLayoutHostMappingInfoVALVE;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 depthClampZeroOne;

	public static VkPhysicalDeviceDepthClampZeroOneFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDepthClampZeroOneFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceDepthClampZeroOneFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 nonSeamlessCubeMap;

	public static VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMapOffset;

	public static VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D fragmentDensityOffsetGranularity;

	public static VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint fragmentDensityOffsetCount;
	public unsafe VkOffset2D* pFragmentDensityOffsets;

	public static VkSubpassFragmentDensityMapOffsetEndInfoQCOM New()
	{
		Unsafe.SkipInit(out VkSubpassFragmentDensityMapOffsetEndInfoQCOM instance);
		instance.sType = VkStructureType.SubpassFragmentDensityMapOffsetEndInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMemoryIndirectCommandNV
{
	public ulong srcAddress;
	public ulong dstAddress;
	public ulong size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMemoryToImageIndirectCommandNV
{
	public ulong srcAddress;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 indirectCopy;

	public static VkPhysicalDeviceCopyMemoryIndirectFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCopyMemoryIndirectFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCopyMemoryIndirectFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueueFlags supportedQueues;

	public static VkPhysicalDeviceCopyMemoryIndirectPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceCopyMemoryIndirectPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceCopyMemoryIndirectPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDecompressMemoryRegionNV
{
	public ulong srcAddress;
	public ulong dstAddress;
	public ulong compressedSize;
	public ulong decompressedSize;
	public VkMemoryDecompressionMethodFlagsNV decompressionMethod;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 memoryDecompression;

	public static VkPhysicalDeviceMemoryDecompressionFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMemoryDecompressionFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceMemoryDecompressionFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryDecompressionMethodFlagsNV decompressionMethods;
	public ulong maxDecompressionIndirectCount;

	public static VkPhysicalDeviceMemoryDecompressionPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMemoryDecompressionPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceMemoryDecompressionPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 linearColorAttachment;

	public static VkPhysicalDeviceLinearColorAttachmentFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceLinearColorAttachmentFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceLinearColorAttachmentFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imageCompressionControlSwapchain;

	public static VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewSampleWeightCreateInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOffset2D filterCenter;
	public VkExtent2D filterSize;
	public uint numPhases;

	public static VkImageViewSampleWeightCreateInfoQCOM New()
	{
		Unsafe.SkipInit(out VkImageViewSampleWeightCreateInfoQCOM instance);
		instance.sType = VkStructureType.ImageViewSampleWeightCreateInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageProcessingFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 textureSampleWeighted;
	public VkBool32 textureBoxFilter;
	public VkBool32 textureBlockMatch;

	public static VkPhysicalDeviceImageProcessingFeaturesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageProcessingFeaturesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceImageProcessingFeaturesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageProcessingPropertiesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxWeightFilterPhases;
	public VkExtent2D maxWeightFilterDimension;
	public VkExtent2D maxBlockMatchRegion;
	public VkExtent2D maxBoxFilterBlockSize;

	public static VkPhysicalDeviceImageProcessingPropertiesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceImageProcessingPropertiesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceImageProcessingPropertiesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 extendedDynamicState3TessellationDomainOrigin;
	public VkBool32 extendedDynamicState3DepthClampEnable;
	public VkBool32 extendedDynamicState3PolygonMode;
	public VkBool32 extendedDynamicState3RasterizationSamples;
	public VkBool32 extendedDynamicState3SampleMask;
	public VkBool32 extendedDynamicState3AlphaToCoverageEnable;
	public VkBool32 extendedDynamicState3AlphaToOneEnable;
	public VkBool32 extendedDynamicState3LogicOpEnable;
	public VkBool32 extendedDynamicState3ColorBlendEnable;
	public VkBool32 extendedDynamicState3ColorBlendEquation;
	public VkBool32 extendedDynamicState3ColorWriteMask;
	public VkBool32 extendedDynamicState3RasterizationStream;
	public VkBool32 extendedDynamicState3ConservativeRasterizationMode;
	public VkBool32 extendedDynamicState3ExtraPrimitiveOverestimationSize;
	public VkBool32 extendedDynamicState3DepthClipEnable;
	public VkBool32 extendedDynamicState3SampleLocationsEnable;
	public VkBool32 extendedDynamicState3ColorBlendAdvanced;
	public VkBool32 extendedDynamicState3ProvokingVertexMode;
	public VkBool32 extendedDynamicState3LineRasterizationMode;
	public VkBool32 extendedDynamicState3LineStippleEnable;
	public VkBool32 extendedDynamicState3DepthClipNegativeOneToOne;
	public VkBool32 extendedDynamicState3ViewportWScalingEnable;
	public VkBool32 extendedDynamicState3ViewportSwizzle;
	public VkBool32 extendedDynamicState3CoverageToColorEnable;
	public VkBool32 extendedDynamicState3CoverageToColorLocation;
	public VkBool32 extendedDynamicState3CoverageModulationMode;
	public VkBool32 extendedDynamicState3CoverageModulationTableEnable;
	public VkBool32 extendedDynamicState3CoverageModulationTable;
	public VkBool32 extendedDynamicState3CoverageReductionMode;
	public VkBool32 extendedDynamicState3RepresentativeFragmentTestEnable;
	public VkBool32 extendedDynamicState3ShadingRateImageEnable;

	public static VkPhysicalDeviceExtendedDynamicState3FeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExtendedDynamicState3FeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceExtendedDynamicState3FeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dynamicPrimitiveTopologyUnrestricted;

	public static VkPhysicalDeviceExtendedDynamicState3PropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceExtendedDynamicState3PropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceExtendedDynamicState3PropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkColorBlendEquationEXT
{
	public VkBlendFactor srcColorBlendFactor;
	public VkBlendFactor dstColorBlendFactor;
	public VkBlendOp colorBlendOp;
	public VkBlendFactor srcAlphaBlendFactor;
	public VkBlendFactor dstAlphaBlendFactor;
	public VkBlendOp alphaBlendOp;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkColorBlendAdvancedEXT
{
	public VkBlendOp advancedBlendOp;
	public VkBool32 srcPremultiplied;
	public VkBool32 dstPremultiplied;
	public VkBlendOverlapEXT blendOverlap;
	public VkBool32 clampResults;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subpassMergeFeedback;

	public static VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreationControlEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 disallowMerging;

	public static VkRenderPassCreationControlEXT New()
	{
		Unsafe.SkipInit(out VkRenderPassCreationControlEXT instance);
		instance.sType = VkStructureType.RenderPassCreationControlEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreationFeedbackInfoEXT
{
	public uint postMergeSubpassCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreationFeedbackCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkRenderPassCreationFeedbackInfoEXT* pRenderPassFeedback;

	public static VkRenderPassCreationFeedbackCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkRenderPassCreationFeedbackCreateInfoEXT instance);
		instance.sType = VkStructureType.RenderPassCreationFeedbackCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassSubpassFeedbackInfoEXT
{
	public VkSubpassMergeStatusEXT subpassMergeStatus;
	public unsafe fixed sbyte description[256];
	public uint postMergeIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassSubpassFeedbackCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkRenderPassSubpassFeedbackInfoEXT* pSubpassFeedback;

	public static VkRenderPassSubpassFeedbackCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkRenderPassSubpassFeedbackCreateInfoEXT instance);
		instance.sType = VkStructureType.RenderPassSubpassFeedbackCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDirectDriverLoadingInfoLUNARG
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDirectDriverLoadingModeLUNARG flags;
	public unsafe delegate* unmanaged<VkInstance, sbyte*, IntPtr> pfnGetInstanceProcAddr;

	public static VkDirectDriverLoadingInfoLUNARG New()
	{
		Unsafe.SkipInit(out VkDirectDriverLoadingInfoLUNARG instance);
		instance.sType = VkStructureType.DirectDriverLoadingInfoLUNARG;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDirectDriverLoadingListLUNARG
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDirectDriverLoadingModeLUNARG mode;
	public uint driverCount;
	public unsafe VkDirectDriverLoadingInfoLUNARG* pDrivers;

	public static VkDirectDriverLoadingListLUNARG New()
	{
		Unsafe.SkipInit(out VkDirectDriverLoadingListLUNARG instance);
		instance.sType = VkStructureType.DirectDriverLoadingListLUNARG;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderModuleIdentifier;

	public static VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderModuleIdentifierFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte shaderModuleIdentifierAlgorithmUUID[16];

	public static VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderModuleIdentifierPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint identifierSize;
	public unsafe byte* pIdentifier;

	public static VkPipelineShaderStageModuleIdentifierCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkPipelineShaderStageModuleIdentifierCreateInfoEXT instance);
		instance.sType = VkStructureType.PipelineShaderStageModuleIdentifierCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderModuleIdentifierEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint identifierSize;
	public unsafe fixed byte identifier[32];

	public static VkShaderModuleIdentifierEXT New()
	{
		Unsafe.SkipInit(out VkShaderModuleIdentifierEXT instance);
		instance.sType = VkStructureType.ShaderModuleIdentifierEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceOpticalFlowFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 opticalFlow;

	public static VkPhysicalDeviceOpticalFlowFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceOpticalFlowFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceOpticalFlowFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceOpticalFlowPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOpticalFlowGridSizeFlagsNV supportedOutputGridSizes;
	public VkOpticalFlowGridSizeFlagsNV supportedHintGridSizes;
	public VkBool32 hintSupported;
	public VkBool32 costSupported;
	public VkBool32 bidirectionalFlowSupported;
	public VkBool32 globalFlowSupported;
	public uint minWidth;
	public uint minHeight;
	public uint maxWidth;
	public uint maxHeight;
	public uint maxNumRegionsOfInterest;

	public static VkPhysicalDeviceOpticalFlowPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceOpticalFlowPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceOpticalFlowPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpticalFlowImageFormatInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOpticalFlowUsageFlagsNV usage;

	public static VkOpticalFlowImageFormatInfoNV New()
	{
		Unsafe.SkipInit(out VkOpticalFlowImageFormatInfoNV instance);
		instance.sType = VkStructureType.OpticalFlowImageFormatInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpticalFlowImageFormatPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;

	public static VkOpticalFlowImageFormatPropertiesNV New()
	{
		Unsafe.SkipInit(out VkOpticalFlowImageFormatPropertiesNV instance);
		instance.sType = VkStructureType.OpticalFlowImageFormatPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpticalFlowSessionCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint width;
	public uint height;
	public VkFormat imageFormat;
	public VkFormat flowVectorFormat;
	public VkFormat costFormat;
	public VkOpticalFlowGridSizeFlagsNV outputGridSize;
	public VkOpticalFlowGridSizeFlagsNV hintGridSize;
	public VkOpticalFlowPerformanceLevelNV performanceLevel;
	public VkOpticalFlowSessionCreateFlagsNV flags;

	public static VkOpticalFlowSessionCreateInfoNV New()
	{
		Unsafe.SkipInit(out VkOpticalFlowSessionCreateInfoNV instance);
		instance.sType = VkStructureType.OpticalFlowSessionCreateInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpticalFlowSessionCreatePrivateDataInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint id;
	public uint size;
	public unsafe void* pPrivateData;

	public static VkOpticalFlowSessionCreatePrivateDataInfoNV New()
	{
		Unsafe.SkipInit(out VkOpticalFlowSessionCreatePrivateDataInfoNV instance);
		instance.sType = VkStructureType.OpticalFlowSessionCreatePrivateDataInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOpticalFlowExecuteInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOpticalFlowExecuteFlagsNV flags;
	public uint regionCount;
	public unsafe VkRect2D* pRegions;

	public static VkOpticalFlowExecuteInfoNV New()
	{
		Unsafe.SkipInit(out VkOpticalFlowExecuteInfoNV instance);
		instance.sType = VkStructureType.OpticalFlowExecuteInfoNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 legacyDithering;

	public static VkPhysicalDeviceLegacyDitheringFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceLegacyDitheringFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceLegacyDitheringFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineProtectedAccess;

	public static VkPhysicalDevicePipelineProtectedAccessFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineProtectedAccessFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineProtectedAccessFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderObjectFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderObject;

	public static VkPhysicalDeviceShaderObjectFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderObjectFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderObjectFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderObjectPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte shaderBinaryUUID[16];
	public uint shaderBinaryVersion;

	public static VkPhysicalDeviceShaderObjectPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderObjectPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderObjectPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderCreateFlagsEXT flags;
	public VkShaderStageFlags stage;
	public VkShaderStageFlags nextStage;
	public VkShaderCodeTypeEXT codeType;
	public nuint codeSize;
	public unsafe void* pCode;
	public unsafe sbyte* pName;
	public uint setLayoutCount;
	public unsafe VkDescriptorSetLayout* pSetLayouts;
	public uint pushConstantRangeCount;
	public unsafe VkPushConstantRange* pPushConstantRanges;
	public unsafe VkSpecializationInfo* pSpecializationInfo;

	public static VkShaderCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkShaderCreateInfoEXT instance);
		instance.sType = VkStructureType.ShaderCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 tileProperties;

	public static VkPhysicalDeviceTilePropertiesFeaturesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceTilePropertiesFeaturesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceTilePropertiesFeaturesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTilePropertiesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent3D tileSize;
	public VkExtent2D apronSize;
	public VkOffset2D origin;

	public static VkTilePropertiesQCOM New()
	{
		Unsafe.SkipInit(out VkTilePropertiesQCOM instance);
		instance.sType = VkStructureType.TilePropertiesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 amigoProfiling;

	public static VkPhysicalDeviceAmigoProfilingFeaturesSEC New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceAmigoProfilingFeaturesSEC instance);
		instance.sType = VkStructureType.PhysicalDeviceAmigoProfilingFeaturesSEC;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAmigoProfilingSubmitInfoSEC
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong firstDrawTimestamp;
	public ulong swapBufferTimestamp;

	public static VkAmigoProfilingSubmitInfoSEC New()
	{
		Unsafe.SkipInit(out VkAmigoProfilingSubmitInfoSEC instance);
		instance.sType = VkStructureType.AmigoProfilingSubmitInfoSEC;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiviewPerViewViewports;

	public static VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRayTracingInvocationReorderModeNV rayTracingInvocationReorderReorderingHint;

	public static VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingInvocationReorderPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingInvocationReorder;

	public static VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingInvocationReorderFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderCoreBuiltins;

	public static VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderCoreBuiltinsFeaturesARM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong shaderCoreMask;
	public uint shaderCoreCount;
	public uint shaderWarpsPerCore;

	public static VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM instance);
		instance.sType = VkStructureType.PhysicalDeviceShaderCoreBuiltinsPropertiesARM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineLibraryGroupHandles;

	public static VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiviewPerViewRenderAreas;

	public static VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM instance);
		instance.sType = VkStructureType.PhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint perViewRenderAreaCount;
	public unsafe VkRect2D* pPerViewRenderAreas;

	public static VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM New()
	{
		Unsafe.SkipInit(out VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM instance);
		instance.sType = VkStructureType.MultiviewPerViewRenderAreasRenderPassBeginInfoQCOM;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildRangeInfoKHR
{
	public uint primitiveCount;
	public uint primitiveOffset;
	public uint firstVertex;
	public uint transformOffset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryTrianglesDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat vertexFormat;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public ulong vertexStride;
	public uint maxVertex;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexData;
	public VkDeviceOrHostAddressConstKHR transformData;

	public static VkAccelerationStructureGeometryTrianglesDataKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureGeometryTrianglesDataKHR instance);
		instance.sType = VkStructureType.AccelerationStructureGeometryTrianglesDataKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryAabbsDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR data;
	public ulong stride;

	public static VkAccelerationStructureGeometryAabbsDataKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureGeometryAabbsDataKHR instance);
		instance.sType = VkStructureType.AccelerationStructureGeometryAabbsDataKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryInstancesDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 arrayOfPointers;
	public VkDeviceOrHostAddressConstKHR data;

	public static VkAccelerationStructureGeometryInstancesDataKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureGeometryInstancesDataKHR instance);
		instance.sType = VkStructureType.AccelerationStructureGeometryInstancesDataKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureGeometryDataKHR
{
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryInstancesDataKHR instances;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkAccelerationStructureGeometryDataKHR geometry;
	public VkGeometryFlagsKHR flags;

	public static VkAccelerationStructureGeometryKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureGeometryKHR instance);
		instance.sType = VkStructureType.AccelerationStructureGeometryKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildGeometryInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsKHR flags;
	public VkBuildAccelerationStructureModeKHR mode;
	public VkAccelerationStructureKHR srcAccelerationStructure;
	public VkAccelerationStructureKHR dstAccelerationStructure;
	public uint geometryCount;
	public unsafe VkAccelerationStructureGeometryKHR* pGeometries;
	public unsafe VkAccelerationStructureGeometryKHR** ppGeometries;
	public VkDeviceOrHostAddressKHR scratchData;

	public static VkAccelerationStructureBuildGeometryInfoKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureBuildGeometryInfoKHR instance);
		instance.sType = VkStructureType.AccelerationStructureBuildGeometryInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureCreateFlagsKHR createFlags;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkAccelerationStructureTypeKHR type;
	public ulong deviceAddress;

	public static VkAccelerationStructureCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureCreateInfoKHR instance);
		instance.sType = VkStructureType.AccelerationStructureCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetAccelerationStructureKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint accelerationStructureCount;
	public unsafe VkAccelerationStructureKHR* pAccelerationStructures;

	public static VkWriteDescriptorSetAccelerationStructureKHR New()
	{
		Unsafe.SkipInit(out VkWriteDescriptorSetAccelerationStructureKHR instance);
		instance.sType = VkStructureType.WriteDescriptorSetAccelerationStructureKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 accelerationStructure;
	public VkBool32 accelerationStructureCaptureReplay;
	public VkBool32 accelerationStructureIndirectBuild;
	public VkBool32 accelerationStructureHostCommands;
	public VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;

	public static VkPhysicalDeviceAccelerationStructureFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceAccelerationStructureFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceAccelerationStructureFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxPrimitiveCount;
	public uint maxPerStageDescriptorAccelerationStructures;
	public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
	public uint maxDescriptorSetAccelerationStructures;
	public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
	public uint minAccelerationStructureScratchOffsetAlignment;

	public static VkPhysicalDeviceAccelerationStructurePropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceAccelerationStructurePropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceAccelerationStructurePropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureDeviceAddressInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;

	public static VkAccelerationStructureDeviceAddressInfoKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureDeviceAddressInfoKHR instance);
		instance.sType = VkStructureType.AccelerationStructureDeviceAddressInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureVersionInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pVersionData;

	public static VkAccelerationStructureVersionInfoKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureVersionInfoKHR instance);
		instance.sType = VkStructureType.AccelerationStructureVersionInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyAccelerationStructureToMemoryInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR src;
	public VkDeviceOrHostAddressKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public static VkCopyAccelerationStructureToMemoryInfoKHR New()
	{
		Unsafe.SkipInit(out VkCopyAccelerationStructureToMemoryInfoKHR instance);
		instance.sType = VkStructureType.CopyAccelerationStructureToMemoryInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMemoryToAccelerationStructureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public static VkCopyMemoryToAccelerationStructureInfoKHR New()
	{
		Unsafe.SkipInit(out VkCopyMemoryToAccelerationStructureInfoKHR instance);
		instance.sType = VkStructureType.CopyMemoryToAccelerationStructureInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyAccelerationStructureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;

	public static VkCopyAccelerationStructureInfoKHR New()
	{
		Unsafe.SkipInit(out VkCopyAccelerationStructureInfoKHR instance);
		instance.sType = VkStructureType.CopyAccelerationStructureInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildSizesInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong accelerationStructureSize;
	public ulong updateScratchSize;
	public ulong buildScratchSize;

	public static VkAccelerationStructureBuildSizesInfoKHR New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureBuildSizesInfoKHR instance);
		instance.sType = VkStructureType.AccelerationStructureBuildSizesInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingShaderGroupCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;
	public unsafe void* pShaderGroupCaptureReplayHandle;

	public static VkRayTracingShaderGroupCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkRayTracingShaderGroupCreateInfoKHR instance);
		instance.sType = VkStructureType.RayTracingShaderGroupCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPipelineRayPayloadSize;
	public uint maxPipelineRayHitAttributeSize;

	public static VkRayTracingPipelineInterfaceCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkRayTracingPipelineInterfaceCreateInfoKHR instance);
		instance.sType = VkStructureType.RayTracingPipelineInterfaceCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public unsafe VkRayTracingShaderGroupCreateInfoKHR* pGroups;
	public uint maxPipelineRayRecursionDepth;
	public unsafe VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
	public unsafe VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
	public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;

	public static VkRayTracingPipelineCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkRayTracingPipelineCreateInfoKHR instance);
		instance.sType = VkStructureType.RayTracingPipelineCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingPipeline;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
	public VkBool32 rayTracingPipelineTraceRaysIndirect;
	public VkBool32 rayTraversalPrimitiveCulling;

	public static VkPhysicalDeviceRayTracingPipelineFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingPipelineFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingPipelineFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRayRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public uint shaderGroupHandleCaptureReplaySize;
	public uint maxRayDispatchInvocationCount;
	public uint shaderGroupHandleAlignment;
	public uint maxRayHitAttributeSize;

	public static VkPhysicalDeviceRayTracingPipelinePropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayTracingPipelinePropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceRayTracingPipelinePropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkStridedDeviceAddressRegionKHR
{
	public ulong deviceAddress;
	public ulong stride;
	public ulong size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTraceRaysIndirectCommandKHR
{
	public uint width;
	public uint height;
	public uint depth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayQuery;

	public static VkPhysicalDeviceRayQueryFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceRayQueryFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDeviceRayQueryFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 taskShader;
	public VkBool32 meshShader;
	public VkBool32 multiviewMeshShader;
	public VkBool32 primitiveFragmentShadingRateMeshShader;
	public VkBool32 meshShaderQueries;

	public static VkPhysicalDeviceMeshShaderFeaturesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMeshShaderFeaturesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxTaskWorkGroupTotalCount;
	public unsafe fixed uint maxTaskWorkGroupCount[3];
	public uint maxTaskWorkGroupInvocations;
	public unsafe fixed uint maxTaskWorkGroupSize[3];
	public uint maxTaskPayloadSize;
	public uint maxTaskSharedMemorySize;
	public uint maxTaskPayloadAndSharedMemorySize;
	public uint maxMeshWorkGroupTotalCount;
	public unsafe fixed uint maxMeshWorkGroupCount[3];
	public uint maxMeshWorkGroupInvocations;
	public unsafe fixed uint maxMeshWorkGroupSize[3];
	public uint maxMeshSharedMemorySize;
	public uint maxMeshPayloadAndSharedMemorySize;
	public uint maxMeshOutputMemorySize;
	public uint maxMeshPayloadAndOutputMemorySize;
	public uint maxMeshOutputComponents;
	public uint maxMeshOutputVertices;
	public uint maxMeshOutputPrimitives;
	public uint maxMeshOutputLayers;
	public uint maxMeshMultiviewViewCount;
	public uint meshOutputPerVertexGranularity;
	public uint meshOutputPerPrimitiveGranularity;
	public uint maxPreferredTaskWorkGroupInvocations;
	public uint maxPreferredMeshWorkGroupInvocations;
	public VkBool32 prefersLocalInvocationVertexOutput;
	public VkBool32 prefersLocalInvocationPrimitiveOutput;
	public VkBool32 prefersCompactVertexOutput;
	public VkBool32 prefersCompactPrimitiveOutput;

	public static VkPhysicalDeviceMeshShaderPropertiesEXT New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceMeshShaderPropertiesEXT instance);
		instance.sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawMeshTasksIndirectCommandEXT
{
	public uint groupCountX;
	public uint groupCountY;
	public uint groupCountZ;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidSurfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAndroidSurfaceCreateFlagsKHR flags;
	public IntPtr window;

	public static VkAndroidSurfaceCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkAndroidSurfaceCreateInfoKHR instance);
		instance.sType = VkStructureType.AndroidSurfaceCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferUsageANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong androidHardwareBufferUsage;

	public static VkAndroidHardwareBufferUsageANDROID New()
	{
		Unsafe.SkipInit(out VkAndroidHardwareBufferUsageANDROID instance);
		instance.sType = VkStructureType.AndroidHardwareBufferUsageAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferPropertiesANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong allocationSize;
	public uint memoryTypeBits;

	public static VkAndroidHardwareBufferPropertiesANDROID New()
	{
		Unsafe.SkipInit(out VkAndroidHardwareBufferPropertiesANDROID instance);
		instance.sType = VkStructureType.AndroidHardwareBufferPropertiesAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;

	public static VkAndroidHardwareBufferFormatPropertiesANDROID New()
	{
		Unsafe.SkipInit(out VkAndroidHardwareBufferFormatPropertiesANDROID instance);
		instance.sType = VkStructureType.AndroidHardwareBufferFormatPropertiesAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportAndroidHardwareBufferInfoANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe IntPtr* buffer;

	public static VkImportAndroidHardwareBufferInfoANDROID New()
	{
		Unsafe.SkipInit(out VkImportAndroidHardwareBufferInfoANDROID instance);
		instance.sType = VkStructureType.ImportAndroidHardwareBufferInfoAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;

	public static VkMemoryGetAndroidHardwareBufferInfoANDROID New()
	{
		Unsafe.SkipInit(out VkMemoryGetAndroidHardwareBufferInfoANDROID instance);
		instance.sType = VkStructureType.MemoryGetAndroidHardwareBufferInfoAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalFormatANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong externalFormat;

	public static VkExternalFormatANDROID New()
	{
		Unsafe.SkipInit(out VkExternalFormatANDROID instance);
		instance.sType = VkStructureType.ExternalFormatAndroid;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferFormatProperties2ANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags2 formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;

	public static VkAndroidHardwareBufferFormatProperties2ANDROID New()
	{
		Unsafe.SkipInit(out VkAndroidHardwareBufferFormatProperties2ANDROID instance);
		instance.sType = VkStructureType.AndroidHardwareBufferFormatProperties2Android;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIOSSurfaceCreateInfoMVK
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIOSSurfaceCreateFlagsMVK flags;
	public unsafe void* pView;

	public static VkIOSSurfaceCreateInfoMVK New()
	{
		Unsafe.SkipInit(out VkIOSSurfaceCreateInfoMVK instance);
		instance.sType = VkStructureType.IOSSurfaceCreateInfoMVK;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMacOSSurfaceCreateInfoMVK
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMacOSSurfaceCreateFlagsMVK flags;
	public unsafe void* pView;

	public static VkMacOSSurfaceCreateInfoMVK New()
	{
		Unsafe.SkipInit(out VkMacOSSurfaceCreateInfoMVK instance);
		instance.sType = VkStructureType.MacOSSurfaceCreateInfoMVK;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMetalSurfaceCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMetalSurfaceCreateFlagsEXT flags;
	public IntPtr pLayer;

	public static VkMetalSurfaceCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkMetalSurfaceCreateInfoEXT instance);
		instance.sType = VkStructureType.MetalSurfaceCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalObjectCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExportMetalObjectTypeFlagsEXT exportObjectType;

	public static VkExportMetalObjectCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalObjectCreateInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalObjectCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalObjectsInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;

	public static VkExportMetalObjectsInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalObjectsInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalObjectsInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalDeviceInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public MTLDevice_id mtlDevice;

	public static VkExportMetalDeviceInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalDeviceInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalDeviceInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalCommandQueueInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueue queue;
	public MTLCommandQueue_id mtlCommandQueue;

	public static VkExportMetalCommandQueueInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalCommandQueueInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalCommandQueueInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalBufferInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public MTLBuffer_id mtlBuffer;

	public static VkExportMetalBufferInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalBufferInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalBufferInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMetalBufferInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public MTLBuffer_id mtlBuffer;

	public static VkImportMetalBufferInfoEXT New()
	{
		Unsafe.SkipInit(out VkImportMetalBufferInfoEXT instance);
		instance.sType = VkStructureType.ImportMetalBufferInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalTextureInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkImageView imageView;
	public VkBufferView bufferView;
	public VkImageAspectFlags plane;
	public MTLTexture_id mtlTexture;

	public static VkExportMetalTextureInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalTextureInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalTextureInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMetalTextureInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageAspectFlags plane;
	public MTLTexture_id mtlTexture;

	public static VkImportMetalTextureInfoEXT New()
	{
		Unsafe.SkipInit(out VkImportMetalTextureInfoEXT instance);
		instance.sType = VkStructureType.ImportMetalTextureInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalIOSurfaceInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public IOSurfaceRef ioSurface;

	public static VkExportMetalIOSurfaceInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalIOSurfaceInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalIOSurfaceInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMetalIOSurfaceInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public IOSurfaceRef ioSurface;

	public static VkImportMetalIOSurfaceInfoEXT New()
	{
		Unsafe.SkipInit(out VkImportMetalIOSurfaceInfoEXT instance);
		instance.sType = VkStructureType.ImportMetalIOSurfaceInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMetalSharedEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public VkEvent @event;
	public MTLSharedEvent_id mtlSharedEvent;

	public static VkExportMetalSharedEventInfoEXT New()
	{
		Unsafe.SkipInit(out VkExportMetalSharedEventInfoEXT instance);
		instance.sType = VkStructureType.ExportMetalSharedEventInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMetalSharedEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public MTLSharedEvent_id mtlSharedEvent;

	public static VkImportMetalSharedEventInfoEXT New()
	{
		Unsafe.SkipInit(out VkImportMetalSharedEventInfoEXT instance);
		instance.sType = VkStructureType.ImportMetalSharedEventInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViSurfaceCreateInfoNN
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkViSurfaceCreateFlagsNN flags;
	public unsafe void* window;

	public static VkViSurfaceCreateInfoNN New()
	{
		Unsafe.SkipInit(out VkViSurfaceCreateInfoNN instance);
		instance.sType = VkStructureType.ViSurfaceCreateInfoNN;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePortabilitySubsetFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 constantAlphaColorBlendFactors;
	public VkBool32 events;
	public VkBool32 imageViewFormatReinterpretation;
	public VkBool32 imageViewFormatSwizzle;
	public VkBool32 imageView2DOn3DImage;
	public VkBool32 multisampleArrayImage;
	public VkBool32 mutableComparisonSamplers;
	public VkBool32 pointPolygons;
	public VkBool32 samplerMipLodBias;
	public VkBool32 separateStencilMaskRef;
	public VkBool32 shaderSampleRateInterpolationFunctions;
	public VkBool32 tessellationIsolines;
	public VkBool32 tessellationPointMode;
	public VkBool32 triangleFans;
	public VkBool32 vertexAttributeAccessBeyondStride;

	public static VkPhysicalDevicePortabilitySubsetFeaturesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePortabilitySubsetFeaturesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePortabilitySubsetFeaturesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePortabilitySubsetPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minVertexInputBindingStrideAlignment;

	public static VkPhysicalDevicePortabilitySubsetPropertiesKHR New()
	{
		Unsafe.SkipInit(out VkPhysicalDevicePortabilitySubsetPropertiesKHR instance);
		instance.sType = VkStructureType.PhysicalDevicePortabilitySubsetPropertiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeFlagsKHR flags;
	public uint qualityLevel;
	public VkBuffer dstBuffer;
	public ulong dstBufferOffset;
	public ulong dstBufferRange;
	public VkVideoPictureResourceInfoKHR srcPictureResource;
	public unsafe VkVideoReferenceSlotInfoKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotInfoKHR* pReferenceSlots;
	public uint precedingExternallyEncodedBytes;

	public static VkVideoEncodeInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoEncodeInfoKHR instance);
		instance.sType = VkStructureType.VideoEncodeInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeCapabilityFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
	public uint maxRateControlLayers;
	public uint maxQualityLevels;
	public VkExtent2D inputImageDataFillAlignment;
	public VkVideoEncodeFeedbackFlagsKHR supportedEncodeFeedbackFlags;

	public static VkVideoEncodeCapabilitiesKHR New()
	{
		Unsafe.SkipInit(out VkVideoEncodeCapabilitiesKHR instance);
		instance.sType = VkStructureType.VideoEncodeCapabilitiesKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolVideoEncodeFeedbackCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeFeedbackFlagsKHR encodeFeedbackFlags;

	public static VkQueryPoolVideoEncodeFeedbackCreateInfoKHR New()
	{
		Unsafe.SkipInit(out VkQueryPoolVideoEncodeFeedbackCreateInfoKHR instance);
		instance.sType = VkStructureType.QueryPoolVideoEncodeFeedbackCreateInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeUsageInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeUsageFlagsKHR videoUsageHints;
	public VkVideoEncodeContentFlagsKHR videoContentHints;
	public VkVideoEncodeTuningModeKHR tuningMode;

	public static VkVideoEncodeUsageInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoEncodeUsageInfoKHR instance);
		instance.sType = VkStructureType.VideoEncodeUsageInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeRateControlLayerInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong averageBitrate;
	public ulong maxBitrate;
	public uint frameRateNumerator;
	public uint frameRateDenominator;
	public uint virtualBufferSizeInMs;
	public uint initialVirtualBufferSizeInMs;

	public static VkVideoEncodeRateControlLayerInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoEncodeRateControlLayerInfoKHR instance);
		instance.sType = VkStructureType.VideoEncodeRateControlLayerInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeRateControlInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeRateControlFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlMode;
	public uint layerCount;
	public unsafe VkVideoEncodeRateControlLayerInfoKHR* pLayers;

	public static VkVideoEncodeRateControlInfoKHR New()
	{
		Unsafe.SkipInit(out VkVideoEncodeRateControlInfoKHR instance);
		instance.sType = VkStructureType.VideoEncodeRateControlInfoKHR;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264WeightTableFlags
{
	public uint luma_weight_l0_flag;
	public uint chroma_weight_l0_flag;
	public uint luma_weight_l1_flag;
	public uint chroma_weight_l1_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264WeightTable
{
	public StdVideoEncodeH264WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public byte chroma_log2_weight_denom;
	public unsafe fixed sbyte luma_weight_l0[32];
	public unsafe fixed sbyte luma_offset_l0[32];
	public unsafe fixed sbyte chroma_weight_l0[32 * 2];
	public unsafe fixed sbyte chroma_offset_l0[32 * 2];
	public unsafe fixed sbyte luma_weight_l1[32];
	public unsafe fixed sbyte luma_offset_l1[32];
	public unsafe fixed sbyte chroma_weight_l1[32 * 2];
	public unsafe fixed sbyte chroma_offset_l1[32 * 2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264SliceHeaderFlags
{
	public uint direct_spatial_mv_pred_flag;
	public uint num_ref_idx_active_override_flag;
	public uint no_output_of_prior_pics_flag;
	public uint adaptive_ref_pic_marking_mode_flag;
	public uint no_prior_references_available_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264PictureInfoFlags
{
	public uint idr_flag;
	public uint is_reference_flag;
	public uint used_for_long_term_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceListsInfoFlags
{
	public uint ref_pic_list_modification_flag_l0;
	public uint ref_pic_list_modification_flag_l1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefListModEntry
{
	public StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	public ushort abs_diff_pic_num_minus1;
	public ushort long_term_pic_num;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefPicMarkingEntry
{
	public StdVideoH264MemMgmtControlOp operation;
	public ushort difference_of_pic_nums_minus1;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
	public ushort max_long_term_frame_idx_plus1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceListsInfo
{
	public StdVideoEncodeH264ReferenceListsInfoFlags flags;
	public byte refPicList0EntryCount;
	public byte refPicList1EntryCount;
	public byte refList0ModOpCount;
	public byte refList1ModOpCount;
	public byte refPicMarkingOpCount;
	public unsafe fixed byte reserved1[7];
	public unsafe byte* pRefPicList0Entries;
	public unsafe byte* pRefPicList1Entries;
	public unsafe StdVideoEncodeH264RefListModEntry* pRefList0ModOperations;
	public unsafe StdVideoEncodeH264RefListModEntry* pRefList1ModOperations;
	public unsafe StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264PictureInfo
{
	public StdVideoEncodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public ushort reserved1;
	public StdVideoH264PictureType pictureType;
	public uint frame_num;
	public int PicOrderCnt;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceInfo
{
	public StdVideoEncodeH264ReferenceInfoFlags flags;
	public StdVideoH264PictureType pictureType;
	public uint FrameNum;
	public int PicOrderCnt;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264SliceHeader
{
	public StdVideoEncodeH264SliceHeaderFlags flags;
	public uint first_mb_in_slice;
	public StdVideoH264SliceType slice_type;
	public ushort idr_pic_id;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public StdVideoH264CabacInitIdc cabac_init_idc;
	public StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	public sbyte slice_alpha_c0_offset_div2;
	public sbyte slice_beta_offset_div2;
	public ushort reserved1;
	public uint reserved2;
	public unsafe StdVideoEncodeH264WeightTable* pWeightTable;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeH264CapabilityFlagsEXT flags;
	public uint maxPPictureL0ReferenceCount;
	public uint maxBPictureL0ReferenceCount;
	public uint maxL1ReferenceCount;
	public VkBool32 motionVectorsOverPicBoundariesFlag;
	public uint maxBytesPerPicDenom;
	public uint maxBitsPerMbDenom;
	public uint log2MaxMvLengthHorizontal;
	public uint log2MaxMvLengthVertical;

	public static VkVideoEncodeH264CapabilitiesEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264CapabilitiesEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264CapabilitiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stdSPSCount;
	public unsafe StdVideoH264SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public unsafe StdVideoH264PictureParameterSet* pStdPPSs;

	public static VkVideoEncodeH264SessionParametersAddInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264SessionParametersAddInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264SessionParametersAddInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public unsafe VkVideoEncodeH264SessionParametersAddInfoEXT* pParametersAddInfo;

	public static VkVideoEncodeH264SessionParametersCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264SessionParametersCreateInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264SessionParametersCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264NaluSliceInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint mbCount;
	public unsafe StdVideoEncodeH264ReferenceListsInfo* pStdReferenceFinalLists;
	public unsafe StdVideoEncodeH264SliceHeader* pStdSliceHeader;

	public static VkVideoEncodeH264NaluSliceInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264NaluSliceInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264NaluSliceInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264VclFrameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoEncodeH264ReferenceListsInfo* pStdReferenceFinalLists;
	public uint naluSliceEntryCount;
	public unsafe VkVideoEncodeH264NaluSliceInfoEXT* pNaluSliceEntries;
	public unsafe StdVideoEncodeH264PictureInfo* pStdPictureInfo;

	public static VkVideoEncodeH264VclFrameInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264VclFrameInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264VclFrameInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;

	public static VkVideoEncodeH264DpbSlotInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264DpbSlotInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264DpbSlotInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264ProfileInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;

	public static VkVideoEncodeH264ProfileInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264ProfileInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264ProfileInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264RateControlInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public VkVideoEncodeH264RateControlStructureEXT rateControlStructure;
	public uint temporalLayerCount;

	public static VkVideoEncodeH264RateControlInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264RateControlInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264RateControlInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264QpEXT
{
	public int qpI;
	public int qpP;
	public int qpB;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264FrameSizeEXT
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264RateControlLayerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint temporalLayerId;
	public VkBool32 useInitialRcQp;
	public VkVideoEncodeH264QpEXT initialRcQp;
	public VkBool32 useMinQp;
	public VkVideoEncodeH264QpEXT minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH264QpEXT maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH264FrameSizeEXT maxFrameSize;

	public static VkVideoEncodeH264RateControlLayerInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH264RateControlLayerInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH264RateControlLayerInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265WeightTableFlags
{
	public ushort luma_weight_l0_flag;
	public ushort chroma_weight_l0_flag;
	public ushort luma_weight_l1_flag;
	public ushort chroma_weight_l1_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265WeightTable
{
	public StdVideoEncodeH265WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public sbyte delta_chroma_log2_weight_denom;
	public unsafe fixed sbyte delta_luma_weight_l0[15];
	public unsafe fixed sbyte luma_offset_l0[15];
	public unsafe fixed sbyte delta_chroma_weight_l0[15 * 2];
	public unsafe fixed sbyte delta_chroma_offset_l0[15 * 2];
	public unsafe fixed sbyte delta_luma_weight_l1[15];
	public unsafe fixed sbyte luma_offset_l1[15];
	public unsafe fixed sbyte delta_chroma_weight_l1[15 * 2];
	public unsafe fixed sbyte delta_chroma_offset_l1[15 * 2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265SliceSegmentHeaderFlags
{
	public uint first_slice_segment_in_pic_flag;
	public uint no_output_of_prior_pics_flag;
	public uint dependent_slice_segment_flag;
	public uint pic_output_flag;
	public uint short_term_ref_pic_set_sps_flag;
	public uint slice_temporal_mvp_enable_flag;
	public uint slice_sao_luma_flag;
	public uint slice_sao_chroma_flag;
	public uint num_ref_idx_active_override_flag;
	public uint mvd_l1_zero_flag;
	public uint cabac_init_flag;
	public uint cu_chroma_qp_offset_enabled_flag;
	public uint deblocking_filter_override_flag;
	public uint slice_deblocking_filter_disabled_flag;
	public uint collocated_from_l0_flag;
	public uint slice_loop_filter_across_slices_enabled_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265SliceSegmentLongTermRefPics
{
	public byte num_long_term_sps;
	public byte num_long_term_pics;
	public unsafe fixed byte lt_idx_sps[32];
	public unsafe fixed byte poc_lsb_lt[16];
	public ushort used_by_curr_pic_lt_flag;
	public unsafe fixed byte delta_poc_msb_present_flag[48];
	public unsafe fixed byte delta_poc_msb_cycle_lt[48];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265SliceSegmentHeader
{
	public StdVideoEncodeH265SliceSegmentHeaderFlags flags;
	public StdVideoH265SliceType slice_type;
	public uint slice_segment_address;
	public byte short_term_ref_pic_set_idx;
	public byte collocated_ref_idx;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public byte MaxNumMergeCand;
	public sbyte slice_cb_qp_offset;
	public sbyte slice_cr_qp_offset;
	public sbyte slice_beta_offset_div2;
	public sbyte slice_tc_offset_div2;
	public sbyte slice_act_y_qp_offset;
	public sbyte slice_act_cb_qp_offset;
	public sbyte slice_act_cr_qp_offset;
	public unsafe StdVideoH265ShortTermRefPicSet* pShortTermRefPicSet;
	public unsafe StdVideoEncodeH265SliceSegmentLongTermRefPics* pLongTermRefPics;
	public unsafe StdVideoEncodeH265WeightTable* pWeightTable;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceListsInfoFlags
{
	public uint ref_pic_list_modification_flag_l0;
	public uint ref_pic_list_modification_flag_l1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceListsInfo
{
	public StdVideoEncodeH265ReferenceListsInfoFlags flags;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public ushort reserved1;
	public unsafe byte* pRefPicList0Entries;
	public unsafe byte* pRefPicList1Entries;
	public unsafe byte* pRefList0Modifications;
	public unsafe byte* pRefList1Modifications;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265PictureInfoFlags
{
	public uint is_reference_flag;
	public uint IrapPicFlag;
	public uint long_term_flag;
	public uint discardable_flag;
	public uint cross_layer_bla_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265PictureInfo
{
	public StdVideoEncodeH265PictureInfoFlags flags;
	public StdVideoH265PictureType PictureType;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public byte TemporalId;
	public int PicOrderCntVal;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceInfo
{
	public StdVideoEncodeH265ReferenceInfoFlags flags;
	public StdVideoH265PictureType PictureType;
	public int PicOrderCntVal;
	public byte TemporalId;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeH265CapabilityFlagsEXT flags;
	public VkVideoEncodeH265CtbSizeFlagsEXT ctbSizes;
	public VkVideoEncodeH265TransformBlockSizeFlagsEXT transformBlockSizes;
	public uint maxPPictureL0ReferenceCount;
	public uint maxBPictureL0ReferenceCount;
	public uint maxL1ReferenceCount;
	public uint maxSubLayersCount;
	public uint minLog2MinLumaCodingBlockSizeMinus3;
	public uint maxLog2MinLumaCodingBlockSizeMinus3;
	public uint minLog2MinLumaTransformBlockSizeMinus2;
	public uint maxLog2MinLumaTransformBlockSizeMinus2;
	public uint minMaxTransformHierarchyDepthInter;
	public uint maxMaxTransformHierarchyDepthInter;
	public uint minMaxTransformHierarchyDepthIntra;
	public uint maxMaxTransformHierarchyDepthIntra;
	public uint maxDiffCuQpDeltaDepth;
	public uint minMaxNumMergeCand;
	public uint maxMaxNumMergeCand;

	public static VkVideoEncodeH265CapabilitiesEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265CapabilitiesEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265CapabilitiesEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stdVPSCount;
	public unsafe StdVideoH265VideoParameterSet* pStdVPSs;
	public uint stdSPSCount;
	public unsafe StdVideoH265SequenceParameterSet* pStdSPSs;
	public uint stdPPSCount;
	public unsafe StdVideoH265PictureParameterSet* pStdPPSs;

	public static VkVideoEncodeH265SessionParametersAddInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265SessionParametersAddInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265SessionParametersAddInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxStdVPSCount;
	public uint maxStdSPSCount;
	public uint maxStdPPSCount;
	public unsafe VkVideoEncodeH265SessionParametersAddInfoEXT* pParametersAddInfo;

	public static VkVideoEncodeH265SessionParametersCreateInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265SessionParametersCreateInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265SessionParametersCreateInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265NaluSliceSegmentInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint ctbCount;
	public unsafe StdVideoEncodeH265ReferenceListsInfo* pStdReferenceFinalLists;
	public unsafe StdVideoEncodeH265SliceSegmentHeader* pStdSliceSegmentHeader;

	public static VkVideoEncodeH265NaluSliceSegmentInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265NaluSliceSegmentInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265NaluSliceSegmentInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265VclFrameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoEncodeH265ReferenceListsInfo* pStdReferenceFinalLists;
	public uint naluSliceSegmentEntryCount;
	public unsafe VkVideoEncodeH265NaluSliceSegmentInfoEXT* pNaluSliceSegmentEntries;
	public unsafe StdVideoEncodeH265PictureInfo* pStdPictureInfo;

	public static VkVideoEncodeH265VclFrameInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265VclFrameInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265VclFrameInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;

	public static VkVideoEncodeH265DpbSlotInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265DpbSlotInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265DpbSlotInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265ProfileInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;

	public static VkVideoEncodeH265ProfileInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265ProfileInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265ProfileInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265RateControlInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public VkVideoEncodeH265RateControlStructureEXT rateControlStructure;
	public uint subLayerCount;

	public static VkVideoEncodeH265RateControlInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265RateControlInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265RateControlInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265QpEXT
{
	public int qpI;
	public int qpP;
	public int qpB;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265FrameSizeEXT
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265RateControlLayerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint temporalId;
	public VkBool32 useInitialRcQp;
	public VkVideoEncodeH265QpEXT initialRcQp;
	public VkBool32 useMinQp;
	public VkVideoEncodeH265QpEXT minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH265QpEXT maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH265FrameSizeEXT maxFrameSize;

	public static VkVideoEncodeH265RateControlLayerInfoEXT New()
	{
		Unsafe.SkipInit(out VkVideoEncodeH265RateControlLayerInfoEXT instance);
		instance.sType = VkStructureType.VideoEncodeH265RateControlLayerInfoEXT;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDisplacementMicromapFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 displacementMicromap;

	public static VkPhysicalDeviceDisplacementMicromapFeaturesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDisplacementMicromapFeaturesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDisplacementMicromapFeaturesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDisplacementMicromapPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxDisplacementMicromapSubdivisionLevel;

	public static VkPhysicalDeviceDisplacementMicromapPropertiesNV New()
	{
		Unsafe.SkipInit(out VkPhysicalDeviceDisplacementMicromapPropertiesNV instance);
		instance.sType = VkStructureType.PhysicalDeviceDisplacementMicromapPropertiesNV;
		return instance;
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureTrianglesDisplacementMicromapNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat displacementBiasAndScaleFormat;
	public VkFormat displacementVectorFormat;
	public VkDeviceOrHostAddressConstKHR displacementBiasAndScaleBuffer;
	public ulong displacementBiasAndScaleStride;
	public VkDeviceOrHostAddressConstKHR displacementVectorBuffer;
	public ulong displacementVectorStride;
	public VkDeviceOrHostAddressConstKHR displacedMicromapPrimitiveFlags;
	public ulong displacedMicromapPrimitiveFlagsStride;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexBuffer;
	public ulong indexStride;
	public uint baseTriangle;
	public uint usageCountsCount;
	public unsafe VkMicromapUsageEXT* pUsageCounts;
	public unsafe VkMicromapUsageEXT** ppUsageCounts;
	public VkMicromapEXT micromap;

	public static VkAccelerationStructureTrianglesDisplacementMicromapNV New()
	{
		Unsafe.SkipInit(out VkAccelerationStructureTrianglesDisplacementMicromapNV instance);
		instance.sType = VkStructureType.AccelerationStructureTrianglesDisplacementMicromapNV;
		return instance;
	}
}

